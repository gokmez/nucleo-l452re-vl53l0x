
nucleo-l452re-vl53l0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009880  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009a20  08009a20  0000aa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad0  08009ad0  0000b30c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ad0  08009ad0  0000aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ad8  08009ad8  0000b30c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad8  08009ad8  0000aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009adc  08009adc  0000aadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000030c  20000000  08009ae0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  2000030c  08009dec  0000b30c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08009dec  0000b784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b30c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017821  00000000  00000000  0000b33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1d  00000000  00000000  00022b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00025680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcb  00000000  00000000  00026860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f64  00000000  00000000  0002762b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160d3  00000000  00000000  0004b58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d70b6  00000000  00000000  00061662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138718  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000504c  00000000  00000000  0013875c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0013d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000030c 	.word	0x2000030c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a08 	.word	0x08009a08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000310 	.word	0x20000310
 80001dc:	08009a08 	.word	0x08009a08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 800057a:	4b16      	ldr	r3, [pc, #88]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x64>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4916      	ldr	r1, [pc, #88]	@ (80005d8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000580:	4618      	mov	r0, r3
 8000582:	f004 febb 	bl	80052fc <VL53L0X_GetRangingMeasurementData>
	VL53L0X_ClearInterruptMask(Dev, 3);
 8000586:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2103      	movs	r1, #3
 800058c:	4618      	mov	r0, r3
 800058e:	f005 f987 	bl	80058a0 <VL53L0X_ClearInterruptMask>
	if(RangingData.RangeStatus == 0)
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000594:	7e1b      	ldrb	r3, [r3, #24]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d112      	bne.n	80005c0 <HAL_GPIO_EXTI_Callback+0x50>
	{
		MessageLen = sprintf((char*)Message, "Measured distance: %i mm\n\r", RangingData.RangeMilliMeter);
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <HAL_GPIO_EXTI_Callback+0x68>)
 800059c:	891b      	ldrh	r3, [r3, #8]
 800059e:	461a      	mov	r2, r3
 80005a0:	490e      	ldr	r1, [pc, #56]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x6c>)
 80005a2:	480f      	ldr	r0, [pc, #60]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80005a4:	f008 fd4e 	bl	8009044 <siprintf>
 80005a8:	4603      	mov	r3, r0
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80005ae:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	2364      	movs	r3, #100	@ 0x64
 80005b8:	4909      	ldr	r1, [pc, #36]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80005ba:	480b      	ldr	r0, [pc, #44]	@ (80005e8 <HAL_GPIO_EXTI_Callback+0x78>)
 80005bc:	f002 ffe0 	bl	8003580 <HAL_UART_Transmit>
	}
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80005c0:	2120      	movs	r1, #32
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c6:	f000 feed 	bl	80013a4 <HAL_GPIO_TogglePin>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000448 	.word	0x20000448
 80005dc:	08009a20 	.word	0x08009a20
 80005e0:	20000404 	.word	0x20000404
 80005e4:	20000444 	.word	0x20000444
 80005e8:	2000037c 	.word	0x2000037c

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fb83 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f8a3 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f963 	bl	80008c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f931 	bl	8000864 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000602:	f000 f8ef 	bl	80007e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Dev->I2cHandle = &hi2c1;
 8000606:	4b4b      	ldr	r3, [pc, #300]	@ (8000734 <main+0x148>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a4b      	ldr	r2, [pc, #300]	@ (8000738 <main+0x14c>)
 800060c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  Dev->I2cDevAddr = 0x52;
 8000610:	4b48      	ldr	r3, [pc, #288]	@ (8000734 <main+0x148>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2252      	movs	r2, #82	@ 0x52
 8000616:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

  //XSHUT
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000622:	f000 fea7 	bl	8001374 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000626:	2014      	movs	r0, #20
 8000628:	f000 fbe4 	bl	8000df4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2180      	movs	r1, #128	@ 0x80
 8000630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000634:	f000 fe9e 	bl	8001374 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000638:	2014      	movs	r0, #20
 800063a:	f000 fbdb 	bl	8000df4 <HAL_Delay>

  //
  // VL53L0X init for Continuous Measurement by using Interrupt Pin and its (lower than) distance threshold
  //
  VL53L0X_WaitDeviceBooted( Dev );
 800063e:	4b3d      	ldr	r3, [pc, #244]	@ (8000734 <main+0x148>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f003 ffbe 	bl	80045c4 <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit( Dev );
 8000648:	4b3a      	ldr	r3, [pc, #232]	@ (8000734 <main+0x148>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fcd5 	bl	8003ffc <VL53L0X_DataInit>
  VL53L0X_StaticInit( Dev );
 8000652:	4b38      	ldr	r3, [pc, #224]	@ (8000734 <main+0x148>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fe34 	bl	80042c4 <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800065c:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <main+0x148>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1c7a      	adds	r2, r7, #1
 8000662:	1cb9      	adds	r1, r7, #2
 8000664:	4618      	mov	r0, r3
 8000666:	f004 fccb 	bl	8005000 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <main+0x148>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	1cfa      	adds	r2, r7, #3
 8000670:	1d39      	adds	r1, r7, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f005 f976 	bl	8005964 <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8000678:	4b2e      	ldr	r3, [pc, #184]	@ (8000734 <main+0x148>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2101      	movs	r1, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f004 f83e 	bl	8004700 <VL53L0X_SetDeviceMode>

  VL53L0X_SetGpioConfig(Dev, 0,
 8000684:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <main+0x148>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	2300      	movs	r3, #0
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2301      	movs	r3, #1
 800068e:	2201      	movs	r2, #1
 8000690:	2100      	movs	r1, #0
 8000692:	f004 ff7f 	bl	8005594 <VL53L0X_SetGpioConfig>
		  VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
		  VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW,
		  VL53L0X_INTERRUPTPOLARITY_LOW);
  VL53L0X_SetInterruptThresholds(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, 150 << 16, 150 << 16);
 8000696:	4b27      	ldr	r3, [pc, #156]	@ (8000734 <main+0x148>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	f44f 0316 	mov.w	r3, #9830400	@ 0x960000
 800069e:	f44f 0216 	mov.w	r2, #9830400	@ 0x960000
 80006a2:	2101      	movs	r1, #1
 80006a4:	f005 f898 	bl	80057d8 <VL53L0X_SetInterruptThresholds>

  // Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80006a8:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <main+0x148>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2201      	movs	r2, #1
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fa9f 	bl	8004bf4 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80006b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <main+0x148>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2201      	movs	r2, #1
 80006bc:	2101      	movs	r1, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fa98 	bl	8004bf4 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <main+0x148>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f641 1299 	movw	r2, #6553	@ 0x1999
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fb40 	bl	8004d54 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <main+0x148>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fb38 	bl	8004d54 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <main+0x148>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f248 01e8 	movw	r1, #33000	@ 0x80e8
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 f865 	bl	80047bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <main+0x148>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2212      	movs	r2, #18
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 f884 	bl	8004808 <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <main+0x148>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	220e      	movs	r2, #14
 8000706:	2101      	movs	r1, #1
 8000708:	4618      	mov	r0, r3
 800070a:	f004 f87d 	bl	8004808 <VL53L0X_SetVcselPulsePeriod>

  vl53l0x_log("Done!");
 800070e:	480b      	ldr	r0, [pc, #44]	@ (800073c <main+0x150>)
 8000710:	f008 fc78 	bl	8009004 <_vl53l0x_log>

  VL53L0X_StartMeasurement(Dev);
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <main+0x148>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fced 	bl	80050f8 <VL53L0X_StartMeasurement>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_SuspendTick();
 800071e:	f000 fb8d 	bl	8000e3c <HAL_SuspendTick>
	  HAL_PWR_EnableSleepOnExit ();
 8000722:	f001 fc8d 	bl	8002040 <HAL_PWR_EnableSleepOnExit>
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000726:	2101      	movs	r1, #1
 8000728:	2000      	movs	r0, #0
 800072a:	f001 fc55 	bl	8001fd8 <HAL_PWR_EnterSLEEPMode>
	  HAL_SuspendTick();
 800072e:	bf00      	nop
 8000730:	e7f5      	b.n	800071e <main+0x132>
 8000732:	bf00      	nop
 8000734:	20000000 	.word	0x20000000
 8000738:	20000328 	.word	0x20000328
 800073c:	08009a3c 	.word	0x08009a3c

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b096      	sub	sp, #88	@ 0x58
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2244      	movs	r2, #68	@ 0x44
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f008 fcd2 	bl	80090f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000762:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000766:	f001 fc89 	bl	800207c <HAL_PWREx_ControlVoltageScaling>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000770:	f000 f934 	bl	80009dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800077e:	2340      	movs	r3, #64	@ 0x40
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000786:	2302      	movs	r3, #2
 8000788:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800078e:	230a      	movs	r3, #10
 8000790:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000792:	2307      	movs	r3, #7
 8000794:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fd08 	bl	80021b8 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ae:	f000 f915 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2303      	movs	r3, #3
 80007b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	2104      	movs	r1, #4
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 f908 	bl	80029e0 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007d6:	f000 f901 	bl	80009dc <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3758      	adds	r7, #88	@ 0x58
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_I2C1_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <MX_I2C1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_I2C1_Init+0x74>)
 80007f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000860 <MX_I2C1_Init+0x7c>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007f4:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_I2C1_Init+0x74>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081e:	480e      	ldr	r0, [pc, #56]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000820:	f000 fdf2 	bl	8001408 <HAL_I2C_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800082a:	f000 f8d7 	bl	80009dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4809      	ldr	r0, [pc, #36]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000832:	f001 fb39 	bl	8001ea8 <HAL_I2CEx_ConfigAnalogFilter>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800083c:	f000 f8ce 	bl	80009dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000844:	f001 fb7b 	bl	8001f3e <HAL_I2CEx_ConfigDigitalFilter>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 f8c5 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000328 	.word	0x20000328
 800085c:	40005400 	.word	0x40005400
 8000860:	10d19ce4 	.word	0x10d19ce4

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <MX_USART2_UART_Init+0x5c>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 80008a8:	f002 fe1c 	bl	80034e4 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f893 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000037c 	.word	0x2000037c
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4b3e      	ldr	r3, [pc, #248]	@ (80009d4 <MX_GPIO_Init+0x110>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	4a3d      	ldr	r2, [pc, #244]	@ (80009d4 <MX_GPIO_Init+0x110>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e6:	4b3b      	ldr	r3, [pc, #236]	@ (80009d4 <MX_GPIO_Init+0x110>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	4b38      	ldr	r3, [pc, #224]	@ (80009d4 <MX_GPIO_Init+0x110>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a37      	ldr	r2, [pc, #220]	@ (80009d4 <MX_GPIO_Init+0x110>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b35      	ldr	r3, [pc, #212]	@ (80009d4 <MX_GPIO_Init+0x110>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b32      	ldr	r3, [pc, #200]	@ (80009d4 <MX_GPIO_Init+0x110>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a31      	ldr	r2, [pc, #196]	@ (80009d4 <MX_GPIO_Init+0x110>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <MX_GPIO_Init+0x110>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0x110>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a2b      	ldr	r2, [pc, #172]	@ (80009d4 <MX_GPIO_Init+0x110>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <MX_GPIO_Init+0x110>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD4_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	21a0      	movs	r1, #160	@ 0xa0
 800093e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000942:	f000 fd17 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000946:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800094c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	481e      	ldr	r0, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0x114>)
 800095e:	f000 fb8f 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097c:	f000 fb80 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099a:	f000 fb71 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_Pin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 800099e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b8:	f000 fb62 	bl	8001080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2028      	movs	r0, #40	@ 0x28
 80009c2:	f000 fb26 	bl	8001012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c6:	2028      	movs	r0, #40	@ 0x28
 80009c8:	f000 fb3f 	bl	800104a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	@ 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000800 	.word	0x48000800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0a:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0a4      	sub	sp, #144	@ 0x90
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2268      	movs	r2, #104	@ 0x68
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f008 fb51 	bl	80090f8 <memset>
  if(hi2c->Instance==I2C1)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <HAL_I2C_MspInit+0xb0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d13b      	bne.n	8000ad8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a60:	2340      	movs	r3, #64	@ 0x40
 8000a62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 f9db 	bl	8002e28 <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a78:	f7ff ffb0 	bl	80009dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a80:	4a18      	ldr	r2, [pc, #96]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a88:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a94:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a98:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	2312      	movs	r3, #18
 8000a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aac:	2304      	movs	r3, #4
 8000aae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abc:	f000 fae0 	bl	8001080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ad8:	bf00      	nop
 8000ada:	3790      	adds	r7, #144	@ 0x90
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0a4      	sub	sp, #144	@ 0x90
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2268      	movs	r2, #104	@ 0x68
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f008 faf5 	bl	80090f8 <memset>
  if(huart->Instance==USART2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a21      	ldr	r2, [pc, #132]	@ (8000b98 <HAL_UART_MspInit+0xb0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d13a      	bne.n	8000b8e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 f97f 	bl	8002e28 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b30:	f7ff ff54 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b38:	4a18      	ldr	r2, [pc, #96]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b50:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b64:	230c      	movs	r3, #12
 8000b66:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b84:	4619      	mov	r1, r3
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f000 fa79 	bl	8001080 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b8e:	bf00      	nop
 8000b90:	3790      	adds	r7, #144	@ 0x90
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 f8dd 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c02:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c06:	f000 fbe7 	bl	80013d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 8000c0a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000c0e:	f000 fbe3 	bl	80013d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f008 fa5e 	bl	8009108 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	200005f4 	.word	0x200005f4
 8000c80:	20000788 	.word	0x20000788

08000c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <LoopForever+0xe>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf4 <LoopForever+0x16>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f008 fa1d 	bl	8009114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cda:	f7ff fc87 	bl	80005ec <main>

08000cde <LoopForever>:

LoopForever:
    b LoopForever
 8000cde:	e7fe      	b.n	8000cde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000030c 	.word	0x2000030c
  ldr r2, =_sidata
 8000cec:	08009ae0 	.word	0x08009ae0
  ldr r2, =_sbss
 8000cf0:	2000030c 	.word	0x2000030c
  ldr r4, =_ebss
 8000cf4:	20000784 	.word	0x20000784

08000cf8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC1_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <HAL_Init+0x3c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d38 <HAL_Init+0x3c>)
 8000d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d12:	2003      	movs	r0, #3
 8000d14:	f000 f972 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 f80f 	bl	8000d3c <HAL_InitTick>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	e001      	b.n	8000d2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2a:	f7ff fe5d 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40022000 	.word	0x40022000

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d48:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <HAL_InitTick+0x6c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d023      	beq.n	8000d98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <HAL_InitTick+0x70>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <HAL_InitTick+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f97d 	bl	8001066 <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10f      	bne.n	8000d92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d809      	bhi.n	8000d8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f000 f947 	bl	8001012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d84:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <HAL_InitTick+0x74>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e007      	b.n	8000d9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e004      	b.n	8000d9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e001      	b.n	8000d9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	20000004 	.word	0x20000004
 8000db0:	20000008 	.word	0x20000008

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	200005f8 	.word	0x200005f8

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200005f8 	.word	0x200005f8

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_Delay+0x44>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffde 	bl	8000ddc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000000c 	.word	0x2000000c

08000e3c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <HAL_SuspendTick+0x1c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_SuspendTick+0x1c>)
 8000e46:	f023 0302 	bic.w	r3, r3, #2
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	@ (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	@ (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	@ (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	@ 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff3e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff31 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa2 	bl	8000fb8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	e154      	b.n	800133a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8146 	beq.w	8001334 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d005      	beq.n	80010c0 <HAL_GPIO_Init+0x40>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d130      	bne.n	8001122 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010f6:	2201      	movs	r2, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	f003 0201 	and.w	r2, r3, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b03      	cmp	r3, #3
 800112c:	d017      	beq.n	800115e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d123      	bne.n	80011b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	08da      	lsrs	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3208      	adds	r2, #8
 8001172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	6939      	ldr	r1, [r7, #16]
 80011ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0203 	and.w	r2, r3, #3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80a0 	beq.w	8001334 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f4:	4b58      	ldr	r3, [pc, #352]	@ (8001358 <HAL_GPIO_Init+0x2d8>)
 80011f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f8:	4a57      	ldr	r2, [pc, #348]	@ (8001358 <HAL_GPIO_Init+0x2d8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001200:	4b55      	ldr	r3, [pc, #340]	@ (8001358 <HAL_GPIO_Init+0x2d8>)
 8001202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800120c:	4a53      	ldr	r2, [pc, #332]	@ (800135c <HAL_GPIO_Init+0x2dc>)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001236:	d019      	beq.n	800126c <HAL_GPIO_Init+0x1ec>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a49      	ldr	r2, [pc, #292]	@ (8001360 <HAL_GPIO_Init+0x2e0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d013      	beq.n	8001268 <HAL_GPIO_Init+0x1e8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a48      	ldr	r2, [pc, #288]	@ (8001364 <HAL_GPIO_Init+0x2e4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00d      	beq.n	8001264 <HAL_GPIO_Init+0x1e4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a47      	ldr	r2, [pc, #284]	@ (8001368 <HAL_GPIO_Init+0x2e8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d007      	beq.n	8001260 <HAL_GPIO_Init+0x1e0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a46      	ldr	r2, [pc, #280]	@ (800136c <HAL_GPIO_Init+0x2ec>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d101      	bne.n	800125c <HAL_GPIO_Init+0x1dc>
 8001258:	2304      	movs	r3, #4
 800125a:	e008      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 800125c:	2307      	movs	r3, #7
 800125e:	e006      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 8001260:	2303      	movs	r3, #3
 8001262:	e004      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 8001264:	2302      	movs	r3, #2
 8001266:	e002      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 800126c:	2300      	movs	r3, #0
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	f002 0203 	and.w	r2, r2, #3
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4093      	lsls	r3, r2
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127e:	4937      	ldr	r1, [pc, #220]	@ (800135c <HAL_GPIO_Init+0x2dc>)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800128c:	4b38      	ldr	r3, [pc, #224]	@ (8001370 <HAL_GPIO_Init+0x2f0>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001370 <HAL_GPIO_Init+0x2f0>)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <HAL_GPIO_Init+0x2f0>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012da:	4a25      	ldr	r2, [pc, #148]	@ (8001370 <HAL_GPIO_Init+0x2f0>)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012e0:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <HAL_GPIO_Init+0x2f0>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001304:	4a1a      	ldr	r2, [pc, #104]	@ (8001370 <HAL_GPIO_Init+0x2f0>)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800130a:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <HAL_GPIO_Init+0x2f0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800132e:	4a10      	ldr	r2, [pc, #64]	@ (8001370 <HAL_GPIO_Init+0x2f0>)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3301      	adds	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	f47f aea3 	bne.w	8001090 <HAL_GPIO_Init+0x10>
  }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48001000 	.word	0x48001000
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001390:	e002      	b.n	8001398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43d9      	mvns	r1, r3
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	400b      	ands	r3, r1
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ee:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f8ba 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e08d      	b.n	8001536 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d106      	bne.n	8001434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fafe 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2224      	movs	r2, #36	@ 0x24
 8001438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	e006      	b.n	8001490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800148e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d108      	bne.n	80014aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	e007      	b.n	80014ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69d9      	ldr	r1, [r3, #28]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1a      	ldr	r2, [r3, #32]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2220      	movs	r2, #32
 8001522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af02      	add	r7, sp, #8
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	461a      	mov	r2, r3
 800154c:	460b      	mov	r3, r1
 800154e:	817b      	strh	r3, [r7, #10]
 8001550:	4613      	mov	r3, r2
 8001552:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b20      	cmp	r3, #32
 800155e:	f040 80fd 	bne.w	800175c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_I2C_Master_Transmit+0x30>
 800156c:	2302      	movs	r3, #2
 800156e:	e0f6      	b.n	800175e <HAL_I2C_Master_Transmit+0x21e>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001578:	f7ff fc30 	bl	8000ddc <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2319      	movs	r3, #25
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 fa0a 	bl	80019a4 <I2C_WaitOnFlagUntilTimeout>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0e1      	b.n	800175e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2221      	movs	r2, #33	@ 0x21
 800159e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2210      	movs	r2, #16
 80015a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	893a      	ldrh	r2, [r7, #8]
 80015ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2bff      	cmp	r3, #255	@ 0xff
 80015ca:	d906      	bls.n	80015da <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	22ff      	movs	r2, #255	@ 0xff
 80015d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80015d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e007      	b.n	80015ea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015de:	b29a      	uxth	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80015e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d024      	beq.n	800163c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800160c:	b29b      	uxth	r3, r3
 800160e:	3b01      	subs	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800161a:	3b01      	subs	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001626:	b2db      	uxtb	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	8979      	ldrh	r1, [r7, #10]
 800162e:	4b4e      	ldr	r3, [pc, #312]	@ (8001768 <HAL_I2C_Master_Transmit+0x228>)
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 fc05 	bl	8001e44 <I2C_TransferConfig>
 800163a:	e066      	b.n	800170a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001640:	b2da      	uxtb	r2, r3
 8001642:	8979      	ldrh	r1, [r7, #10]
 8001644:	4b48      	ldr	r3, [pc, #288]	@ (8001768 <HAL_I2C_Master_Transmit+0x228>)
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fbfa 	bl	8001e44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001650:	e05b      	b.n	800170a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	6a39      	ldr	r1, [r7, #32]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f9fd 	bl	8001a56 <I2C_WaitOnTXISFlagUntilTimeout>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e07b      	b.n	800175e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001680:	b29b      	uxth	r3, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168e:	3b01      	subs	r3, #1
 8001690:	b29a      	uxth	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800169a:	b29b      	uxth	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d034      	beq.n	800170a <HAL_I2C_Master_Transmit+0x1ca>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d130      	bne.n	800170a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	2200      	movs	r2, #0
 80016b0:	2180      	movs	r1, #128	@ 0x80
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 f976 	bl	80019a4 <I2C_WaitOnFlagUntilTimeout>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e04d      	b.n	800175e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2bff      	cmp	r3, #255	@ 0xff
 80016ca:	d90e      	bls.n	80016ea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	22ff      	movs	r2, #255	@ 0xff
 80016d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	8979      	ldrh	r1, [r7, #10]
 80016da:	2300      	movs	r3, #0
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fbae 	bl	8001e44 <I2C_TransferConfig>
 80016e8:	e00f      	b.n	800170a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	8979      	ldrh	r1, [r7, #10]
 80016fc:	2300      	movs	r3, #0
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 fb9d 	bl	8001e44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800170e:	b29b      	uxth	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d19e      	bne.n	8001652 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	6a39      	ldr	r1, [r7, #32]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f9e3 	bl	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e01a      	b.n	800175e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2220      	movs	r2, #32
 800172e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6859      	ldr	r1, [r3, #4]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_I2C_Master_Transmit+0x22c>)
 800173c:	400b      	ands	r3, r1
 800173e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2220      	movs	r2, #32
 8001744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800175c:	2302      	movs	r3, #2
  }
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	80002000 	.word	0x80002000
 800176c:	fe00e800 	.word	0xfe00e800

08001770 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af02      	add	r7, sp, #8
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	461a      	mov	r2, r3
 800177c:	460b      	mov	r3, r1
 800177e:	817b      	strh	r3, [r7, #10]
 8001780:	4613      	mov	r3, r2
 8001782:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b20      	cmp	r3, #32
 800178e:	f040 80db 	bne.w	8001948 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_I2C_Master_Receive+0x30>
 800179c:	2302      	movs	r3, #2
 800179e:	e0d4      	b.n	800194a <HAL_I2C_Master_Receive+0x1da>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017a8:	f7ff fb18 	bl	8000ddc <HAL_GetTick>
 80017ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2319      	movs	r3, #25
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f8f2 	bl	80019a4 <I2C_WaitOnFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0bf      	b.n	800194a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2222      	movs	r2, #34	@ 0x22
 80017ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2210      	movs	r2, #16
 80017d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	893a      	ldrh	r2, [r7, #8]
 80017ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	2bff      	cmp	r3, #255	@ 0xff
 80017fa:	d90e      	bls.n	800181a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2201      	movs	r2, #1
 8001800:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001806:	b2da      	uxtb	r2, r3
 8001808:	8979      	ldrh	r1, [r7, #10]
 800180a:	4b52      	ldr	r3, [pc, #328]	@ (8001954 <HAL_I2C_Master_Receive+0x1e4>)
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 fb16 	bl	8001e44 <I2C_TransferConfig>
 8001818:	e06d      	b.n	80018f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001828:	b2da      	uxtb	r2, r3
 800182a:	8979      	ldrh	r1, [r7, #10]
 800182c:	4b49      	ldr	r3, [pc, #292]	@ (8001954 <HAL_I2C_Master_Receive+0x1e4>)
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 fb05 	bl	8001e44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800183a:	e05c      	b.n	80018f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	6a39      	ldr	r1, [r7, #32]
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 f993 	bl	8001b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e07c      	b.n	800194a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186c:	3b01      	subs	r3, #1
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	3b01      	subs	r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d034      	beq.n	80018f6 <HAL_I2C_Master_Receive+0x186>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d130      	bne.n	80018f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	2200      	movs	r2, #0
 800189c:	2180      	movs	r1, #128	@ 0x80
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f880 	bl	80019a4 <I2C_WaitOnFlagUntilTimeout>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e04d      	b.n	800194a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	2bff      	cmp	r3, #255	@ 0xff
 80018b6:	d90e      	bls.n	80018d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	22ff      	movs	r2, #255	@ 0xff
 80018bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	8979      	ldrh	r1, [r7, #10]
 80018c6:	2300      	movs	r3, #0
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 fab8 	bl	8001e44 <I2C_TransferConfig>
 80018d4:	e00f      	b.n	80018f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	8979      	ldrh	r1, [r7, #10]
 80018e8:	2300      	movs	r3, #0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 faa7 	bl	8001e44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d19d      	bne.n	800183c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	6a39      	ldr	r1, [r7, #32]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f8ed 	bl	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e01a      	b.n	800194a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2220      	movs	r2, #32
 800191a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6859      	ldr	r1, [r3, #4]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <HAL_I2C_Master_Receive+0x1e8>)
 8001928:	400b      	ands	r3, r1
 800192a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2220      	movs	r2, #32
 8001930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
  }
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	80002400 	.word	0x80002400
 8001958:	fe00e800 	.word	0xfe00e800

0800195c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b02      	cmp	r3, #2
 8001970:	d103      	bne.n	800197a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d007      	beq.n	8001998 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	619a      	str	r2, [r3, #24]
  }
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019b4:	e03b      	b.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	6839      	ldr	r1, [r7, #0]
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f962 	bl	8001c84 <I2C_IsErrorOccurred>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e041      	b.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d02d      	beq.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d2:	f7ff fa03 	bl	8000ddc <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d302      	bcc.n	80019e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d122      	bne.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	4013      	ands	r3, r2
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d113      	bne.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	f043 0220 	orr.w	r2, r3, #32
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699a      	ldr	r2, [r3, #24]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4013      	ands	r3, r2
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	bf0c      	ite	eq
 8001a3e:	2301      	moveq	r3, #1
 8001a40:	2300      	movne	r3, #0
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d0b4      	beq.n	80019b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a62:	e033      	b.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f90b 	bl	8001c84 <I2C_IsErrorOccurred>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e031      	b.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7e:	d025      	beq.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a80:	f7ff f9ac 	bl	8000ddc <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d302      	bcc.n	8001a96 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d11a      	bne.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d013      	beq.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa8:	f043 0220 	orr.w	r2, r3, #32
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e007      	b.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d1c4      	bne.n	8001a64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001af0:	e02f      	b.n	8001b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f8c4 	bl	8001c84 <I2C_IsErrorOccurred>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e02d      	b.n	8001b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b06:	f7ff f969 	bl	8000ddc <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d302      	bcc.n	8001b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d11a      	bne.n	8001b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d013      	beq.n	8001b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f043 0220 	orr.w	r2, r3, #32
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e007      	b.n	8001b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d1c8      	bne.n	8001af2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001b7c:	e071      	b.n	8001c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f87e 	bl	8001c84 <I2C_IsErrorOccurred>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d13b      	bne.n	8001c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d138      	bne.n	8001c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d105      	bne.n	8001bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d121      	bne.n	8001c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2220      	movs	r2, #32
 8001be2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001bf0:	400b      	ands	r3, r1
 8001bf2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	75fb      	strb	r3, [r7, #23]
 8001c10:	e002      	b.n	8001c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001c18:	f7ff f8e0 	bl	8000ddc <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d302      	bcc.n	8001c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d119      	bne.n	8001c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d116      	bne.n	8001c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d00f      	beq.n	8001c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d002      	beq.n	8001c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d083      	beq.n	8001b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	fe00e800 	.word	0xfe00e800

08001c84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d068      	beq.n	8001d82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cb8:	e049      	b.n	8001d4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d045      	beq.n	8001d4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cc2:	f7ff f88b 	bl	8000ddc <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d302      	bcc.n	8001cd8 <I2C_IsErrorOccurred+0x54>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d13a      	bne.n	8001d4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001cea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cfa:	d121      	bne.n	8001d40 <I2C_IsErrorOccurred+0xbc>
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d02:	d01d      	beq.n	8001d40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d04:	7cfb      	ldrb	r3, [r7, #19]
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d01a      	beq.n	8001d40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d1a:	f7ff f85f 	bl	8000ddc <HAL_GetTick>
 8001d1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d20:	e00e      	b.n	8001d40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d22:	f7ff f85b 	bl	8000ddc <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b19      	cmp	r3, #25
 8001d2e:	d907      	bls.n	8001d40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	f043 0320 	orr.w	r3, r3, #32
 8001d36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001d3e:	e006      	b.n	8001d4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d1e9      	bne.n	8001d22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d003      	beq.n	8001d64 <I2C_IsErrorOccurred+0xe0>
 8001d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0aa      	beq.n	8001cba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2220      	movs	r2, #32
 8001d72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00b      	beq.n	8001dac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001da4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01c      	beq.n	8001e32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7ff fdaf 	bl	800195c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <I2C_IsErrorOccurred+0x1bc>)
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3728      	adds	r7, #40	@ 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	fe00e800 	.word	0xfe00e800

08001e44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	817b      	strh	r3, [r7, #10]
 8001e52:	4613      	mov	r3, r2
 8001e54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e5c:	7a7b      	ldrb	r3, [r7, #9]
 8001e5e:	041b      	lsls	r3, r3, #16
 8001e60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	0d5b      	lsrs	r3, r3, #21
 8001e7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <I2C_TransferConfig+0x60>)
 8001e84:	430b      	orrs	r3, r1
 8001e86:	43db      	mvns	r3, r3
 8001e88:	ea02 0103 	and.w	r1, r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	03ff63ff 	.word	0x03ff63ff

08001ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d138      	bne.n	8001f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e032      	b.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	@ 0x24
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d139      	bne.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e033      	b.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2224      	movs	r2, #36	@ 0x24
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001fea:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ff6:	d10e      	bne.n	8002016 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001ff8:	f000 f8a6 	bl	8002148 <HAL_PWREx_DisableLowPowerRunMode>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8002002:	e016      	b.n	8002032 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800200c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002010:	d001      	beq.n	8002016 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002012:	f000 f889 	bl	8002128 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <HAL_PWR_EnterSLEEPMode+0x64>)
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	4a08      	ldr	r2, [pc, #32]	@ (800203c <HAL_PWR_EnterSLEEPMode+0x64>)
 800201c:	f023 0304 	bic.w	r3, r3, #4
 8002020:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002028:	bf30      	wfi
 800202a:	e002      	b.n	8002032 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800202c:	bf40      	sev
    __WFE();
 800202e:	bf20      	wfe
    __WFE();
 8002030:	bf20      	wfe
  }

}
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40007000 	.word	0x40007000
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_PWR_EnableSleepOnExit+0x1c>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <HAL_PWR_EnableSleepOnExit+0x1c>)
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	6113      	str	r3, [r2, #16]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <HAL_PWREx_GetVoltageRange+0x18>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40007000 	.word	0x40007000

0800207c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800208a:	d130      	bne.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800208c:	4b23      	ldr	r3, [pc, #140]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002098:	d038      	beq.n	800210c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800209a:	4b20      	ldr	r3, [pc, #128]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020a2:	4a1e      	ldr	r2, [pc, #120]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2232      	movs	r2, #50	@ 0x32
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9b      	lsrs	r3, r3, #18
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c0:	e002      	b.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c8:	4b14      	ldr	r3, [pc, #80]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d4:	d102      	bne.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f2      	bne.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020dc:	4b0f      	ldr	r3, [pc, #60]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e8:	d110      	bne.n	800210c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e00f      	b.n	800210e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ee:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fa:	d007      	beq.n	800210c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020fc:	4b07      	ldr	r3, [pc, #28]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002104:	4a05      	ldr	r2, [pc, #20]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40007000 	.word	0x40007000
 8002120:	20000004 	.word	0x20000004
 8002124:	431bde83 	.word	0x431bde83

08002128 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40007000 	.word	0x40007000

08002148 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a16      	ldr	r2, [pc, #88]	@ (80021ac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002154:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002158:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2232      	movs	r2, #50	@ 0x32
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	4a13      	ldr	r2, [pc, #76]	@ (80021b4 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0c9b      	lsrs	r3, r3, #18
 800216c:	3301      	adds	r3, #1
 800216e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002170:	e002      	b.n	8002178 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3b01      	subs	r3, #1
 8002176:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002184:	d102      	bne.n	800218c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f2      	bne.n	8002172 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800218c:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002198:	d101      	bne.n	800219e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e000      	b.n	80021a0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40007000 	.word	0x40007000
 80021b0:	20000004 	.word	0x20000004
 80021b4:	431bde83 	.word	0x431bde83

080021b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f000 bc02 	b.w	80029d0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021cc:	4b96      	ldr	r3, [pc, #600]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d6:	4b94      	ldr	r3, [pc, #592]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80e4 	beq.w	80023b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <HAL_RCC_OscConfig+0x4c>
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	f040 808b 	bne.w	8002312 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	f040 8087 	bne.w	8002312 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002204:	4b88      	ldr	r3, [pc, #544]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_OscConfig+0x64>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e3d9      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1a      	ldr	r2, [r3, #32]
 8002220:	4b81      	ldr	r3, [pc, #516]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <HAL_RCC_OscConfig+0x7e>
 800222c:	4b7e      	ldr	r3, [pc, #504]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002234:	e005      	b.n	8002242 <HAL_RCC_OscConfig+0x8a>
 8002236:	4b7c      	ldr	r3, [pc, #496]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002242:	4293      	cmp	r3, r2
 8002244:	d223      	bcs.n	800228e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fd8c 	bl	8002d68 <RCC_SetFlashLatencyFromMSIRange>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e3ba      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225a:	4b73      	ldr	r3, [pc, #460]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a72      	ldr	r2, [pc, #456]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b70      	ldr	r3, [pc, #448]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	496d      	ldr	r1, [pc, #436]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002278:	4b6b      	ldr	r3, [pc, #428]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	4968      	ldr	r1, [pc, #416]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
 800228c:	e025      	b.n	80022da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800228e:	4b66      	ldr	r3, [pc, #408]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a65      	ldr	r2, [pc, #404]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b63      	ldr	r3, [pc, #396]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4960      	ldr	r1, [pc, #384]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	495b      	ldr	r1, [pc, #364]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fd4c 	bl	8002d68 <RCC_SetFlashLatencyFromMSIRange>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e37a      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022da:	f000 fc81 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b51      	ldr	r3, [pc, #324]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	4950      	ldr	r1, [pc, #320]	@ (800242c <HAL_RCC_OscConfig+0x274>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002430 <HAL_RCC_OscConfig+0x278>)
 80022f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002434 <HAL_RCC_OscConfig+0x27c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fd1c 	bl	8000d3c <HAL_InitTick>
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d052      	beq.n	80023b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	e35e      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d032      	beq.n	8002380 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800231a:	4b43      	ldr	r3, [pc, #268]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a42      	ldr	r2, [pc, #264]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002326:	f7fe fd59 	bl	8000ddc <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232e:	f7fe fd55 	bl	8000ddc <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e347      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002340:	4b39      	ldr	r3, [pc, #228]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800234c:	4b36      	ldr	r3, [pc, #216]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a35      	ldr	r2, [pc, #212]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002352:	f043 0308 	orr.w	r3, r3, #8
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b33      	ldr	r3, [pc, #204]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4930      	ldr	r1, [pc, #192]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800236a:	4b2f      	ldr	r3, [pc, #188]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	492b      	ldr	r1, [pc, #172]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
 800237e:	e01a      	b.n	80023b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002380:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a28      	ldr	r2, [pc, #160]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800238c:	f7fe fd26 	bl	8000ddc <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002394:	f7fe fd22 	bl	8000ddc <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e314      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023a6:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x1dc>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d073      	beq.n	80024aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_OscConfig+0x21c>
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d10e      	bne.n	80023ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d10b      	bne.n	80023ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d4:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d063      	beq.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d15f      	bne.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e2f1      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f4:	d106      	bne.n	8002404 <HAL_RCC_OscConfig+0x24c>
 80023f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e025      	b.n	8002450 <HAL_RCC_OscConfig+0x298>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800240c:	d114      	bne.n	8002438 <HAL_RCC_OscConfig+0x280>
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b03      	ldr	r3, [pc, #12]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a02      	ldr	r2, [pc, #8]	@ (8002428 <HAL_RCC_OscConfig+0x270>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e013      	b.n	8002450 <HAL_RCC_OscConfig+0x298>
 8002428:	40021000 	.word	0x40021000
 800242c:	08009a44 	.word	0x08009a44
 8002430:	20000004 	.word	0x20000004
 8002434:	20000008 	.word	0x20000008
 8002438:	4ba0      	ldr	r3, [pc, #640]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a9f      	ldr	r2, [pc, #636]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b9d      	ldr	r3, [pc, #628]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a9c      	ldr	r2, [pc, #624]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800244e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fcc0 	bl	8000ddc <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe fcbc 	bl	8000ddc <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	@ 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e2ae      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002472:	4b92      	ldr	r3, [pc, #584]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x2a8>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fcac 	bl	8000ddc <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002488:	f7fe fca8 	bl	8000ddc <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	@ 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e29a      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800249a:	4b88      	ldr	r3, [pc, #544]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x2d0>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d060      	beq.n	8002578 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_OscConfig+0x310>
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d119      	bne.n	80024f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d116      	bne.n	80024f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c8:	4b7c      	ldr	r3, [pc, #496]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_OscConfig+0x328>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e277      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4b76      	ldr	r3, [pc, #472]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	061b      	lsls	r3, r3, #24
 80024ee:	4973      	ldr	r1, [pc, #460]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f4:	e040      	b.n	8002578 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d023      	beq.n	8002546 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fe:	4b6f      	ldr	r3, [pc, #444]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6e      	ldr	r2, [pc, #440]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7fe fc67 	bl	8000ddc <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002512:	f7fe fc63 	bl	8000ddc <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e255      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002524:	4b65      	ldr	r3, [pc, #404]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	4b62      	ldr	r3, [pc, #392]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	495f      	ldr	r1, [pc, #380]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
 8002544:	e018      	b.n	8002578 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002546:	4b5d      	ldr	r3, [pc, #372]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a5c      	ldr	r2, [pc, #368]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 800254c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe fc43 	bl	8000ddc <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe fc3f 	bl	8000ddc <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e231      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800256c:	4b53      	ldr	r3, [pc, #332]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d03c      	beq.n	80025fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258c:	4b4b      	ldr	r3, [pc, #300]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002592:	4a4a      	ldr	r2, [pc, #296]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe fc1e 	bl	8000ddc <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a4:	f7fe fc1a 	bl	8000ddc <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e20c      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025b6:	4b41      	ldr	r3, [pc, #260]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 80025b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <HAL_RCC_OscConfig+0x3ec>
 80025c4:	e01b      	b.n	80025fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c6:	4b3d      	ldr	r3, [pc, #244]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 80025c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025cc:	4a3b      	ldr	r2, [pc, #236]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe fc01 	bl	8000ddc <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025de:	f7fe fbfd 	bl	8000ddc <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e1ef      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025f0:	4b32      	ldr	r3, [pc, #200]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 80025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ef      	bne.n	80025de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80a6 	beq.w	8002758 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260c:	2300      	movs	r3, #0
 800260e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002610:	4b2a      	ldr	r3, [pc, #168]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10d      	bne.n	8002638 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261c:	4b27      	ldr	r3, [pc, #156]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	4a26      	ldr	r2, [pc, #152]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002626:	6593      	str	r3, [r2, #88]	@ 0x58
 8002628:	4b24      	ldr	r3, [pc, #144]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002634:	2301      	movs	r3, #1
 8002636:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002638:	4b21      	ldr	r3, [pc, #132]	@ (80026c0 <HAL_RCC_OscConfig+0x508>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d118      	bne.n	8002676 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002644:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <HAL_RCC_OscConfig+0x508>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1d      	ldr	r2, [pc, #116]	@ (80026c0 <HAL_RCC_OscConfig+0x508>)
 800264a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002650:	f7fe fbc4 	bl	8000ddc <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002658:	f7fe fbc0 	bl	8000ddc <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1b2      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266a:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <HAL_RCC_OscConfig+0x508>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <HAL_RCC_OscConfig+0x4d8>
 800267e:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002684:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800268e:	e029      	b.n	80026e4 <HAL_RCC_OscConfig+0x52c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d115      	bne.n	80026c4 <HAL_RCC_OscConfig+0x50c>
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	4a07      	ldr	r2, [pc, #28]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026a8:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	4a03      	ldr	r2, [pc, #12]	@ (80026bc <HAL_RCC_OscConfig+0x504>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026b8:	e014      	b.n	80026e4 <HAL_RCC_OscConfig+0x52c>
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
 80026c4:	4b9a      	ldr	r3, [pc, #616]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	4a99      	ldr	r2, [pc, #612]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026d4:	4b96      	ldr	r3, [pc, #600]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026da:	4a95      	ldr	r2, [pc, #596]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80026dc:	f023 0304 	bic.w	r3, r3, #4
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d016      	beq.n	800271a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fb76 	bl	8000ddc <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7fe fb72 	bl	8000ddc <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e162      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270a:	4b89      	ldr	r3, [pc, #548]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ed      	beq.n	80026f4 <HAL_RCC_OscConfig+0x53c>
 8002718:	e015      	b.n	8002746 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7fe fb5f 	bl	8000ddc <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002720:	e00a      	b.n	8002738 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe fb5b 	bl	8000ddc <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e14b      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002738:	4b7d      	ldr	r3, [pc, #500]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ed      	bne.n	8002722 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002746:	7ffb      	ldrb	r3, [r7, #31]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d105      	bne.n	8002758 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274c:	4b78      	ldr	r3, [pc, #480]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	4a77      	ldr	r2, [pc, #476]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 8002752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002756:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d03c      	beq.n	80027de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01c      	beq.n	80027a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800276c:	4b70      	ldr	r3, [pc, #448]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 800276e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002772:	4a6f      	ldr	r2, [pc, #444]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe fb2e 	bl	8000ddc <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002784:	f7fe fb2a 	bl	8000ddc <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e11c      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002796:	4b66      	ldr	r3, [pc, #408]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 8002798:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ef      	beq.n	8002784 <HAL_RCC_OscConfig+0x5cc>
 80027a4:	e01b      	b.n	80027de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027a6:	4b62      	ldr	r3, [pc, #392]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80027a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027ac:	4a60      	ldr	r2, [pc, #384]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe fb11 	bl	8000ddc <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027be:	f7fe fb0d 	bl	8000ddc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0ff      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027d0:	4b57      	ldr	r3, [pc, #348]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80027d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ef      	bne.n	80027be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80f3 	beq.w	80029ce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	f040 80c9 	bne.w	8002984 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f003 0203 	and.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002802:	429a      	cmp	r2, r3
 8002804:	d12c      	bne.n	8002860 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002810:	3b01      	subs	r3, #1
 8002812:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d123      	bne.n	8002860 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002822:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d11b      	bne.n	8002860 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d113      	bne.n	8002860 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	3b01      	subs	r3, #1
 8002846:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d109      	bne.n	8002860 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	3b01      	subs	r3, #1
 800285a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d06b      	beq.n	8002938 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b0c      	cmp	r3, #12
 8002864:	d062      	beq.n	800292c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002866:	4b32      	ldr	r3, [pc, #200]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0ac      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002876:	4b2e      	ldr	r3, [pc, #184]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2d      	ldr	r2, [pc, #180]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 800287c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002880:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002882:	f7fe faab 	bl	8000ddc <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe faa7 	bl	8000ddc <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e099      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289c:	4b24      	ldr	r3, [pc, #144]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a8:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	4b21      	ldr	r3, [pc, #132]	@ (8002934 <HAL_RCC_OscConfig+0x77c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028b8:	3a01      	subs	r2, #1
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	4311      	orrs	r1, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028c2:	0212      	lsls	r2, r2, #8
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028ca:	0852      	lsrs	r2, r2, #1
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0552      	lsls	r2, r2, #21
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028d6:	0852      	lsrs	r2, r2, #1
 80028d8:	3a01      	subs	r2, #1
 80028da:	0652      	lsls	r2, r2, #25
 80028dc:	4311      	orrs	r1, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028e2:	06d2      	lsls	r2, r2, #27
 80028e4:	430a      	orrs	r2, r1
 80028e6:	4912      	ldr	r1, [pc, #72]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028ec:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 80028fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002902:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002904:	f7fe fa6a 	bl	8000ddc <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fa66 	bl	8000ddc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e058      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <HAL_RCC_OscConfig+0x778>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800292a:	e050      	b.n	80029ce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e04f      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
 8002930:	40021000 	.word	0x40021000
 8002934:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002938:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d144      	bne.n	80029ce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002944:	4b24      	ldr	r3, [pc, #144]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a23      	ldr	r2, [pc, #140]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800294e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002950:	4b21      	ldr	r3, [pc, #132]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a20      	ldr	r2, [pc, #128]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800295a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800295c:	f7fe fa3e 	bl	8000ddc <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe fa3a 	bl	8000ddc <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e02c      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002976:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x7ac>
 8002982:	e024      	b.n	80029ce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d01f      	beq.n	80029ca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a12      	ldr	r2, [pc, #72]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 8002990:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe fa21 	bl	8000ddc <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299e:	f7fe fa1d 	bl	8000ddc <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e00f      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	4905      	ldr	r1, [pc, #20]	@ (80029d8 <HAL_RCC_OscConfig+0x820>)
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_RCC_OscConfig+0x824>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	60cb      	str	r3, [r1, #12]
 80029c8:	e001      	b.n	80029ce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	feeefffc 	.word	0xfeeefffc

080029e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0e7      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b75      	ldr	r3, [pc, #468]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d910      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b72      	ldr	r3, [pc, #456]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0207 	bic.w	r2, r3, #7
 8002a0a:	4970      	ldr	r1, [pc, #448]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b6e      	ldr	r3, [pc, #440]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0cf      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d010      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	4b66      	ldr	r3, [pc, #408]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d908      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b63      	ldr	r3, [pc, #396]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4960      	ldr	r1, [pc, #384]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d04c      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a66:	4b5a      	ldr	r3, [pc, #360]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d121      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0a6      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7e:	4b54      	ldr	r3, [pc, #336]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d115      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e09a      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a96:	4b4e      	ldr	r3, [pc, #312]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e08e      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e086      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ab6:	4b46      	ldr	r3, [pc, #280]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4943      	ldr	r1, [pc, #268]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac8:	f7fe f988 	bl	8000ddc <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7fe f984 	bl	8000ddc <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e06e      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 020c 	and.w	r2, r3, #12
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1eb      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d010      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	4b31      	ldr	r3, [pc, #196]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d208      	bcs.n	8002b26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	492b      	ldr	r1, [pc, #172]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b26:	4b29      	ldr	r3, [pc, #164]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d210      	bcs.n	8002b56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b34:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 0207 	bic.w	r2, r3, #7
 8002b3c:	4923      	ldr	r1, [pc, #140]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b44:	4b21      	ldr	r3, [pc, #132]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e036      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b62:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	4918      	ldr	r1, [pc, #96]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d009      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b80:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4910      	ldr	r1, [pc, #64]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b94:	f000 f824 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	490b      	ldr	r1, [pc, #44]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1f4>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb0:	4a09      	ldr	r2, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_RCC_ClockConfig+0x1fc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe f8bf 	bl	8000d3c <HAL_InitTick>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	08009a44 	.word	0x08009a44
 8002bd8:	20000004 	.word	0x20000004
 8002bdc:	20000008 	.word	0x20000008

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	@ 0x24
 8002be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x34>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d121      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11e      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c14:	4b34      	ldr	r3, [pc, #208]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c20:	4b31      	ldr	r3, [pc, #196]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e005      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10d      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d102      	bne.n	8002c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c58:	4b25      	ldr	r3, [pc, #148]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e004      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c64:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d134      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d003      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0xac>
 8002c84:	e005      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c88:	617b      	str	r3, [r7, #20]
      break;
 8002c8a:	e005      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c8e:	617b      	str	r3, [r7, #20]
      break;
 8002c90:	e002      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	617b      	str	r3, [r7, #20]
      break;
 8002c96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	fb03 f202 	mul.w	r2, r3, r2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	0e5b      	lsrs	r3, r3, #25
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3724      	adds	r7, #36	@ 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08009a5c 	.word	0x08009a5c
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	007a1200 	.word	0x007a1200

08002cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000004 	.word	0x20000004

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4904      	ldr	r1, [pc, #16]	@ (8002d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	08009a54 	.word	0x08009a54

08002d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d40:	f7ff ffda 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	0adb      	lsrs	r3, r3, #11
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4904      	ldr	r1, [pc, #16]	@ (8002d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000
 8002d64:	08009a54 	.word	0x08009a54

08002d68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d74:	4b2a      	ldr	r3, [pc, #168]	@ (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d80:	f7ff f96e 	bl	8002060 <HAL_PWREx_GetVoltageRange>
 8002d84:	6178      	str	r0, [r7, #20]
 8002d86:	e014      	b.n	8002db2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d88:	4b25      	ldr	r3, [pc, #148]	@ (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	4a24      	ldr	r2, [pc, #144]	@ (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d94:	4b22      	ldr	r3, [pc, #136]	@ (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002da0:	f7ff f95e 	bl	8002060 <HAL_PWREx_GetVoltageRange>
 8002da4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002da6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002daa:	4a1d      	ldr	r2, [pc, #116]	@ (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002db8:	d10b      	bne.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b80      	cmp	r3, #128	@ 0x80
 8002dbe:	d919      	bls.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dc4:	d902      	bls.n	8002dcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	e013      	b.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dcc:	2301      	movs	r3, #1
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	e010      	b.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b80      	cmp	r3, #128	@ 0x80
 8002dd6:	d902      	bls.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dd8:	2303      	movs	r3, #3
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	e00a      	b.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b80      	cmp	r3, #128	@ 0x80
 8002de2:	d102      	bne.n	8002dea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de4:	2302      	movs	r3, #2
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	e004      	b.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b70      	cmp	r3, #112	@ 0x70
 8002dee:	d101      	bne.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002df0:	2301      	movs	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 0207 	bic.w	r2, r3, #7
 8002dfc:	4909      	ldr	r1, [pc, #36]	@ (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e04:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d001      	beq.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40022000 	.word	0x40022000

08002e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e30:	2300      	movs	r3, #0
 8002e32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e34:	2300      	movs	r3, #0
 8002e36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d031      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e4c:	d01a      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e52:	d814      	bhi.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e5c:	d10f      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4a5c      	ldr	r2, [pc, #368]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e6a:	e00c      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fa44 	bl	8003300 <RCCEx_PLLSAI1_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e7c:	e003      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	74fb      	strb	r3, [r7, #19]
      break;
 8002e82:	e000      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e8c:	4b51      	ldr	r3, [pc, #324]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9a:	494e      	ldr	r1, [pc, #312]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ea2:	e001      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 809e 	beq.w	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eba:	4b46      	ldr	r3, [pc, #280]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed0:	4b40      	ldr	r3, [pc, #256]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8002edc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eec:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a39      	ldr	r2, [pc, #228]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ef8:	f7fd ff70 	bl	8000ddc <HAL_GetTick>
 8002efc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002efe:	e009      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f00:	f7fd ff6c 	bl	8000ddc <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d902      	bls.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	74fb      	strb	r3, [r7, #19]
        break;
 8002f12:	e005      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f14:	4b30      	ldr	r3, [pc, #192]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ef      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d15a      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f26:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01e      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d019      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f42:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f4c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f4e:	4b21      	ldr	r3, [pc, #132]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f54:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f64:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f6e:	4a19      	ldr	r2, [pc, #100]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d016      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fd ff2c 	bl	8000ddc <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fd ff28 	bl	8000ddc <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d902      	bls.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	74fb      	strb	r3, [r7, #19]
            break;
 8002f9e:	e006      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0ec      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb4:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc2:	4904      	ldr	r1, [pc, #16]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fca:	e009      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	74bb      	strb	r3, [r7, #18]
 8002fd0:	e006      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fdc:	7cfb      	ldrb	r3, [r7, #19]
 8002fde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe0:	7c7b      	ldrb	r3, [r7, #17]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d105      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4b9e      	ldr	r3, [pc, #632]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	4a9d      	ldr	r2, [pc, #628]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ffe:	4b98      	ldr	r3, [pc, #608]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003004:	f023 0203 	bic.w	r2, r3, #3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4994      	ldr	r1, [pc, #592]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003020:	4b8f      	ldr	r3, [pc, #572]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003026:	f023 020c 	bic.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	498c      	ldr	r1, [pc, #560]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003042:	4b87      	ldr	r3, [pc, #540]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003048:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	4983      	ldr	r1, [pc, #524]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003064:	4b7e      	ldr	r3, [pc, #504]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	497b      	ldr	r1, [pc, #492]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003086:	4b76      	ldr	r3, [pc, #472]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	4972      	ldr	r1, [pc, #456]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	496a      	ldr	r1, [pc, #424]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030ca:	4b65      	ldr	r3, [pc, #404]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d8:	4961      	ldr	r1, [pc, #388]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ec:	4b5c      	ldr	r3, [pc, #368]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fa:	4959      	ldr	r1, [pc, #356]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800310e:	4b54      	ldr	r3, [pc, #336]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003114:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311c:	4950      	ldr	r1, [pc, #320]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003130:	4b4b      	ldr	r3, [pc, #300]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003136:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313e:	4948      	ldr	r1, [pc, #288]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003152:	4b43      	ldr	r3, [pc, #268]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003154:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003158:	f023 0203 	bic.w	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	493f      	ldr	r1, [pc, #252]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d028      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003174:	4b3a      	ldr	r3, [pc, #232]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003182:	4937      	ldr	r1, [pc, #220]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003192:	d106      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003194:	4b32      	ldr	r3, [pc, #200]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a31      	ldr	r2, [pc, #196]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800319a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800319e:	60d3      	str	r3, [r2, #12]
 80031a0:	e011      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	2101      	movs	r1, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f8a4 	bl	8003300 <RCCEx_PLLSAI1_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80031c2:	7cfb      	ldrb	r3, [r7, #19]
 80031c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d028      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031d2:	4b23      	ldr	r3, [pc, #140]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	491f      	ldr	r1, [pc, #124]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031f0:	d106      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031fc:	60d3      	str	r3, [r2, #12]
 80031fe:	e011      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003204:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003208:	d10c      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	2101      	movs	r1, #1
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f875 	bl	8003300 <RCCEx_PLLSAI1_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d02b      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003236:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323e:	4908      	ldr	r1, [pc, #32]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800324e:	d109      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003250:	4b03      	ldr	r3, [pc, #12]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4a02      	ldr	r2, [pc, #8]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800325a:	60d3      	str	r3, [r2, #12]
 800325c:	e014      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800326c:	d10c      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	2101      	movs	r1, #1
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f843 	bl	8003300 <RCCEx_PLLSAI1_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01c      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003294:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a2:	4916      	ldr	r1, [pc, #88]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032b2:	d10c      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	2102      	movs	r1, #2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f820 	bl	8003300 <RCCEx_PLLSAI1_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e8:	4904      	ldr	r1, [pc, #16]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000

08003300 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800330e:	4b74      	ldr	r3, [pc, #464]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d018      	beq.n	800334c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800331a:	4b71      	ldr	r3, [pc, #452]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0203 	and.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d10d      	bne.n	8003346 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
       ||
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003332:	4b6b      	ldr	r3, [pc, #428]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
       ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d047      	beq.n	80033d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
 800334a:	e044      	b.n	80033d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d018      	beq.n	8003386 <RCCEx_PLLSAI1_Config+0x86>
 8003354:	2b03      	cmp	r3, #3
 8003356:	d825      	bhi.n	80033a4 <RCCEx_PLLSAI1_Config+0xa4>
 8003358:	2b01      	cmp	r3, #1
 800335a:	d002      	beq.n	8003362 <RCCEx_PLLSAI1_Config+0x62>
 800335c:	2b02      	cmp	r3, #2
 800335e:	d009      	beq.n	8003374 <RCCEx_PLLSAI1_Config+0x74>
 8003360:	e020      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003362:	4b5f      	ldr	r3, [pc, #380]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d11d      	bne.n	80033aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003372:	e01a      	b.n	80033aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003374:	4b5a      	ldr	r3, [pc, #360]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800337c:	2b00      	cmp	r3, #0
 800337e:	d116      	bne.n	80033ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003384:	e013      	b.n	80033ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003386:	4b56      	ldr	r3, [pc, #344]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003392:	4b53      	ldr	r3, [pc, #332]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033a2:	e006      	b.n	80033b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e004      	b.n	80033b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033aa:	bf00      	nop
 80033ac:	e002      	b.n	80033b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ae:	bf00      	nop
 80033b0:	e000      	b.n	80033b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10d      	bne.n	80033d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ba:	4b49      	ldr	r3, [pc, #292]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	430b      	orrs	r3, r1
 80033d0:	4943      	ldr	r1, [pc, #268]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d17c      	bne.n	80034d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033dc:	4b40      	ldr	r3, [pc, #256]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a3f      	ldr	r2, [pc, #252]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e8:	f7fd fcf8 	bl	8000ddc <HAL_GetTick>
 80033ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033ee:	e009      	b.n	8003404 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033f0:	f7fd fcf4 	bl	8000ddc <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d902      	bls.n	8003404 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	73fb      	strb	r3, [r7, #15]
        break;
 8003402:	e005      	b.n	8003410 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003404:	4b36      	ldr	r3, [pc, #216]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ef      	bne.n	80033f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d15f      	bne.n	80034d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d110      	bne.n	800343e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800341c:	4b30      	ldr	r3, [pc, #192]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003424:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6892      	ldr	r2, [r2, #8]
 800342c:	0211      	lsls	r1, r2, #8
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68d2      	ldr	r2, [r2, #12]
 8003432:	06d2      	lsls	r2, r2, #27
 8003434:	430a      	orrs	r2, r1
 8003436:	492a      	ldr	r1, [pc, #168]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003438:	4313      	orrs	r3, r2
 800343a:	610b      	str	r3, [r1, #16]
 800343c:	e027      	b.n	800348e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d112      	bne.n	800346a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003444:	4b26      	ldr	r3, [pc, #152]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800344c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6892      	ldr	r2, [r2, #8]
 8003454:	0211      	lsls	r1, r2, #8
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6912      	ldr	r2, [r2, #16]
 800345a:	0852      	lsrs	r2, r2, #1
 800345c:	3a01      	subs	r2, #1
 800345e:	0552      	lsls	r2, r2, #21
 8003460:	430a      	orrs	r2, r1
 8003462:	491f      	ldr	r1, [pc, #124]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	610b      	str	r3, [r1, #16]
 8003468:	e011      	b.n	800348e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800346a:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003472:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6892      	ldr	r2, [r2, #8]
 800347a:	0211      	lsls	r1, r2, #8
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6952      	ldr	r2, [r2, #20]
 8003480:	0852      	lsrs	r2, r2, #1
 8003482:	3a01      	subs	r2, #1
 8003484:	0652      	lsls	r2, r2, #25
 8003486:	430a      	orrs	r2, r1
 8003488:	4915      	ldr	r1, [pc, #84]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800348a:	4313      	orrs	r3, r2
 800348c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800348e:	4b14      	ldr	r3, [pc, #80]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a13      	ldr	r2, [pc, #76]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003494:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003498:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fd fc9f 	bl	8000ddc <HAL_GetTick>
 800349e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034a0:	e009      	b.n	80034b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a2:	f7fd fc9b 	bl	8000ddc <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d902      	bls.n	80034b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	73fb      	strb	r3, [r7, #15]
          break;
 80034b4:	e005      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034b6:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ef      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034c8:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	4903      	ldr	r1, [pc, #12]	@ (80034e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000

080034e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e040      	b.n	8003578 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fd faee 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2224      	movs	r2, #36	@ 0x24
 8003510:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fb38 	bl	8003ba0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f8af 	bl	8003694 <UART_SetConfig>
 8003536:	4603      	mov	r3, r0
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e01b      	b.n	8003578 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800354e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800355e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fbb7 	bl	8003ce4 <UART_CheckIdleState>
 8003576:	4603      	mov	r3, r0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	@ 0x28
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003594:	2b20      	cmp	r3, #32
 8003596:	d177      	bne.n	8003688 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_UART_Transmit+0x24>
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e070      	b.n	800368a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2221      	movs	r2, #33	@ 0x21
 80035b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035b6:	f7fd fc11 	bl	8000ddc <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d4:	d108      	bne.n	80035e8 <HAL_UART_Transmit+0x68>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d104      	bne.n	80035e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e003      	b.n	80035f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035f0:	e02f      	b.n	8003652 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2180      	movs	r1, #128	@ 0x80
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 fc19 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e03b      	b.n	800368a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	881a      	ldrh	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003624:	b292      	uxth	r2, r2
 8003626:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	3302      	adds	r3, #2
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	e007      	b.n	8003640 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3301      	adds	r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1c9      	bne.n	80035f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2200      	movs	r2, #0
 8003666:	2140      	movs	r1, #64	@ 0x40
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fbe3 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e005      	b.n	800368a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003688:	2302      	movs	r3, #2
  }
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003698:	b08a      	sub	sp, #40	@ 0x28
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4ba5      	ldr	r3, [pc, #660]	@ (8003958 <UART_SetConfig+0x2c4>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a9a      	ldr	r2, [pc, #616]	@ (800395c <UART_SetConfig+0x2c8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fc:	4313      	orrs	r3, r2
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003710:	430a      	orrs	r2, r1
 8003712:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a91      	ldr	r2, [pc, #580]	@ (8003960 <UART_SetConfig+0x2cc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d126      	bne.n	800376c <UART_SetConfig+0xd8>
 800371e:	4b91      	ldr	r3, [pc, #580]	@ (8003964 <UART_SetConfig+0x2d0>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b03      	cmp	r3, #3
 800372a:	d81b      	bhi.n	8003764 <UART_SetConfig+0xd0>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <UART_SetConfig+0xa0>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003745 	.word	0x08003745
 8003738:	08003755 	.word	0x08003755
 800373c:	0800374d 	.word	0x0800374d
 8003740:	0800375d 	.word	0x0800375d
 8003744:	2301      	movs	r3, #1
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374a:	e0d6      	b.n	80038fa <UART_SetConfig+0x266>
 800374c:	2302      	movs	r3, #2
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003752:	e0d2      	b.n	80038fa <UART_SetConfig+0x266>
 8003754:	2304      	movs	r3, #4
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375a:	e0ce      	b.n	80038fa <UART_SetConfig+0x266>
 800375c:	2308      	movs	r3, #8
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003762:	e0ca      	b.n	80038fa <UART_SetConfig+0x266>
 8003764:	2310      	movs	r3, #16
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376a:	e0c6      	b.n	80038fa <UART_SetConfig+0x266>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a7d      	ldr	r2, [pc, #500]	@ (8003968 <UART_SetConfig+0x2d4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d138      	bne.n	80037e8 <UART_SetConfig+0x154>
 8003776:	4b7b      	ldr	r3, [pc, #492]	@ (8003964 <UART_SetConfig+0x2d0>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b0c      	cmp	r3, #12
 8003782:	d82d      	bhi.n	80037e0 <UART_SetConfig+0x14c>
 8003784:	a201      	add	r2, pc, #4	@ (adr r2, 800378c <UART_SetConfig+0xf8>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	080037c1 	.word	0x080037c1
 8003790:	080037e1 	.word	0x080037e1
 8003794:	080037e1 	.word	0x080037e1
 8003798:	080037e1 	.word	0x080037e1
 800379c:	080037d1 	.word	0x080037d1
 80037a0:	080037e1 	.word	0x080037e1
 80037a4:	080037e1 	.word	0x080037e1
 80037a8:	080037e1 	.word	0x080037e1
 80037ac:	080037c9 	.word	0x080037c9
 80037b0:	080037e1 	.word	0x080037e1
 80037b4:	080037e1 	.word	0x080037e1
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	080037d9 	.word	0x080037d9
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c6:	e098      	b.n	80038fa <UART_SetConfig+0x266>
 80037c8:	2302      	movs	r3, #2
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ce:	e094      	b.n	80038fa <UART_SetConfig+0x266>
 80037d0:	2304      	movs	r3, #4
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d6:	e090      	b.n	80038fa <UART_SetConfig+0x266>
 80037d8:	2308      	movs	r3, #8
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037de:	e08c      	b.n	80038fa <UART_SetConfig+0x266>
 80037e0:	2310      	movs	r3, #16
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e6:	e088      	b.n	80038fa <UART_SetConfig+0x266>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5f      	ldr	r2, [pc, #380]	@ (800396c <UART_SetConfig+0x2d8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d125      	bne.n	800383e <UART_SetConfig+0x1aa>
 80037f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003964 <UART_SetConfig+0x2d0>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037fc:	2b30      	cmp	r3, #48	@ 0x30
 80037fe:	d016      	beq.n	800382e <UART_SetConfig+0x19a>
 8003800:	2b30      	cmp	r3, #48	@ 0x30
 8003802:	d818      	bhi.n	8003836 <UART_SetConfig+0x1a2>
 8003804:	2b20      	cmp	r3, #32
 8003806:	d00a      	beq.n	800381e <UART_SetConfig+0x18a>
 8003808:	2b20      	cmp	r3, #32
 800380a:	d814      	bhi.n	8003836 <UART_SetConfig+0x1a2>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <UART_SetConfig+0x182>
 8003810:	2b10      	cmp	r3, #16
 8003812:	d008      	beq.n	8003826 <UART_SetConfig+0x192>
 8003814:	e00f      	b.n	8003836 <UART_SetConfig+0x1a2>
 8003816:	2300      	movs	r3, #0
 8003818:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381c:	e06d      	b.n	80038fa <UART_SetConfig+0x266>
 800381e:	2302      	movs	r3, #2
 8003820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003824:	e069      	b.n	80038fa <UART_SetConfig+0x266>
 8003826:	2304      	movs	r3, #4
 8003828:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800382c:	e065      	b.n	80038fa <UART_SetConfig+0x266>
 800382e:	2308      	movs	r3, #8
 8003830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003834:	e061      	b.n	80038fa <UART_SetConfig+0x266>
 8003836:	2310      	movs	r3, #16
 8003838:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800383c:	e05d      	b.n	80038fa <UART_SetConfig+0x266>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a4b      	ldr	r2, [pc, #300]	@ (8003970 <UART_SetConfig+0x2dc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d125      	bne.n	8003894 <UART_SetConfig+0x200>
 8003848:	4b46      	ldr	r3, [pc, #280]	@ (8003964 <UART_SetConfig+0x2d0>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003852:	2bc0      	cmp	r3, #192	@ 0xc0
 8003854:	d016      	beq.n	8003884 <UART_SetConfig+0x1f0>
 8003856:	2bc0      	cmp	r3, #192	@ 0xc0
 8003858:	d818      	bhi.n	800388c <UART_SetConfig+0x1f8>
 800385a:	2b80      	cmp	r3, #128	@ 0x80
 800385c:	d00a      	beq.n	8003874 <UART_SetConfig+0x1e0>
 800385e:	2b80      	cmp	r3, #128	@ 0x80
 8003860:	d814      	bhi.n	800388c <UART_SetConfig+0x1f8>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <UART_SetConfig+0x1d8>
 8003866:	2b40      	cmp	r3, #64	@ 0x40
 8003868:	d008      	beq.n	800387c <UART_SetConfig+0x1e8>
 800386a:	e00f      	b.n	800388c <UART_SetConfig+0x1f8>
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003872:	e042      	b.n	80038fa <UART_SetConfig+0x266>
 8003874:	2302      	movs	r3, #2
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387a:	e03e      	b.n	80038fa <UART_SetConfig+0x266>
 800387c:	2304      	movs	r3, #4
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003882:	e03a      	b.n	80038fa <UART_SetConfig+0x266>
 8003884:	2308      	movs	r3, #8
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800388a:	e036      	b.n	80038fa <UART_SetConfig+0x266>
 800388c:	2310      	movs	r3, #16
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003892:	e032      	b.n	80038fa <UART_SetConfig+0x266>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a30      	ldr	r2, [pc, #192]	@ (800395c <UART_SetConfig+0x2c8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d12a      	bne.n	80038f4 <UART_SetConfig+0x260>
 800389e:	4b31      	ldr	r3, [pc, #196]	@ (8003964 <UART_SetConfig+0x2d0>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038ac:	d01a      	beq.n	80038e4 <UART_SetConfig+0x250>
 80038ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038b2:	d81b      	bhi.n	80038ec <UART_SetConfig+0x258>
 80038b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b8:	d00c      	beq.n	80038d4 <UART_SetConfig+0x240>
 80038ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038be:	d815      	bhi.n	80038ec <UART_SetConfig+0x258>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <UART_SetConfig+0x238>
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c8:	d008      	beq.n	80038dc <UART_SetConfig+0x248>
 80038ca:	e00f      	b.n	80038ec <UART_SetConfig+0x258>
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d2:	e012      	b.n	80038fa <UART_SetConfig+0x266>
 80038d4:	2302      	movs	r3, #2
 80038d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038da:	e00e      	b.n	80038fa <UART_SetConfig+0x266>
 80038dc:	2304      	movs	r3, #4
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e2:	e00a      	b.n	80038fa <UART_SetConfig+0x266>
 80038e4:	2308      	movs	r3, #8
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ea:	e006      	b.n	80038fa <UART_SetConfig+0x266>
 80038ec:	2310      	movs	r3, #16
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f2:	e002      	b.n	80038fa <UART_SetConfig+0x266>
 80038f4:	2310      	movs	r3, #16
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a17      	ldr	r2, [pc, #92]	@ (800395c <UART_SetConfig+0x2c8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	f040 808b 	bne.w	8003a1c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003906:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800390a:	2b08      	cmp	r3, #8
 800390c:	d834      	bhi.n	8003978 <UART_SetConfig+0x2e4>
 800390e:	a201      	add	r2, pc, #4	@ (adr r2, 8003914 <UART_SetConfig+0x280>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003939 	.word	0x08003939
 8003918:	08003979 	.word	0x08003979
 800391c:	08003941 	.word	0x08003941
 8003920:	08003979 	.word	0x08003979
 8003924:	08003947 	.word	0x08003947
 8003928:	08003979 	.word	0x08003979
 800392c:	08003979 	.word	0x08003979
 8003930:	08003979 	.word	0x08003979
 8003934:	0800394f 	.word	0x0800394f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003938:	f7ff f9ea 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 800393c:	61f8      	str	r0, [r7, #28]
        break;
 800393e:	e021      	b.n	8003984 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003940:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <UART_SetConfig+0x2e0>)
 8003942:	61fb      	str	r3, [r7, #28]
        break;
 8003944:	e01e      	b.n	8003984 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003946:	f7ff f94b 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 800394a:	61f8      	str	r0, [r7, #28]
        break;
 800394c:	e01a      	b.n	8003984 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003952:	61fb      	str	r3, [r7, #28]
        break;
 8003954:	e016      	b.n	8003984 <UART_SetConfig+0x2f0>
 8003956:	bf00      	nop
 8003958:	efff69f3 	.word	0xefff69f3
 800395c:	40008000 	.word	0x40008000
 8003960:	40013800 	.word	0x40013800
 8003964:	40021000 	.word	0x40021000
 8003968:	40004400 	.word	0x40004400
 800396c:	40004800 	.word	0x40004800
 8003970:	40004c00 	.word	0x40004c00
 8003974:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003982:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80fa 	beq.w	8003b80 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	429a      	cmp	r2, r3
 800399a:	d305      	bcc.n	80039a8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d903      	bls.n	80039b0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039ae:	e0e7      	b.n	8003b80 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2200      	movs	r2, #0
 80039b4:	461c      	mov	r4, r3
 80039b6:	4615      	mov	r5, r2
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	022b      	lsls	r3, r5, #8
 80039c2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039c6:	0222      	lsls	r2, r4, #8
 80039c8:	68f9      	ldr	r1, [r7, #12]
 80039ca:	6849      	ldr	r1, [r1, #4]
 80039cc:	0849      	lsrs	r1, r1, #1
 80039ce:	2000      	movs	r0, #0
 80039d0:	4688      	mov	r8, r1
 80039d2:	4681      	mov	r9, r0
 80039d4:	eb12 0a08 	adds.w	sl, r2, r8
 80039d8:	eb43 0b09 	adc.w	fp, r3, r9
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ea:	4650      	mov	r0, sl
 80039ec:	4659      	mov	r1, fp
 80039ee:	f7fc fc47 	bl	8000280 <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4613      	mov	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a00:	d308      	bcc.n	8003a14 <UART_SetConfig+0x380>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a08:	d204      	bcs.n	8003a14 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	e0b5      	b.n	8003b80 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a1a:	e0b1      	b.n	8003b80 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a24:	d15d      	bne.n	8003ae2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003a26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d827      	bhi.n	8003a7e <UART_SetConfig+0x3ea>
 8003a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <UART_SetConfig+0x3a0>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a61 	.word	0x08003a61
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003a7f 	.word	0x08003a7f
 8003a44:	08003a6f 	.word	0x08003a6f
 8003a48:	08003a7f 	.word	0x08003a7f
 8003a4c:	08003a7f 	.word	0x08003a7f
 8003a50:	08003a7f 	.word	0x08003a7f
 8003a54:	08003a77 	.word	0x08003a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7ff f95a 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8003a5c:	61f8      	str	r0, [r7, #28]
        break;
 8003a5e:	e014      	b.n	8003a8a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a60:	f7ff f96c 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 8003a64:	61f8      	str	r0, [r7, #28]
        break;
 8003a66:	e010      	b.n	8003a8a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a68:	4b4c      	ldr	r3, [pc, #304]	@ (8003b9c <UART_SetConfig+0x508>)
 8003a6a:	61fb      	str	r3, [r7, #28]
        break;
 8003a6c:	e00d      	b.n	8003a8a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6e:	f7ff f8b7 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003a72:	61f8      	str	r0, [r7, #28]
        break;
 8003a74:	e009      	b.n	8003a8a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a7a:	61fb      	str	r3, [r7, #28]
        break;
 8003a7c:	e005      	b.n	8003a8a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d077      	beq.n	8003b80 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	005a      	lsls	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	441a      	add	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b0f      	cmp	r3, #15
 8003aaa:	d916      	bls.n	8003ada <UART_SetConfig+0x446>
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab2:	d212      	bcs.n	8003ada <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f023 030f 	bic.w	r3, r3, #15
 8003abc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	8afb      	ldrh	r3, [r7, #22]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	8afa      	ldrh	r2, [r7, #22]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	e052      	b.n	8003b80 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ae0:	e04e      	b.n	8003b80 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d827      	bhi.n	8003b3a <UART_SetConfig+0x4a6>
 8003aea:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <UART_SetConfig+0x45c>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b1d 	.word	0x08003b1d
 8003af8:	08003b25 	.word	0x08003b25
 8003afc:	08003b3b 	.word	0x08003b3b
 8003b00:	08003b2b 	.word	0x08003b2b
 8003b04:	08003b3b 	.word	0x08003b3b
 8003b08:	08003b3b 	.word	0x08003b3b
 8003b0c:	08003b3b 	.word	0x08003b3b
 8003b10:	08003b33 	.word	0x08003b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b14:	f7ff f8fc 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8003b18:	61f8      	str	r0, [r7, #28]
        break;
 8003b1a:	e014      	b.n	8003b46 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b1c:	f7ff f90e 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 8003b20:	61f8      	str	r0, [r7, #28]
        break;
 8003b22:	e010      	b.n	8003b46 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b24:	4b1d      	ldr	r3, [pc, #116]	@ (8003b9c <UART_SetConfig+0x508>)
 8003b26:	61fb      	str	r3, [r7, #28]
        break;
 8003b28:	e00d      	b.n	8003b46 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b2a:	f7ff f859 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003b2e:	61f8      	str	r0, [r7, #28]
        break;
 8003b30:	e009      	b.n	8003b46 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b36:	61fb      	str	r3, [r7, #28]
        break;
 8003b38:	e005      	b.n	8003b46 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b44:	bf00      	nop
    }

    if (pclk != 0U)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d019      	beq.n	8003b80 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	085a      	lsrs	r2, r3, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	441a      	add	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b0f      	cmp	r3, #15
 8003b64:	d909      	bls.n	8003b7a <UART_SetConfig+0x4e6>
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6c:	d205      	bcs.n	8003b7a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	e002      	b.n	8003b80 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3728      	adds	r7, #40	@ 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	00f42400 	.word	0x00f42400

08003ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01a      	beq.n	8003cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c9e:	d10a      	bne.n	8003cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
  }
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b098      	sub	sp, #96	@ 0x60
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cf4:	f7fd f872 	bl	8000ddc <HAL_GetTick>
 8003cf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d12e      	bne.n	8003d66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d10:	2200      	movs	r2, #0
 8003d12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f88c 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d021      	beq.n	8003d66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e6      	bne.n	8003d22 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e062      	b.n	8003e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d149      	bne.n	8003e08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f856 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d03c      	beq.n	8003e08 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e6      	bne.n	8003d8e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003de0:	61fa      	str	r2, [r7, #28]
 8003de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	69b9      	ldr	r1, [r7, #24]
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	617b      	str	r3, [r7, #20]
   return(result);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e011      	b.n	8003e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3758      	adds	r7, #88	@ 0x58
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e44:	e04f      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d04b      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7fc ffc5 	bl	8000ddc <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e04e      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d037      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b80      	cmp	r3, #128	@ 0x80
 8003e7a:	d034      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b40      	cmp	r3, #64	@ 0x40
 8003e80:	d031      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d110      	bne.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2208      	movs	r2, #8
 8003e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f838 	bl	8003f0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e029      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec0:	d111      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f81e 	bl	8003f0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e00f      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	bf0c      	ite	eq
 8003ef6:	2301      	moveq	r3, #1
 8003ef8:	2300      	movne	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d0a0      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b095      	sub	sp, #84	@ 0x54
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e6      	bne.n	8003f16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3308      	adds	r3, #8
 8003f66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e5      	bne.n	8003f48 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d118      	bne.n	8003fb6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f023 0310 	bic.w	r3, r3, #16
 8003f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6979      	ldr	r1, [r7, #20]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e6      	bne.n	8003f84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fca:	bf00      	nop
 8003fcc:	3754      	adds	r7, #84	@ 0x54
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003fe4:	6839      	ldr	r1, [r7, #0]
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f001 fcd1 	bl	800598e <VL53L0X_get_offset_calibration_data_micro_meter>
 8003fec:	4603      	mov	r3, r0
 8003fee:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8003ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8003ffc:	b5b0      	push	{r4, r5, r7, lr}
 8003ffe:	b096      	sub	sp, #88	@ 0x58
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004004:	2300      	movs	r3, #0
 8004006:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800400a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800400e:	2b00      	cmp	r3, #0
 8004010:	d107      	bne.n	8004022 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004012:	2200      	movs	r2, #0
 8004014:	2188      	movs	r1, #136	@ 0x88
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f004 fec6 	bl	8008da8 <VL53L0X_WrByte>
 800401c:	4603      	mov	r3, r0
 800401e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004030:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800403a:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a9e      	ldr	r2, [pc, #632]	@ (80042bc <VL53L0X_DataInit+0x2c0>)
 8004042:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a9d      	ldr	r2, [pc, #628]	@ (80042c0 <VL53L0X_DataInit+0x2c4>)
 800404a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004054:	f107 0310 	add.w	r3, r7, #16
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fac0 	bl	80045e0 <VL53L0X_GetDeviceParameters>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004066:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800406a:	2b00      	cmp	r3, #0
 800406c:	d112      	bne.n	8004094 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800406e:	2300      	movs	r3, #0
 8004070:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004072:	2300      	movs	r3, #0
 8004074:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f103 0410 	add.w	r4, r3, #16
 800407c:	f107 0510 	add.w	r5, r7, #16
 8004080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800408a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800408c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2264      	movs	r2, #100	@ 0x64
 8004098:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80040a2:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80040ac:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80040b6:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80040c2:	2201      	movs	r2, #1
 80040c4:	2180      	movs	r1, #128	@ 0x80
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f004 fe6e 	bl	8008da8 <VL53L0X_WrByte>
 80040cc:	4603      	mov	r3, r0
 80040ce:	461a      	mov	r2, r3
 80040d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80040da:	2201      	movs	r2, #1
 80040dc:	21ff      	movs	r1, #255	@ 0xff
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f004 fe62 	bl	8008da8 <VL53L0X_WrByte>
 80040e4:	4603      	mov	r3, r0
 80040e6:	461a      	mov	r2, r3
 80040e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f004 fe56 	bl	8008da8 <VL53L0X_WrByte>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004104:	4313      	orrs	r3, r2
 8004106:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800410a:	f107 030f 	add.w	r3, r7, #15
 800410e:	461a      	mov	r2, r3
 8004110:	2191      	movs	r1, #145	@ 0x91
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f004 feca 	bl	8008eac <VL53L0X_RdByte>
 8004118:	4603      	mov	r3, r0
 800411a:	461a      	mov	r2, r3
 800411c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004120:	4313      	orrs	r3, r2
 8004122:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004126:	7bfa      	ldrb	r2, [r7, #15]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800412e:	2201      	movs	r2, #1
 8004130:	2100      	movs	r1, #0
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f004 fe38 	bl	8008da8 <VL53L0X_WrByte>
 8004138:	4603      	mov	r3, r0
 800413a:	461a      	mov	r2, r3
 800413c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004140:	4313      	orrs	r3, r2
 8004142:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004146:	2200      	movs	r2, #0
 8004148:	21ff      	movs	r1, #255	@ 0xff
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f004 fe2c 	bl	8008da8 <VL53L0X_WrByte>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004158:	4313      	orrs	r3, r2
 800415a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800415e:	2200      	movs	r2, #0
 8004160:	2180      	movs	r1, #128	@ 0x80
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f004 fe20 	bl	8008da8 <VL53L0X_WrByte>
 8004168:	4603      	mov	r3, r0
 800416a:	461a      	mov	r2, r3
 800416c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004170:	4313      	orrs	r3, r2
 8004172:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004176:	2300      	movs	r3, #0
 8004178:	653b      	str	r3, [r7, #80]	@ 0x50
 800417a:	e014      	b.n	80041a6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800417c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004180:	2b00      	cmp	r3, #0
 8004182:	d114      	bne.n	80041ae <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004186:	b29b      	uxth	r3, r3
 8004188:	2201      	movs	r2, #1
 800418a:	4619      	mov	r1, r3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fd31 	bl	8004bf4 <VL53L0X_SetLimitCheckEnable>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800419a:	4313      	orrs	r3, r2
 800419c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80041a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041a2:	3301      	adds	r3, #1
 80041a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80041a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	dde7      	ble.n	800417c <VL53L0X_DataInit+0x180>
 80041ac:	e000      	b.n	80041b0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80041ae:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80041b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80041b8:	2200      	movs	r2, #0
 80041ba:	2102      	movs	r1, #2
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fd19 	bl	8004bf4 <VL53L0X_SetLimitCheckEnable>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80041c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80041d0:	2200      	movs	r2, #0
 80041d2:	2103      	movs	r1, #3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fd0d 	bl	8004bf4 <VL53L0X_SetLimitCheckEnable>
 80041da:	4603      	mov	r3, r0
 80041dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80041e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d107      	bne.n	80041f8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80041e8:	2200      	movs	r2, #0
 80041ea:	2104      	movs	r1, #4
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fd01 	bl	8004bf4 <VL53L0X_SetLimitCheckEnable>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80041f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d107      	bne.n	8004210 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004200:	2200      	movs	r2, #0
 8004202:	2105      	movs	r1, #5
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fcf5 	bl	8004bf4 <VL53L0X_SetLimitCheckEnable>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004210:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004214:	2b00      	cmp	r3, #0
 8004216:	d108      	bne.n	800422a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004218:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 800421c:	2100      	movs	r1, #0
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fd98 	bl	8004d54 <VL53L0X_SetLimitCheckValue>
 8004224:	4603      	mov	r3, r0
 8004226:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800422a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800422e:	2b00      	cmp	r3, #0
 8004230:	d108      	bne.n	8004244 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004232:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004236:	2101      	movs	r1, #1
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fd8b 	bl	8004d54 <VL53L0X_SetLimitCheckValue>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004244:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004248:	2b00      	cmp	r3, #0
 800424a:	d108      	bne.n	800425e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800424c:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8004250:	2102      	movs	r1, #2
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fd7e 	bl	8004d54 <VL53L0X_SetLimitCheckValue>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800425e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004262:	2b00      	cmp	r3, #0
 8004264:	d107      	bne.n	8004276 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004266:	2200      	movs	r2, #0
 8004268:	2103      	movs	r1, #3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fd72 	bl	8004d54 <VL53L0X_SetLimitCheckValue>
 8004270:	4603      	mov	r3, r0
 8004272:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004276:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	22ff      	movs	r2, #255	@ 0xff
 8004282:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004286:	22ff      	movs	r2, #255	@ 0xff
 8004288:	2101      	movs	r1, #1
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f004 fd8c 	bl	8008da8 <VL53L0X_WrByte>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800429e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80042ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3758      	adds	r7, #88	@ 0x58
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ba:	bf00      	nop
 80042bc:	00016b85 	.word	0x00016b85
 80042c0:	000970a4 	.word	0x000970a4

080042c4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80042c4:	b5b0      	push	{r4, r5, r7, lr}
 80042c6:	b09e      	sub	sp, #120	@ 0x78
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80042d2:	f107 031c 	add.w	r3, r7, #28
 80042d6:	2240      	movs	r2, #64	@ 0x40
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f004 ff0c 	bl	80090f8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004300:	2101      	movs	r1, #1
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f002 fa99 	bl	800683a <VL53L0X_get_info_from_device>
 8004308:	4603      	mov	r3, r0
 800430a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8004314:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800431c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004320:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004324:	2b01      	cmp	r3, #1
 8004326:	d80d      	bhi.n	8004344 <VL53L0X_StaticInit+0x80>
 8004328:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800432c:	2b01      	cmp	r3, #1
 800432e:	d102      	bne.n	8004336 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004330:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004332:	2b20      	cmp	r3, #32
 8004334:	d806      	bhi.n	8004344 <VL53L0X_StaticInit+0x80>
 8004336:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10e      	bne.n	800435c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800433e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d90b      	bls.n	800435c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004344:	f107 0218 	add.w	r2, r7, #24
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	4619      	mov	r1, r3
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f001 fd18 	bl	8005d84 <VL53L0X_perform_ref_spad_management>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800435a:	e009      	b.n	8004370 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800435c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004360:	461a      	mov	r2, r3
 8004362:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f001 ff19 	bl	800619c <VL53L0X_set_reference_spads>
 800436a:	4603      	mov	r3, r0
 800436c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004370:	4b93      	ldr	r3, [pc, #588]	@ (80045c0 <VL53L0X_StaticInit+0x2fc>)
 8004372:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004374:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10f      	bne.n	800439c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8004382:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004386:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8004394:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004396:	e001      	b.n	800439c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004398:	4b89      	ldr	r3, [pc, #548]	@ (80045c0 <VL53L0X_StaticInit+0x2fc>)
 800439a:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800439c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80043a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f003 fde8 	bl	8007f7c <VL53L0X_load_tuning_settings>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80043b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80043ba:	2300      	movs	r3, #0
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2304      	movs	r3, #4
 80043c0:	2200      	movs	r2, #0
 80043c2:	2100      	movs	r1, #0
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f001 f8e5 	bl	8005594 <VL53L0X_SetGpioConfig>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80043d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d121      	bne.n	800441c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80043d8:	2201      	movs	r2, #1
 80043da:	21ff      	movs	r1, #255	@ 0xff
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f004 fce3 	bl	8008da8 <VL53L0X_WrByte>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80043e8:	f107 031a 	add.w	r3, r7, #26
 80043ec:	461a      	mov	r2, r3
 80043ee:	2184      	movs	r1, #132	@ 0x84
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f004 fd85 	bl	8008f00 <VL53L0X_RdWord>
 80043f6:	4603      	mov	r3, r0
 80043f8:	461a      	mov	r2, r3
 80043fa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80043fe:	4313      	orrs	r3, r2
 8004400:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004404:	2200      	movs	r2, #0
 8004406:	21ff      	movs	r1, #255	@ 0xff
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f004 fccd 	bl	8008da8 <VL53L0X_WrByte>
 800440e:	4603      	mov	r3, r0
 8004410:	461a      	mov	r2, r3
 8004412:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004416:	4313      	orrs	r3, r2
 8004418:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800441c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004424:	8b7b      	ldrh	r3, [r7, #26]
 8004426:	011a      	lsls	r2, r3, #4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800442e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004432:	2b00      	cmp	r3, #0
 8004434:	d108      	bne.n	8004448 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004436:	f107 031c 	add.w	r3, r7, #28
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8cf 	bl	80045e0 <VL53L0X_GetDeviceParameters>
 8004442:	4603      	mov	r3, r0
 8004444:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004448:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800444c:	2b00      	cmp	r3, #0
 800444e:	d110      	bne.n	8004472 <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004450:	f107 0319 	add.w	r3, r7, #25
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f991 	bl	800477e <VL53L0X_GetFractionEnable>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004462:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800446a:	7e7a      	ldrb	r2, [r7, #25]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004472:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10e      	bne.n	8004498 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f103 0410 	add.w	r4, r3, #16
 8004480:	f107 051c 	add.w	r5, r7, #28
 8004484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800448a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800448c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800448e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004490:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004498:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800449c:	2b00      	cmp	r3, #0
 800449e:	d111      	bne.n	80044c4 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 80044a0:	f107 0319 	add.w	r3, r7, #25
 80044a4:	461a      	mov	r2, r3
 80044a6:	2101      	movs	r1, #1
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f004 fcff 	bl	8008eac <VL53L0X_RdByte>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80044b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d103      	bne.n	80044c4 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80044bc:	7e7a      	ldrb	r2, [r7, #25]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80044c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80044cc:	2200      	movs	r2, #0
 80044ce:	2100      	movs	r1, #0
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f9c9 	bl	8004868 <VL53L0X_SetSequenceStepEnable>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80044dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d107      	bne.n	80044f4 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80044e4:	2200      	movs	r2, #0
 80044e6:	2102      	movs	r1, #2
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f9bd 	bl	8004868 <VL53L0X_SetSequenceStepEnable>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80044f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2203      	movs	r2, #3
 8004500:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004504:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004508:	2b00      	cmp	r3, #0
 800450a:	d109      	bne.n	8004520 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 800450c:	f107 0313 	add.w	r3, r7, #19
 8004510:	461a      	mov	r2, r3
 8004512:	2100      	movs	r1, #0
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f98f 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 800451a:	4603      	mov	r3, r0
 800451c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004520:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004528:	7cfa      	ldrb	r2, [r7, #19]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004530:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004538:	f107 0313 	add.w	r3, r7, #19
 800453c:	461a      	mov	r2, r3
 800453e:	2101      	movs	r1, #1
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f979 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800454c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004554:	7cfa      	ldrb	r2, [r7, #19]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800455c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 8004564:	f107 030c 	add.w	r3, r7, #12
 8004568:	461a      	mov	r2, r3
 800456a:	2103      	movs	r1, #3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f002 fee3 	bl	8007338 <get_sequence_step_timeout>
 8004572:	4603      	mov	r3, r0
 8004574:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004578:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800457c:	2b00      	cmp	r3, #0
 800457e:	d103      	bne.n	8004588 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004588:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	461a      	mov	r2, r3
 8004596:	2104      	movs	r1, #4
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f002 fecd 	bl	8007338 <get_sequence_step_timeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80045a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d103      	bne.n	80045b4 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80045b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3770      	adds	r7, #112	@ 0x70
 80045bc:	46bd      	mov	sp, r7
 80045be:	bdb0      	pop	{r4, r5, r7, pc}
 80045c0:	20000010 	.word	0x20000010

080045c4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80045cc:	239d      	movs	r3, #157	@ 0x9d
 80045ce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80045d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8b0 	bl	8004758 <VL53L0X_GetDeviceMode>
 80045f8:	4603      	mov	r3, r0
 80045fa:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80045fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	3308      	adds	r3, #8
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fa76 	bl	8004afc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004610:	4603      	mov	r3, r0
 8004612:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8004622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d107      	bne.n	800463a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	3310      	adds	r3, #16
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 faac 	bl	8004b8e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004636:	4603      	mov	r3, r0
 8004638:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d107      	bne.n	8004652 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	3314      	adds	r3, #20
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fcc4 	bl	8003fd6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800464e:	4603      	mov	r3, r0
 8004650:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8004652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d134      	bne.n	80046c4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	e02a      	b.n	80046b6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d12a      	bne.n	80046be <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	b299      	uxth	r1, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	3308      	adds	r3, #8
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	4413      	add	r3, r2
 8004676:	3304      	adds	r3, #4
 8004678:	461a      	mov	r2, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fbcc 	bl	8004e18 <VL53L0X_GetLimitCheckValue>
 8004680:	4603      	mov	r3, r0
 8004682:	461a      	mov	r2, r3
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	4313      	orrs	r3, r2
 8004688:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800468a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d117      	bne.n	80046c2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	b299      	uxth	r1, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	3318      	adds	r3, #24
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	4413      	add	r3, r2
 800469e:	461a      	mov	r2, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fb33 	bl	8004d0c <VL53L0X_GetLimitCheckEnable>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	3301      	adds	r3, #1
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	ddd1      	ble.n	8004660 <VL53L0X_GetDeviceParameters+0x80>
 80046bc:	e002      	b.n	80046c4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80046c2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d107      	bne.n	80046dc <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	333c      	adds	r3, #60	@ 0x3c
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fc2e 	bl	8004f34 <VL53L0X_GetWrapAroundCheckEnable>
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80046dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f879 	bl	80047e2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80046f0:	4603      	mov	r3, r0
 80046f2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80046f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	2b15      	cmp	r3, #21
 8004714:	bf8c      	ite	hi
 8004716:	2201      	movhi	r2, #1
 8004718:	2200      	movls	r2, #0
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	2a00      	cmp	r2, #0
 800471e:	d10f      	bne.n	8004740 <VL53L0X_SetDeviceMode+0x40>
 8004720:	4a0c      	ldr	r2, [pc, #48]	@ (8004754 <VL53L0X_SetDeviceMode+0x54>)
 8004722:	fa22 f303 	lsr.w	r3, r2, r3
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	bf14      	ite	ne
 800472e:	2301      	movne	r3, #1
 8004730:	2300      	moveq	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	741a      	strb	r2, [r3, #16]
		break;
 800473e:	e001      	b.n	8004744 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004740:	23f8      	movs	r3, #248	@ 0xf8
 8004742:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	0030000b 	.word	0x0030000b

08004758 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	7c1a      	ldrb	r2, [r3, #16]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800476e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	2109      	movs	r1, #9
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f004 fb8b 	bl	8008eac <VL53L0X_RdByte>
 8004796:	4603      	mov	r3, r0
 8004798:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800479a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80047b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f003 fa43 	bl	8007c58 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80047d2:	4603      	mov	r3, r0
 80047d4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80047d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f003 fb10 	bl	8007e18 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80047f8:	4603      	mov	r3, r0
 80047fa:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80047fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
 8004814:	4613      	mov	r3, r2
 8004816:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800481c:	78ba      	ldrb	r2, [r7, #2]
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f002 ff5a 	bl	80076dc <VL53L0X_set_vcsel_pulse_period>
 8004828:	4603      	mov	r3, r0
 800482a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800482c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	460b      	mov	r3, r1
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800484a:	7afb      	ldrb	r3, [r7, #11]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4619      	mov	r1, r3
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f003 f9ca 	bl	8007bea <VL53L0X_get_vcsel_pulse_period>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800485a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
 8004874:	4613      	mov	r3, r2
 8004876:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004878:	2300      	movs	r3, #0
 800487a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004884:	f107 030f 	add.w	r3, r7, #15
 8004888:	461a      	mov	r2, r3
 800488a:	2101      	movs	r1, #1
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f004 fb0d 	bl	8008eac <VL53L0X_RdByte>
 8004892:	4603      	mov	r3, r0
 8004894:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800489a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d159      	bne.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 80048a2:	78bb      	ldrb	r3, [r7, #2]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d12b      	bne.n	8004900 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d825      	bhi.n	80048fa <VL53L0X_SetSequenceStepEnable+0x92>
 80048ae:	a201      	add	r2, pc, #4	@ (adr r2, 80048b4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048c9 	.word	0x080048c9
 80048b8:	080048d3 	.word	0x080048d3
 80048bc:	080048dd 	.word	0x080048dd
 80048c0:	080048e7 	.word	0x080048e7
 80048c4:	080048f1 	.word	0x080048f1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80048c8:	7dbb      	ldrb	r3, [r7, #22]
 80048ca:	f043 0310 	orr.w	r3, r3, #16
 80048ce:	75bb      	strb	r3, [r7, #22]
				break;
 80048d0:	e041      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80048d2:	7dbb      	ldrb	r3, [r7, #22]
 80048d4:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80048d8:	75bb      	strb	r3, [r7, #22]
				break;
 80048da:	e03c      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80048dc:	7dbb      	ldrb	r3, [r7, #22]
 80048de:	f043 0304 	orr.w	r3, r3, #4
 80048e2:	75bb      	strb	r3, [r7, #22]
				break;
 80048e4:	e037      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80048e6:	7dbb      	ldrb	r3, [r7, #22]
 80048e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ec:	75bb      	strb	r3, [r7, #22]
				break;
 80048ee:	e032      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80048f0:	7dbb      	ldrb	r3, [r7, #22]
 80048f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048f6:	75bb      	strb	r3, [r7, #22]
				break;
 80048f8:	e02d      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80048fa:	23fc      	movs	r3, #252	@ 0xfc
 80048fc:	75fb      	strb	r3, [r7, #23]
 80048fe:	e02a      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	2b04      	cmp	r3, #4
 8004904:	d825      	bhi.n	8004952 <VL53L0X_SetSequenceStepEnable+0xea>
 8004906:	a201      	add	r2, pc, #4	@ (adr r2, 800490c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004921 	.word	0x08004921
 8004910:	0800492b 	.word	0x0800492b
 8004914:	08004935 	.word	0x08004935
 8004918:	0800493f 	.word	0x0800493f
 800491c:	08004949 	.word	0x08004949
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004920:	7dbb      	ldrb	r3, [r7, #22]
 8004922:	f023 0310 	bic.w	r3, r3, #16
 8004926:	75bb      	strb	r3, [r7, #22]
				break;
 8004928:	e015      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800492a:	7dbb      	ldrb	r3, [r7, #22]
 800492c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8004930:	75bb      	strb	r3, [r7, #22]
				break;
 8004932:	e010      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004934:	7dbb      	ldrb	r3, [r7, #22]
 8004936:	f023 0304 	bic.w	r3, r3, #4
 800493a:	75bb      	strb	r3, [r7, #22]
				break;
 800493c:	e00b      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800493e:	7dbb      	ldrb	r3, [r7, #22]
 8004940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004944:	75bb      	strb	r3, [r7, #22]
				break;
 8004946:	e006      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004948:	7dbb      	ldrb	r3, [r7, #22]
 800494a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800494e:	75bb      	strb	r3, [r7, #22]
				break;
 8004950:	e001      	b.n	8004956 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004952:	23fc      	movs	r3, #252	@ 0xfc
 8004954:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	7dba      	ldrb	r2, [r7, #22]
 800495a:	429a      	cmp	r2, r3
 800495c:	d01e      	beq.n	800499c <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800495e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8004966:	7dbb      	ldrb	r3, [r7, #22]
 8004968:	461a      	mov	r2, r3
 800496a:	2101      	movs	r1, #1
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f004 fa1b 	bl	8008da8 <VL53L0X_WrByte>
 8004972:	4603      	mov	r3, r0
 8004974:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004976:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	7dba      	ldrb	r2, [r7, #22]
 8004982:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8004986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004994:	6939      	ldr	r1, [r7, #16]
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff ff10 	bl	80047bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800499c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	72fb      	strb	r3, [r7, #11]
 80049b6:	4613      	mov	r3, r2
 80049b8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80049c4:	7afb      	ldrb	r3, [r7, #11]
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d836      	bhi.n	8004a38 <sequence_step_enabled+0x90>
 80049ca:	a201      	add	r2, pc, #4	@ (adr r2, 80049d0 <sequence_step_enabled+0x28>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049e5 	.word	0x080049e5
 80049d4:	080049f7 	.word	0x080049f7
 80049d8:	08004a09 	.word	0x08004a09
 80049dc:	08004a1b 	.word	0x08004a1b
 80049e0:	08004a2d 	.word	0x08004a2d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80049e4:	7abb      	ldrb	r3, [r7, #10]
 80049e6:	111b      	asrs	r3, r3, #4
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	701a      	strb	r2, [r3, #0]
		break;
 80049f4:	e022      	b.n	8004a3c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80049f6:	7abb      	ldrb	r3, [r7, #10]
 80049f8:	10db      	asrs	r3, r3, #3
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	701a      	strb	r2, [r3, #0]
		break;
 8004a06:	e019      	b.n	8004a3c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004a08:	7abb      	ldrb	r3, [r7, #10]
 8004a0a:	109b      	asrs	r3, r3, #2
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	701a      	strb	r2, [r3, #0]
		break;
 8004a18:	e010      	b.n	8004a3c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004a1a:	7abb      	ldrb	r3, [r7, #10]
 8004a1c:	119b      	asrs	r3, r3, #6
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	701a      	strb	r2, [r3, #0]
		break;
 8004a2a:	e007      	b.n	8004a3c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004a2c:	7abb      	ldrb	r3, [r7, #10]
 8004a2e:	09db      	lsrs	r3, r3, #7
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	701a      	strb	r2, [r3, #0]
		break;
 8004a36:	e001      	b.n	8004a3c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004a38:	23fc      	movs	r3, #252	@ 0xfc
 8004a3a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004a5e:	f107 030e 	add.w	r3, r7, #14
 8004a62:	461a      	mov	r2, r3
 8004a64:	2101      	movs	r1, #1
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f004 fa20 	bl	8008eac <VL53L0X_RdByte>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d107      	bne.n	8004a88 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004a78:	7bba      	ldrb	r2, [r7, #14]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff ff92 	bl	80049a8 <sequence_step_enabled>
 8004a84:	4603      	mov	r3, r0
 8004a86:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d108      	bne.n	8004aa2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004a90:	7bba      	ldrb	r2, [r7, #14]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	3302      	adds	r3, #2
 8004a96:	2101      	movs	r1, #1
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ff85 	bl	80049a8 <sequence_step_enabled>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d108      	bne.n	8004abc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004aaa:	7bba      	ldrb	r2, [r7, #14]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff ff78 	bl	80049a8 <sequence_step_enabled>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d108      	bne.n	8004ad6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004ac4:	7bba      	ldrb	r2, [r7, #14]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	3303      	adds	r3, #3
 8004aca:	2103      	movs	r1, #3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff ff6b 	bl	80049a8 <sequence_step_enabled>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d108      	bne.n	8004af0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004ade:	7bba      	ldrb	r2, [r7, #14]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	2104      	movs	r1, #4
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ff5e 	bl	80049a8 <sequence_step_enabled>
 8004aec:	4603      	mov	r3, r0
 8004aee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004b0a:	f107 030c 	add.w	r3, r7, #12
 8004b0e:	461a      	mov	r2, r3
 8004b10:	21f8      	movs	r1, #248	@ 0xf8
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f004 f9f4 	bl	8008f00 <VL53L0X_RdWord>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d108      	bne.n	8004b36 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004b24:	f107 0308 	add.w	r3, r7, #8
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2104      	movs	r1, #4
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f004 fa1d 	bl	8008f6c <VL53L0X_RdDWord>
 8004b32:	4603      	mov	r3, r0
 8004b34:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10c      	bne.n	8004b58 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8004b3e:	89bb      	ldrh	r3, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	89ba      	ldrh	r2, [r7, #12]
 8004b48:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	7f1b      	ldrb	r3, [r3, #28]
 8004b76:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	7bba      	ldrb	r2, [r7, #14]
 8004b7c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004b9c:	f107 030e 	add.w	r3, r7, #14
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2120      	movs	r1, #32
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f004 f9ab 	bl	8008f00 <VL53L0X_RdWord>
 8004baa:	4603      	mov	r3, r0
 8004bac:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d118      	bne.n	8004be8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004bb6:	89fb      	ldrh	r3, [r7, #14]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	771a      	strb	r2, [r3, #28]
 8004bce:	e00b      	b.n	8004be8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004bd0:	89fb      	ldrh	r3, [r7, #14]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	807b      	strh	r3, [r7, #2]
 8004c00:	4613      	mov	r3, r2
 8004c02:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004c14:	887b      	ldrh	r3, [r7, #2]
 8004c16:	2b05      	cmp	r3, #5
 8004c18:	d902      	bls.n	8004c20 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c1a:	23fc      	movs	r3, #252	@ 0xfc
 8004c1c:	75fb      	strb	r3, [r7, #23]
 8004c1e:	e05b      	b.n	8004cd8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004c20:	787b      	ldrb	r3, [r7, #1]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	73bb      	strb	r3, [r7, #14]
 8004c32:	e00a      	b.n	8004c4a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004c34:	887b      	ldrh	r3, [r7, #2]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8004c4a:	887b      	ldrh	r3, [r7, #2]
 8004c4c:	2b05      	cmp	r3, #5
 8004c4e:	d841      	bhi.n	8004cd4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8004c50:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <VL53L0X_SetLimitCheckEnable+0x64>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c71 	.word	0x08004c71
 8004c5c:	08004c7b 	.word	0x08004c7b
 8004c60:	08004c91 	.word	0x08004c91
 8004c64:	08004c9b 	.word	0x08004c9b
 8004c68:	08004ca5 	.word	0x08004ca5
 8004c6c:	08004cbd 	.word	0x08004cbd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	7bfa      	ldrb	r2, [r7, #15]
 8004c74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004c78:	e02e      	b.n	8004cd8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	2144      	movs	r1, #68	@ 0x44
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f004 f8b3 	bl	8008df0 <VL53L0X_WrWord>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	75fb      	strb	r3, [r7, #23]

			break;
 8004c8e:	e023      	b.n	8004cd8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	7bfa      	ldrb	r2, [r7, #15]
 8004c94:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004c98:	e01e      	b.n	8004cd8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	7bfa      	ldrb	r2, [r7, #15]
 8004c9e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004ca2:	e019      	b.n	8004cd8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004ca4:	7bbb      	ldrb	r3, [r7, #14]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004caa:	7b7b      	ldrb	r3, [r7, #13]
 8004cac:	22fe      	movs	r2, #254	@ 0xfe
 8004cae:	2160      	movs	r1, #96	@ 0x60
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f004 f8c7 	bl	8008e44 <VL53L0X_UpdateByte>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004cba:	e00d      	b.n	8004cd8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004cbc:	7bbb      	ldrb	r3, [r7, #14]
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004cc2:	7b7b      	ldrb	r3, [r7, #13]
 8004cc4:	22ef      	movs	r2, #239	@ 0xef
 8004cc6:	2160      	movs	r1, #96	@ 0x60
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f004 f8bb 	bl	8008e44 <VL53L0X_UpdateByte>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004cd2:	e001      	b.n	8004cd8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004cd4:	23fc      	movs	r3, #252	@ 0xfc
 8004cd6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10f      	bne.n	8004d00 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004ce0:	787b      	ldrb	r3, [r7, #1]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	4413      	add	r3, r2
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004cf2:	e005      	b.n	8004d00 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	460b      	mov	r3, r1
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004d1e:	897b      	ldrh	r3, [r7, #10]
 8004d20:	2b05      	cmp	r3, #5
 8004d22:	d905      	bls.n	8004d30 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d24:	23fc      	movs	r3, #252	@ 0xfc
 8004d26:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e008      	b.n	8004d42 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004d30:	897b      	ldrh	r3, [r7, #10]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4413      	add	r3, r2
 8004d36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d3a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7dba      	ldrb	r2, [r7, #22]
 8004d40:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8004d66:	897b      	ldrh	r3, [r7, #10]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d70:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8004d72:	7dbb      	ldrb	r3, [r7, #22]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d107      	bne.n	8004d88 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004d78:	897b      	ldrh	r3, [r7, #10]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	e040      	b.n	8004e0a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004d88:	897b      	ldrh	r3, [r7, #10]
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d830      	bhi.n	8004df0 <VL53L0X_SetLimitCheckValue+0x9c>
 8004d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d94 <VL53L0X_SetLimitCheckValue+0x40>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004dad 	.word	0x08004dad
 8004d98:	08004db5 	.word	0x08004db5
 8004d9c:	08004dcb 	.word	0x08004dcb
 8004da0:	08004dd3 	.word	0x08004dd3
 8004da4:	08004ddb 	.word	0x08004ddb
 8004da8:	08004ddb 	.word	0x08004ddb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004db2:	e01f      	b.n	8004df4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2144      	movs	r1, #68	@ 0x44
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f004 f816 	bl	8008df0 <VL53L0X_WrWord>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004dc8:	e014      	b.n	8004df4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004dd0:	e010      	b.n	8004df4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004dd8:	e00c      	b.n	8004df4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	2164      	movs	r1, #100	@ 0x64
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f004 f803 	bl	8008df0 <VL53L0X_WrWord>
 8004dea:	4603      	mov	r3, r0
 8004dec:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004dee:	e001      	b.n	8004df4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004df0:	23fc      	movs	r3, #252	@ 0xfc
 8004df2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004dfc:	897b      	ldrh	r3, [r7, #10]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	330c      	adds	r3, #12
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop

08004e18 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	460b      	mov	r3, r1
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004e2e:	897b      	ldrh	r3, [r7, #10]
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d847      	bhi.n	8004ec4 <VL53L0X_GetLimitCheckValue+0xac>
 8004e34:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <VL53L0X_GetLimitCheckValue+0x24>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e55 	.word	0x08004e55
 8004e40:	08004e61 	.word	0x08004e61
 8004e44:	08004e87 	.word	0x08004e87
 8004e48:	08004e93 	.word	0x08004e93
 8004e4c:	08004e9f 	.word	0x08004e9f
 8004e50:	08004e9f 	.word	0x08004e9f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	77bb      	strb	r3, [r7, #30]
		break;
 8004e5e:	e033      	b.n	8004ec8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004e60:	f107 0316 	add.w	r3, r7, #22
 8004e64:	461a      	mov	r2, r3
 8004e66:	2144      	movs	r1, #68	@ 0x44
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f004 f849 	bl	8008f00 <VL53L0X_RdWord>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004e72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d102      	bne.n	8004e80 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004e7a:	8afb      	ldrh	r3, [r7, #22]
 8004e7c:	025b      	lsls	r3, r3, #9
 8004e7e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8004e80:	2301      	movs	r3, #1
 8004e82:	77bb      	strb	r3, [r7, #30]
		break;
 8004e84:	e020      	b.n	8004ec8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	77bb      	strb	r3, [r7, #30]
		break;
 8004e90:	e01a      	b.n	8004ec8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	77bb      	strb	r3, [r7, #30]
		break;
 8004e9c:	e014      	b.n	8004ec8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004e9e:	f107 0316 	add.w	r3, r7, #22
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2164      	movs	r1, #100	@ 0x64
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f004 f82a 	bl	8008f00 <VL53L0X_RdWord>
 8004eac:	4603      	mov	r3, r0
 8004eae:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004eb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004eb8:	8afb      	ldrh	r3, [r7, #22]
 8004eba:	025b      	lsls	r3, r3, #9
 8004ebc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	77bb      	strb	r3, [r7, #30]
		break;
 8004ec2:	e001      	b.n	8004ec8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004ec4:	23fc      	movs	r3, #252	@ 0xfc
 8004ec6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ec8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d12a      	bne.n	8004f26 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004ed0:	7fbb      	ldrb	r3, [r7, #30]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d124      	bne.n	8004f20 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d110      	bne.n	8004efe <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004edc:	897b      	ldrh	r3, [r7, #10]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004ef0:	897b      	ldrh	r3, [r7, #10]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004efc:	e013      	b.n	8004f26 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004f04:	897b      	ldrh	r3, [r7, #10]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004f12:	897b      	ldrh	r3, [r7, #10]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004f1e:	e002      	b.n	8004f26 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f26:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop

08004f34 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8004f42:	f107 030e 	add.w	r3, r7, #14
 8004f46:	461a      	mov	r2, r3
 8004f48:	2101      	movs	r1, #1
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f003 ffae 	bl	8008eac <VL53L0X_RdByte>
 8004f50:	4603      	mov	r3, r0
 8004f52:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8004f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10e      	bne.n	8004f7a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8004f5c:	7bba      	ldrb	r2, [r7, #14]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 8004f64:	7bbb      	ldrb	r3, [r7, #14]
 8004f66:	b25b      	sxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	da03      	bge.n	8004f74 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e002      	b.n	8004f7a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004fa4:	f107 030e 	add.w	r3, r7, #14
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff fbd4 	bl	8004758 <VL53L0X_GetDeviceMode>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f898 	bl	80050f8 <VL53L0X_StartMeasurement>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f001 fb63 	bl	80066a0 <VL53L0X_measurement_poll_for_completion>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004fe6:	7bbb      	ldrb	r3, [r7, #14]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d103      	bne.n	8004ff4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2203      	movs	r2, #3
 8004ff0:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800500c:	2300      	movs	r3, #0
 800500e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005010:	2301      	movs	r3, #1
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f001 fb05 	bl	8006626 <VL53L0X_perform_ref_calibration>
 800501c:	4603      	mov	r3, r0
 800501e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005038:	2300      	movs	r3, #0
 800503a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8005042:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005044:	7dbb      	ldrb	r3, [r7, #22]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d005      	beq.n	8005056 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800504a:	7dbb      	ldrb	r3, [r7, #22]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d002      	beq.n	8005056 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005050:	7dbb      	ldrb	r3, [r7, #22]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d147      	bne.n	80050e6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005056:	f107 030c 	add.w	r3, r7, #12
 800505a:	f107 0210 	add.w	r2, r7, #16
 800505e:	2101      	movs	r1, #1
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fbe9 	bl	8005838 <VL53L0X_GetInterruptThresholds>
 8005066:	4603      	mov	r3, r0
 8005068:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8005070:	d803      	bhi.n	800507a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005072:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005074:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8005078:	d935      	bls.n	80050e6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800507a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d131      	bne.n	80050e6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d006      	beq.n	8005096 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005088:	491a      	ldr	r1, [pc, #104]	@ (80050f4 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f002 ff76 	bl	8007f7c <VL53L0X_load_tuning_settings>
 8005090:	4603      	mov	r3, r0
 8005092:	75fb      	strb	r3, [r7, #23]
 8005094:	e027      	b.n	80050e6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005096:	2204      	movs	r2, #4
 8005098:	21ff      	movs	r1, #255	@ 0xff
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f003 fe84 	bl	8008da8 <VL53L0X_WrByte>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80050aa:	2200      	movs	r2, #0
 80050ac:	2170      	movs	r1, #112	@ 0x70
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f003 fe7a 	bl	8008da8 <VL53L0X_WrByte>
 80050b4:	4603      	mov	r3, r0
 80050b6:	461a      	mov	r2, r3
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80050be:	2200      	movs	r2, #0
 80050c0:	21ff      	movs	r1, #255	@ 0xff
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f003 fe70 	bl	8008da8 <VL53L0X_WrByte>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80050d2:	2200      	movs	r2, #0
 80050d4:	2180      	movs	r1, #128	@ 0x80
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f003 fe66 	bl	8008da8 <VL53L0X_WrByte>
 80050dc:	4603      	mov	r3, r0
 80050de:	461a      	mov	r2, r3
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80050e6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000104 	.word	0x20000104

080050f8 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005100:	2300      	movs	r3, #0
 8005102:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005108:	f107 030e 	add.w	r3, r7, #14
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fb22 	bl	8004758 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005114:	2201      	movs	r2, #1
 8005116:	2180      	movs	r1, #128	@ 0x80
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f003 fe45 	bl	8008da8 <VL53L0X_WrByte>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005122:	2201      	movs	r2, #1
 8005124:	21ff      	movs	r1, #255	@ 0xff
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f003 fe3e 	bl	8008da8 <VL53L0X_WrByte>
 800512c:	4603      	mov	r3, r0
 800512e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005130:	2200      	movs	r2, #0
 8005132:	2100      	movs	r1, #0
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f003 fe37 	bl	8008da8 <VL53L0X_WrByte>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 8005144:	461a      	mov	r2, r3
 8005146:	2191      	movs	r1, #145	@ 0x91
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f003 fe2d 	bl	8008da8 <VL53L0X_WrByte>
 800514e:	4603      	mov	r3, r0
 8005150:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005152:	2201      	movs	r2, #1
 8005154:	2100      	movs	r1, #0
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f003 fe26 	bl	8008da8 <VL53L0X_WrByte>
 800515c:	4603      	mov	r3, r0
 800515e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005160:	2200      	movs	r2, #0
 8005162:	21ff      	movs	r1, #255	@ 0xff
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f003 fe1f 	bl	8008da8 <VL53L0X_WrByte>
 800516a:	4603      	mov	r3, r0
 800516c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800516e:	2200      	movs	r2, #0
 8005170:	2180      	movs	r1, #128	@ 0x80
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f003 fe18 	bl	8008da8 <VL53L0X_WrByte>
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800517c:	7bbb      	ldrb	r3, [r7, #14]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d054      	beq.n	800522c <VL53L0X_StartMeasurement+0x134>
 8005182:	2b03      	cmp	r3, #3
 8005184:	dc6c      	bgt.n	8005260 <VL53L0X_StartMeasurement+0x168>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <VL53L0X_StartMeasurement+0x98>
 800518a:	2b01      	cmp	r3, #1
 800518c:	d034      	beq.n	80051f8 <VL53L0X_StartMeasurement+0x100>
 800518e:	e067      	b.n	8005260 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005190:	2201      	movs	r2, #1
 8005192:	2100      	movs	r1, #0
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f003 fe07 	bl	8008da8 <VL53L0X_WrByte>
 800519a:	4603      	mov	r3, r0
 800519c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80051a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d15d      	bne.n	8005266 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80051b4:	f107 030d 	add.w	r3, r7, #13
 80051b8:	461a      	mov	r2, r3
 80051ba:	2100      	movs	r1, #0
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f003 fe75 	bl	8008eac <VL53L0X_RdByte>
 80051c2:	4603      	mov	r3, r0
 80051c4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	3301      	adds	r3, #1
 80051ca:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80051cc:	7b7a      	ldrb	r2, [r7, #13]
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	4013      	ands	r3, r2
 80051d2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80051d4:	7bfa      	ldrb	r2, [r7, #15]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d107      	bne.n	80051ea <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80051da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d103      	bne.n	80051ea <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80051e8:	d3e1      	bcc.n	80051ae <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80051f0:	d339      	bcc.n	8005266 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80051f2:	23f9      	movs	r3, #249	@ 0xf9
 80051f4:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80051f6:	e036      	b.n	8005266 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80051f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d105      	bne.n	800520c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005200:	2101      	movs	r1, #1
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff ff12 	bl	800502c <VL53L0X_CheckAndLoadInterruptSettings>
 8005208:	4603      	mov	r3, r0
 800520a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800520c:	2202      	movs	r2, #2
 800520e:	2100      	movs	r1, #0
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f003 fdc9 	bl	8008da8 <VL53L0X_WrByte>
 8005216:	4603      	mov	r3, r0
 8005218:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800521a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d123      	bne.n	800526a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2204      	movs	r2, #4
 8005226:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800522a:	e01e      	b.n	800526a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800522c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d105      	bne.n	8005240 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005234:	2101      	movs	r1, #1
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff fef8 	bl	800502c <VL53L0X_CheckAndLoadInterruptSettings>
 800523c:	4603      	mov	r3, r0
 800523e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005240:	2204      	movs	r2, #4
 8005242:	2100      	movs	r1, #0
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f003 fdaf 	bl	8008da8 <VL53L0X_WrByte>
 800524a:	4603      	mov	r3, r0
 800524c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800524e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2204      	movs	r2, #4
 800525a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800525e:	e006      	b.n	800526e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005260:	23f8      	movs	r3, #248	@ 0xf8
 8005262:	75fb      	strb	r3, [r7, #23]
 8005264:	e004      	b.n	8005270 <VL53L0X_StartMeasurement+0x178>
		break;
 8005266:	bf00      	nop
 8005268:	e002      	b.n	8005270 <VL53L0X_StartMeasurement+0x178>
		break;
 800526a:	bf00      	nop
 800526c:	e000      	b.n	8005270 <VL53L0X_StartMeasurement+0x178>
		break;
 800526e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005270:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8005290:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	2b04      	cmp	r3, #4
 8005296:	d112      	bne.n	80052be <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fb3e 	bl	8005920 <VL53L0X_GetInterruptMaskStatus>
 80052a4:	4603      	mov	r3, r0
 80052a6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d103      	bne.n	80052b6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	e01c      	b.n	80052f0 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e018      	b.n	80052f0 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80052be:	f107 030d 	add.w	r3, r7, #13
 80052c2:	461a      	mov	r2, r3
 80052c4:	2114      	movs	r1, #20
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f003 fdf0 	bl	8008eac <VL53L0X_RdByte>
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80052d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80052d8:	7b7b      	ldrb	r3, [r7, #13]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e002      	b.n	80052f0 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80052f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80052fc:	b5b0      	push	{r4, r5, r7, lr}
 80052fe:	b096      	sub	sp, #88	@ 0x58
 8005300:	af02      	add	r7, sp, #8
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005306:	2300      	movs	r3, #0
 8005308:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800530c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005310:	230c      	movs	r3, #12
 8005312:	2114      	movs	r1, #20
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f003 fd1b 	bl	8008d50 <VL53L0X_ReadMulti>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005320:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8005324:	2b00      	cmp	r3, #0
 8005326:	f040 80c8 	bne.w	80054ba <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2200      	movs	r2, #0
 800532e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005336:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	b29b      	uxth	r3, r3
 800533e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005342:	4413      	add	r3, r2
 8005344:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2200      	movs	r2, #0
 800534c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800534e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	b29b      	uxth	r3, r3
 8005356:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800535a:	4413      	add	r3, r2
 800535c:	b29b      	uxth	r3, r3
 800535e:	025b      	lsls	r3, r3, #9
 8005360:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005366:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005368:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	b29b      	uxth	r3, r3
 8005370:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8005374:	4413      	add	r3, r2
 8005376:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800537a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800537e:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005384:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	b29b      	uxth	r3, r3
 800538c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005390:	4413      	add	r3, r2
 8005392:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800539c:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800539e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 80053ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80053b4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80053b8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80053ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053be:	d046      	beq.n	800544e <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80053c0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80053c2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80053c6:	fb02 f303 	mul.w	r3, r2, r3
 80053ca:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80053ce:	4a58      	ldr	r2, [pc, #352]	@ (8005530 <VL53L0X_GetRangingMeasurementData+0x234>)
 80053d0:	fb82 1203 	smull	r1, r2, r2, r3
 80053d4:	1192      	asrs	r2, r2, #6
 80053d6:	17db      	asrs	r3, r3, #31
 80053d8:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80053da:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	7f1b      	ldrb	r3, [r3, #28]
 80053e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80053ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d02c      	beq.n	800544e <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80053f4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80053f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
 80053fe:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 8005402:	429a      	cmp	r2, r3
 8005404:	d10d      	bne.n	8005422 <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 8005406:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 800540e:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8005412:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005416:	e016      	b.n	8005446 <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 8005418:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 800541c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005420:	e011      	b.n	8005446 <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005422:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005428:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800542c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800542e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8005432:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005436:	121b      	asrs	r3, r3, #8
 8005438:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800543a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543c:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800543e:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005442:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005446:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800544a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800544e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00d      	beq.n	8005472 <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005456:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005462:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005466:	b2db      	uxtb	r3, r3
 8005468:	019b      	lsls	r3, r3, #6
 800546a:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	75da      	strb	r2, [r3, #23]
 8005470:	e006      	b.n	8005480 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8005478:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2200      	movs	r2, #0
 800547e:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005480:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8005484:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8005488:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f003 fa0e 	bl	80088b8 <VL53L0X_get_pal_range_status>
 800549c:	4603      	mov	r3, r0
 800549e:	461a      	mov	r2, r3
 80054a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80054aa:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80054b2:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80054ba:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d12f      	bne.n	8005522 <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f107 040c 	add.w	r4, r7, #12
 80054c8:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 80054cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80054dc:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80054e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80054ea:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80054f0:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80054f6:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80054fc:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005502:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005508:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 8005512:	f107 050c 	add.w	r5, r7, #12
 8005516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800551a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800551e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005522:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 8005526:	4618      	mov	r0, r3
 8005528:	3750      	adds	r7, #80	@ 0x50
 800552a:	46bd      	mov	sp, r7
 800552c:	bdb0      	pop	{r4, r5, r7, pc}
 800552e:	bf00      	nop
 8005530:	10624dd3 	.word	0x10624dd3

08005534 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005542:	2100      	movs	r1, #0
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff f8db 	bl	8004700 <VL53L0X_SetDeviceMode>
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800554e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d104      	bne.n	8005560 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fd1e 	bl	8004f98 <VL53L0X_PerformSingleMeasurement>
 800555c:	4603      	mov	r3, r0
 800555e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff fec6 	bl	80052fc <VL53L0X_GetRangingMeasurementData>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d105      	bne.n	8005588 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800557c:	2100      	movs	r1, #0
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f98e 	bl	80058a0 <VL53L0X_ClearInterruptMask>
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005588:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	4608      	mov	r0, r1
 800559e:	4611      	mov	r1, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	70fb      	strb	r3, [r7, #3]
 80055a6:	460b      	mov	r3, r1
 80055a8:	70bb      	strb	r3, [r7, #2]
 80055aa:	4613      	mov	r3, r2
 80055ac:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80055b8:	23f6      	movs	r3, #246	@ 0xf6
 80055ba:	73fb      	strb	r3, [r7, #15]
 80055bc:	e105      	b.n	80057ca <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80055be:	78bb      	ldrb	r3, [r7, #2]
 80055c0:	2b14      	cmp	r3, #20
 80055c2:	d110      	bne.n	80055e6 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80055c4:	7e3b      	ldrb	r3, [r7, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80055ca:	2310      	movs	r3, #16
 80055cc:	73bb      	strb	r3, [r7, #14]
 80055ce:	e001      	b.n	80055d4 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80055d0:	2301      	movs	r3, #1
 80055d2:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80055d4:	7bbb      	ldrb	r3, [r7, #14]
 80055d6:	461a      	mov	r2, r3
 80055d8:	2184      	movs	r1, #132	@ 0x84
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f003 fbe4 	bl	8008da8 <VL53L0X_WrByte>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73fb      	strb	r3, [r7, #15]
 80055e4:	e0f1      	b.n	80057ca <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80055e6:	78bb      	ldrb	r3, [r7, #2]
 80055e8:	2b15      	cmp	r3, #21
 80055ea:	f040 8097 	bne.w	800571c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80055ee:	2201      	movs	r2, #1
 80055f0:	21ff      	movs	r1, #255	@ 0xff
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f003 fbd8 	bl	8008da8 <VL53L0X_WrByte>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461a      	mov	r2, r3
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	4313      	orrs	r3, r2
 8005600:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005602:	2200      	movs	r2, #0
 8005604:	2100      	movs	r1, #0
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f003 fbce 	bl	8008da8 <VL53L0X_WrByte>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	4313      	orrs	r3, r2
 8005614:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005616:	2200      	movs	r2, #0
 8005618:	21ff      	movs	r1, #255	@ 0xff
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f003 fbc4 	bl	8008da8 <VL53L0X_WrByte>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	4313      	orrs	r3, r2
 8005628:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800562a:	2201      	movs	r2, #1
 800562c:	2180      	movs	r1, #128	@ 0x80
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f003 fbba 	bl	8008da8 <VL53L0X_WrByte>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	4313      	orrs	r3, r2
 800563c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800563e:	2202      	movs	r2, #2
 8005640:	2185      	movs	r1, #133	@ 0x85
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f003 fbb0 	bl	8008da8 <VL53L0X_WrByte>
 8005648:	4603      	mov	r3, r0
 800564a:	461a      	mov	r2, r3
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	4313      	orrs	r3, r2
 8005650:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005652:	2204      	movs	r2, #4
 8005654:	21ff      	movs	r1, #255	@ 0xff
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f003 fba6 	bl	8008da8 <VL53L0X_WrByte>
 800565c:	4603      	mov	r3, r0
 800565e:	461a      	mov	r2, r3
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	4313      	orrs	r3, r2
 8005664:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005666:	2200      	movs	r2, #0
 8005668:	21cd      	movs	r1, #205	@ 0xcd
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f003 fb9c 	bl	8008da8 <VL53L0X_WrByte>
 8005670:	4603      	mov	r3, r0
 8005672:	461a      	mov	r2, r3
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	4313      	orrs	r3, r2
 8005678:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800567a:	2211      	movs	r2, #17
 800567c:	21cc      	movs	r1, #204	@ 0xcc
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f003 fb92 	bl	8008da8 <VL53L0X_WrByte>
 8005684:	4603      	mov	r3, r0
 8005686:	461a      	mov	r2, r3
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	4313      	orrs	r3, r2
 800568c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800568e:	2207      	movs	r2, #7
 8005690:	21ff      	movs	r1, #255	@ 0xff
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f003 fb88 	bl	8008da8 <VL53L0X_WrByte>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	4313      	orrs	r3, r2
 80056a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80056a2:	2200      	movs	r2, #0
 80056a4:	21be      	movs	r1, #190	@ 0xbe
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f003 fb7e 	bl	8008da8 <VL53L0X_WrByte>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461a      	mov	r2, r3
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80056b6:	2206      	movs	r2, #6
 80056b8:	21ff      	movs	r1, #255	@ 0xff
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f003 fb74 	bl	8008da8 <VL53L0X_WrByte>
 80056c0:	4603      	mov	r3, r0
 80056c2:	461a      	mov	r2, r3
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80056ca:	2209      	movs	r2, #9
 80056cc:	21cc      	movs	r1, #204	@ 0xcc
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f003 fb6a 	bl	8008da8 <VL53L0X_WrByte>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	4313      	orrs	r3, r2
 80056dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80056de:	2200      	movs	r2, #0
 80056e0:	21ff      	movs	r1, #255	@ 0xff
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f003 fb60 	bl	8008da8 <VL53L0X_WrByte>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80056f2:	2201      	movs	r2, #1
 80056f4:	21ff      	movs	r1, #255	@ 0xff
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f003 fb56 	bl	8008da8 <VL53L0X_WrByte>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	4313      	orrs	r3, r2
 8005704:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005706:	2200      	movs	r2, #0
 8005708:	2100      	movs	r1, #0
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f003 fb4c 	bl	8008da8 <VL53L0X_WrByte>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	4313      	orrs	r3, r2
 8005718:	73fb      	strb	r3, [r7, #15]
 800571a:	e056      	b.n	80057ca <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800571c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d120      	bne.n	8005766 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8005724:	787b      	ldrb	r3, [r7, #1]
 8005726:	2b04      	cmp	r3, #4
 8005728:	d81b      	bhi.n	8005762 <VL53L0X_SetGpioConfig+0x1ce>
 800572a:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <VL53L0X_SetGpioConfig+0x19c>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005745 	.word	0x08005745
 8005734:	0800574b 	.word	0x0800574b
 8005738:	08005751 	.word	0x08005751
 800573c:	08005757 	.word	0x08005757
 8005740:	0800575d 	.word	0x0800575d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005744:	2300      	movs	r3, #0
 8005746:	73bb      	strb	r3, [r7, #14]
				break;
 8005748:	e00d      	b.n	8005766 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800574a:	2301      	movs	r3, #1
 800574c:	73bb      	strb	r3, [r7, #14]
				break;
 800574e:	e00a      	b.n	8005766 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8005750:	2302      	movs	r3, #2
 8005752:	73bb      	strb	r3, [r7, #14]
				break;
 8005754:	e007      	b.n	8005766 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8005756:	2303      	movs	r3, #3
 8005758:	73bb      	strb	r3, [r7, #14]
				break;
 800575a:	e004      	b.n	8005766 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800575c:	2304      	movs	r3, #4
 800575e:	73bb      	strb	r3, [r7, #14]
				break;
 8005760:	e001      	b.n	8005766 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8005762:	23f5      	movs	r3, #245	@ 0xf5
 8005764:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d107      	bne.n	800577e <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 800576e:	7bbb      	ldrb	r3, [r7, #14]
 8005770:	461a      	mov	r2, r3
 8005772:	210a      	movs	r1, #10
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f003 fb17 	bl	8008da8 <VL53L0X_WrByte>
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800577e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10f      	bne.n	80057a6 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005786:	7e3b      	ldrb	r3, [r7, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	73bb      	strb	r3, [r7, #14]
 8005790:	e001      	b.n	8005796 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8005792:	2310      	movs	r3, #16
 8005794:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8005796:	7bbb      	ldrb	r3, [r7, #14]
 8005798:	22ef      	movs	r2, #239	@ 0xef
 800579a:	2184      	movs	r1, #132	@ 0x84
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f003 fb51 	bl	8008e44 <VL53L0X_UpdateByte>
 80057a2:	4603      	mov	r3, r0
 80057a4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80057a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d103      	bne.n	80057b6 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	787a      	ldrb	r2, [r7, #1]
 80057b2:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80057b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d105      	bne.n	80057ca <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80057be:	2100      	movs	r1, #0
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f86d 	bl	80058a0 <VL53L0X_ClearInterruptMask>
 80057c6:	4603      	mov	r3, r0
 80057c8:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop

080057d8 <VL53L0X_SetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_SetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t ThresholdLow,
	FixPoint1616_t ThresholdHigh)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	460b      	mov	r3, r1
 80057e6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */
	/* Need to divide by 2 because the FW will apply a x2 */
	Threshold16 = (uint16_t)((ThresholdLow >> 17) & 0x00fff);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	0c5b      	lsrs	r3, r3, #17
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f6:	82bb      	strh	r3, [r7, #20]
	Status = VL53L0X_WrWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, Threshold16);
 80057f8:	8abb      	ldrh	r3, [r7, #20]
 80057fa:	461a      	mov	r2, r3
 80057fc:	210e      	movs	r1, #14
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f003 faf6 	bl	8008df0 <VL53L0X_WrWord>
 8005804:	4603      	mov	r3, r0
 8005806:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 8005808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10d      	bne.n	800582c <VL53L0X_SetInterruptThresholds+0x54>
		/* Need to divide by 2 because the FW will apply a x2 */
		Threshold16 = (uint16_t)((ThresholdHigh >> 17) & 0x00fff);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	0c5b      	lsrs	r3, r3, #17
 8005814:	b29b      	uxth	r3, r3
 8005816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800581a:	82bb      	strh	r3, [r7, #20]
		Status = VL53L0X_WrWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800581c:	8abb      	ldrh	r3, [r7, #20]
 800581e:	461a      	mov	r2, r3
 8005820:	210c      	movs	r1, #12
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f003 fae4 	bl	8008df0 <VL53L0X_WrWord>
 8005828:	4603      	mov	r3, r0
 800582a:	75fb      	strb	r3, [r7, #23]
			Threshold16);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800582c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <VL53L0X_GetInterruptThresholds>:

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	460b      	mov	r3, r1
 8005846:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005848:	2300      	movs	r3, #0
 800584a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	461a      	mov	r2, r3
 8005852:	210e      	movs	r1, #14
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f003 fb53 	bl	8008f00 <VL53L0X_RdWord>
 800585a:	4603      	mov	r3, r0
 800585c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800585e:	8abb      	ldrh	r3, [r7, #20]
 8005860:	045a      	lsls	r2, r3, #17
 8005862:	4b0e      	ldr	r3, [pc, #56]	@ (800589c <VL53L0X_GetInterruptThresholds+0x64>)
 8005864:	4013      	ands	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800586a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10e      	bne.n	8005890 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005872:	f107 0314 	add.w	r3, r7, #20
 8005876:	461a      	mov	r2, r3
 8005878:	210c      	movs	r1, #12
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f003 fb40 	bl	8008f00 <VL53L0X_RdWord>
 8005880:	4603      	mov	r3, r0
 8005882:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005884:	8abb      	ldrh	r3, [r7, #20]
 8005886:	045a      	lsls	r2, r3, #17
 8005888:	4b04      	ldr	r3, [pc, #16]	@ (800589c <VL53L0X_GetInterruptThresholds+0x64>)
 800588a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005890:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	1ffe0000 	.word	0x1ffe0000

080058a0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80058b2:	2201      	movs	r2, #1
 80058b4:	210b      	movs	r1, #11
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f003 fa76 	bl	8008da8 <VL53L0X_WrByte>
 80058bc:	4603      	mov	r3, r0
 80058be:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80058c0:	2200      	movs	r2, #0
 80058c2:	210b      	movs	r1, #11
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f003 fa6f 	bl	8008da8 <VL53L0X_WrByte>
 80058ca:	4603      	mov	r3, r0
 80058cc:	461a      	mov	r2, r3
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80058d4:	f107 030d 	add.w	r3, r7, #13
 80058d8:	461a      	mov	r2, r3
 80058da:	2113      	movs	r1, #19
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f003 fae5 	bl	8008eac <VL53L0X_RdByte>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	3301      	adds	r3, #1
 80058f0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80058f2:	7b7b      	ldrb	r3, [r7, #13]
 80058f4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d006      	beq.n	800590a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d803      	bhi.n	800590a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0d3      	beq.n	80058b2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800590a:	7bbb      	ldrb	r3, [r7, #14]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005910:	23f4      	movs	r3, #244	@ 0xf4
 8005912:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800592e:	f107 030e 	add.w	r3, r7, #14
 8005932:	461a      	mov	r2, r3
 8005934:	2113      	movs	r1, #19
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f003 fab8 	bl	8008eac <VL53L0X_RdByte>
 800593c:	4603      	mov	r3, r0
 800593e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005940:	7bbb      	ldrb	r3, [r7, #14]
 8005942:	f003 0207 	and.w	r2, r3, #7
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	f003 0318 	and.w	r3, r3, #24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005954:	23fa      	movs	r3, #250	@ 0xfa
 8005956:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005958:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005970:	2300      	movs	r3, #0
 8005972:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fa03 	bl	8005d84 <VL53L0X_perform_ref_spad_management>
 800597e:	4603      	mov	r3, r0
 8005980:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8005982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800599c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80059a0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80059a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059a6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80059a8:	f107 0308 	add.w	r3, r7, #8
 80059ac:	461a      	mov	r2, r3
 80059ae:	2128      	movs	r1, #40	@ 0x28
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f003 faa5 	bl	8008f00 <VL53L0X_RdWord>
 80059b6:	4603      	mov	r3, r0
 80059b8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80059ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d11e      	bne.n	8005a00 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80059c2:	893b      	ldrh	r3, [r7, #8]
 80059c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80059cc:	893b      	ldrh	r3, [r7, #8]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	dd0b      	ble.n	80059f0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80059d8:	893a      	ldrh	r2, [r7, #8]
 80059da:	897b      	ldrh	r3, [r7, #10]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	b29b      	uxth	r3, r3
 80059e0:	b21b      	sxth	r3, r3
 80059e2:	461a      	mov	r2, r3
					* 250;
 80059e4:	23fa      	movs	r3, #250	@ 0xfa
 80059e6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	e007      	b.n	8005a00 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80059f0:	893b      	ldrh	r3, [r7, #8]
 80059f2:	b21b      	sxth	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	23fa      	movs	r3, #250	@ 0xfa
 80059f8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b08b      	sub	sp, #44	@ 0x2c
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	f04f 32ff 	mov.w	r2, #4294967295
 8005a28:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a3c:	69b9      	ldr	r1, [r7, #24]
 8005a3e:	fb01 f202 	mul.w	r2, r1, r2
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a4a:	e030      	b.n	8005aae <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	4413      	add	r3, r2
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d11e      	bne.n	8005aa0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005a62:	7ffa      	ldrb	r2, [r7, #31]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	fa42 f303 	asr.w	r3, r2, r3
 8005a6a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005a70:	e016      	b.n	8005aa0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005a72:	7ffb      	ldrb	r3, [r7, #31]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <get_next_good_spad+0x88>
				success = 1;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	fb03 f202 	mul.w	r2, r3, r2
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	601a      	str	r2, [r3, #0]
				break;
 8005a92:	e009      	b.n	8005aa8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005a94:	7ffb      	ldrb	r3, [r7, #31]
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d3e4      	bcc.n	8005a72 <get_next_good_spad+0x66>
				coarseIndex++) {
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aaa:	3301      	adds	r3, #1
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d202      	bcs.n	8005abc <get_next_good_spad+0xb0>
 8005ab6:	7fbb      	ldrb	r3, [r7, #30]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0c7      	beq.n	8005a4c <get_next_good_spad+0x40>
		}
	}
}
 8005abc:	bf00      	nop
 8005abe:	372c      	adds	r7, #44	@ 0x2c
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005ada:	4a07      	ldr	r2, [pc, #28]	@ (8005af8 <is_aperture+0x30>)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <is_aperture+0x22>
		isAperture = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	08009a8c 	.word	0x08009a8c

08005afc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	@ 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b22:	69b9      	ldr	r1, [r7, #24]
 8005b24:	fb01 f202 	mul.w	r2, r1, r2
 8005b28:	1a9b      	subs	r3, r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d302      	bcc.n	8005b3a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005b34:	23ce      	movs	r3, #206	@ 0xce
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e010      	b.n	8005b5c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	4413      	add	r3, r2
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b25a      	sxtb	r2, r3
 8005b44:	2101      	movs	r1, #1
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	b25b      	sxtb	r3, r3
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	b259      	sxtb	r1, r3
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	b2ca      	uxtb	r2, r1
 8005b5a:	701a      	strb	r2, [r3, #0]

	return status;
 8005b5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3724      	adds	r7, #36	@ 0x24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005b76:	2306      	movs	r3, #6
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	21b0      	movs	r1, #176	@ 0xb0
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f003 f8b7 	bl	8008cf0 <VL53L0X_WriteMulti>
 8005b82:	4603      	mov	r3, r0
 8005b84:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8005b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005b9c:	2306      	movs	r3, #6
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	21b0      	movs	r1, #176	@ 0xb0
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f003 f8d4 	bl	8008d50 <VL53L0X_ReadMulti>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08c      	sub	sp, #48	@ 0x30
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bd0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bd4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bda:	e02b      	b.n	8005c34 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005bdc:	f107 031c 	add.w	r3, r7, #28
 8005be0:	6a3a      	ldr	r2, [r7, #32]
 8005be2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff ff11 	bl	8005a0c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d103      	bne.n	8005bfa <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005bf2:	23ce      	movs	r3, #206	@ 0xce
 8005bf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8005bf8:	e020      	b.n	8005c3c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c00:	4413      	add	r3, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff ff60 	bl	8005ac8 <is_aperture>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	7afb      	ldrb	r3, [r7, #11]
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005c12:	23ce      	movs	r3, #206	@ 0xce
 8005c14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8005c18:	e010      	b.n	8005c3c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005c1e:	6a3a      	ldr	r2, [r7, #32]
 8005c20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c22:	6838      	ldr	r0, [r7, #0]
 8005c24:	f7ff ff6a 	bl	8005afc <enable_spad_bit>
		currentSpad++;
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c30:	3301      	adds	r3, #1
 8005c32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d3cf      	bcc.n	8005bdc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c3e:	6a3a      	ldr	r2, [r7, #32]
 8005c40:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005c42:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7ff ff8d 	bl	8005b6c <set_ref_spad_map>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005c58:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d121      	bne.n	8005ca4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005c60:	f107 0314 	add.w	r3, r7, #20
 8005c64:	4619      	mov	r1, r3
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff ff93 	bl	8005b92 <get_ref_spad_map>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005c76:	e011      	b.n	8005c9c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	4413      	add	r3, r2
 8005c7e:	781a      	ldrb	r2, [r3, #0]
 8005c80:	f107 0114 	add.w	r1, r7, #20
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	440b      	add	r3, r1
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d003      	beq.n	8005c96 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005c8e:	23ce      	movs	r3, #206	@ 0xce
 8005c90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8005c94:	e006      	b.n	8005ca4 <enable_ref_spads+0xec>
			}
			i++;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	3301      	adds	r3, #1
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 8005c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d3e9      	bcc.n	8005c78 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005ca4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3730      	adds	r7, #48	@ 0x30
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	@ 0x28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005ccc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005cd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d107      	bne.n	8005ce8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005cd8:	22c0      	movs	r2, #192	@ 0xc0
 8005cda:	2101      	movs	r1, #1
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f003 f863 	bl	8008da8 <VL53L0X_WrByte>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005ce8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d108      	bne.n	8005d02 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005cf0:	f107 0308 	add.w	r3, r7, #8
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fc1c 	bl	8005534 <VL53L0X_PerformSingleRangingMeasurement>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005d02:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d107      	bne.n	8005d1a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	21ff      	movs	r1, #255	@ 0xff
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f003 f84a 	bl	8008da8 <VL53L0X_WrByte>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005d1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d107      	bne.n	8005d32 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	21b6      	movs	r1, #182	@ 0xb6
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f003 f8ea 	bl	8008f00 <VL53L0X_RdWord>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005d32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d107      	bne.n	8005d4a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	21ff      	movs	r1, #255	@ 0xff
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f003 f832 	bl	8008da8 <VL53L0X_WrByte>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8005d4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d112      	bne.n	8005d78 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005d52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d56:	461a      	mov	r2, r3
 8005d58:	2101      	movs	r1, #1
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f003 f824 	bl	8008da8 <VL53L0X_WrByte>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005d66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d104      	bne.n	8005d78 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005d74:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 8005d78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3728      	adds	r7, #40	@ 0x28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8005d84:	b590      	push	{r4, r7, lr}
 8005d86:	b09d      	sub	sp, #116	@ 0x74
 8005d88:	af06      	add	r7, sp, #24
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8005d96:	23b4      	movs	r3, #180	@ 0xb4
 8005d98:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 8005da0:	232c      	movs	r3, #44	@ 0x2c
 8005da2:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8005db0:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8005db4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 8005dbe:	2306      	movs	r3, #6
 8005dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 8005de8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dee:	e009      	b.n	8005e04 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e00:	3301      	adds	r3, #1
 8005e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d3f1      	bcc.n	8005df0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	21ff      	movs	r1, #255	@ 0xff
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f002 ffc9 	bl	8008da8 <VL53L0X_WrByte>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005e1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d107      	bne.n	8005e34 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005e24:	2200      	movs	r2, #0
 8005e26:	214f      	movs	r1, #79	@ 0x4f
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f002 ffbd 	bl	8008da8 <VL53L0X_WrByte>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005e34:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d107      	bne.n	8005e4c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8005e3c:	222c      	movs	r2, #44	@ 0x2c
 8005e3e:	214e      	movs	r1, #78	@ 0x4e
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f002 ffb1 	bl	8008da8 <VL53L0X_WrByte>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005e4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d107      	bne.n	8005e64 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e54:	2200      	movs	r2, #0
 8005e56:	21ff      	movs	r1, #255	@ 0xff
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f002 ffa5 	bl	8008da8 <VL53L0X_WrByte>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005e64:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8005e6c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005e70:	461a      	mov	r2, r3
 8005e72:	21b6      	movs	r1, #182	@ 0xb6
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f002 ff97 	bl	8008da8 <VL53L0X_WrByte>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8005e80:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d107      	bne.n	8005e98 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2180      	movs	r1, #128	@ 0x80
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f002 ff8b 	bl	8008da8 <VL53L0X_WrByte>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8005e98:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8005ea0:	f107 0210 	add.w	r2, r7, #16
 8005ea4:	f107 0111 	add.w	r1, r7, #17
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 fbbb 	bl	8006626 <VL53L0X_perform_ref_calibration>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8005eb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d121      	bne.n	8005f02 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8005ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ec4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 8005eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ecc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 8005eda:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005ede:	f107 0218 	add.w	r2, r7, #24
 8005ee2:	9204      	str	r2, [sp, #16]
 8005ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ee6:	9203      	str	r2, [sp, #12]
 8005ee8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005eea:	9202      	str	r2, [sp, #8]
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fe5e 	bl	8005bb8 <enable_ref_spads>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f02:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d174      	bne.n	8005ff4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 8005f0e:	f107 0312 	add.w	r3, r7, #18
 8005f12:	4619      	mov	r1, r3
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff fecb 	bl	8005cb0 <perform_ref_signal_measurement>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005f20:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d161      	bne.n	8005fec <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005f28:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005f2a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d25d      	bcs.n	8005fec <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005f30:	2300      	movs	r3, #0
 8005f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f34:	e009      	b.n	8005f4a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f46:	3301      	adds	r3, #1
 8005f48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d3f1      	bcc.n	8005f36 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005f52:	e002      	b.n	8005f5a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f56:	3301      	adds	r3, #1
 8005f58:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8005f5a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8005f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f60:	4413      	add	r3, r2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff fdb0 	bl	8005ac8 <is_aperture>
 8005f68:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d103      	bne.n	8005f76 <VL53L0X_perform_ref_spad_management+0x1f2>
 8005f6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d3ee      	bcc.n	8005f54 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8005f76:	2301      	movs	r3, #1
 8005f78:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 8005f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f7c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 8005f8a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005f8e:	f107 0218 	add.w	r2, r7, #24
 8005f92:	9204      	str	r2, [sp, #16]
 8005f94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f96:	9203      	str	r2, [sp, #12]
 8005f98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f9a:	9202      	str	r2, [sp, #8]
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	4623      	mov	r3, r4
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff fe06 	bl	8005bb8 <enable_ref_spads>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005fb2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d11b      	bne.n	8005ff2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 8005fbe:	f107 0312 	add.w	r3, r7, #18
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff fe73 	bl	8005cb0 <perform_ref_signal_measurement>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005fd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10c      	bne.n	8005ff2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8005fd8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8005fda:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d208      	bcs.n	8005ff2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005fea:	e002      	b.n	8005ff2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ff0:	e000      	b.n	8005ff4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005ff2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005ff4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 80af 	bne.w	800615c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8005ffe:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006000:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006002:	429a      	cmp	r2, r3
 8006004:	f240 80aa 	bls.w	800615c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800600a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 800600e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006010:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 8006018:	f107 031c 	add.w	r3, r7, #28
 800601c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800601e:	4618      	mov	r0, r3
 8006020:	f003 f8a6 	bl	8009170 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006024:	8a7b      	ldrh	r3, [r7, #18]
 8006026:	461a      	mov	r2, r3
 8006028:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	bfb8      	it	lt
 8006030:	425b      	neglt	r3, r3
 8006032:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 800603a:	e086      	b.n	800614a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 8006042:	f107 0314 	add.w	r3, r7, #20
 8006046:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006048:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800604a:	f7ff fcdf 	bl	8005a0c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d103      	bne.n	800605e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006056:	23ce      	movs	r3, #206	@ 0xce
 8006058:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 800605c:	e07e      	b.n	800615c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800605e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4413      	add	r3, r2
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fd2e 	bl	8005ac8 <is_aperture>
 800606c:	4603      	mov	r3, r0
 800606e:	461a      	mov	r2, r3
 8006070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006072:	4293      	cmp	r3, r2
 8006074:	d003      	beq.n	800607e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 800607c:	e06e      	b.n	800615c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800607e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006080:	3301      	adds	r3, #1
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 800608e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fd32 	bl	8005afc <enable_spad_bit>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800609e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10c      	bne.n	80060c0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80060a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060a8:	3301      	adds	r3, #1
 80060aa:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 80060b2:	4619      	mov	r1, r3
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f7ff fd59 	bl	8005b6c <set_ref_spad_map>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80060c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d146      	bne.n	8006156 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80060c8:	f107 0312 	add.w	r3, r7, #18
 80060cc:	4619      	mov	r1, r3
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff fdee 	bl	8005cb0 <perform_ref_signal_measurement>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80060da:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d13b      	bne.n	800615a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80060e2:	8a7b      	ldrh	r3, [r7, #18]
 80060e4:	461a      	mov	r2, r3
 80060e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bfb8      	it	lt
 80060ee:	425b      	neglt	r3, r3
 80060f0:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 80060f2:	8a7b      	ldrh	r3, [r7, #18]
 80060f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d21c      	bcs.n	8006134 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80060fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060fe:	429a      	cmp	r2, r3
 8006100:	d914      	bls.n	800612c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006102:	f107 031c 	add.w	r3, r7, #28
 8006106:	4619      	mov	r1, r3
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff fd2f 	bl	8005b6c <set_ref_spad_map>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 800611a:	f107 011c 	add.w	r1, r7, #28
 800611e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006120:	4618      	mov	r0, r3
 8006122:	f003 f825 	bl	8009170 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006128:	3b01      	subs	r3, #1
 800612a:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006132:	e00a      	b.n	800614a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 800613e:	f107 031c 	add.w	r3, r7, #28
 8006142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006144:	4618      	mov	r0, r3
 8006146:	f003 f813 	bl	8009170 <memcpy>
		while (!complete) {
 800614a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800614e:	2b00      	cmp	r3, #0
 8006150:	f43f af74 	beq.w	800603c <VL53L0X_perform_ref_spad_management+0x2b8>
 8006154:	e002      	b.n	800615c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006156:	bf00      	nop
 8006158:	e000      	b.n	800615c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800615a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800615c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006160:	2b00      	cmp	r3, #0
 8006162:	d115      	bne.n	8006190 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006168:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8006170:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	b2da      	uxtb	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006190:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8006194:	4618      	mov	r0, r3
 8006196:	375c      	adds	r7, #92	@ 0x5c
 8006198:	46bd      	mov	sp, r7
 800619a:	bd90      	pop	{r4, r7, pc}

0800619c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b093      	sub	sp, #76	@ 0x4c
 80061a0:	af06      	add	r7, sp, #24
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 80061b4:	23b4      	movs	r3, #180	@ 0xb4
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 80061ba:	2306      	movs	r3, #6
 80061bc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80061be:	232c      	movs	r3, #44	@ 0x2c
 80061c0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80061c2:	2201      	movs	r2, #1
 80061c4:	21ff      	movs	r1, #255	@ 0xff
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f002 fdee 	bl	8008da8 <VL53L0X_WrByte>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80061d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d107      	bne.n	80061ea <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80061da:	2200      	movs	r2, #0
 80061dc:	214f      	movs	r1, #79	@ 0x4f
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f002 fde2 	bl	8008da8 <VL53L0X_WrByte>
 80061e4:	4603      	mov	r3, r0
 80061e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80061ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d107      	bne.n	8006202 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80061f2:	222c      	movs	r2, #44	@ 0x2c
 80061f4:	214e      	movs	r1, #78	@ 0x4e
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f002 fdd6 	bl	8008da8 <VL53L0X_WrByte>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006202:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006206:	2b00      	cmp	r3, #0
 8006208:	d107      	bne.n	800621a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800620a:	2200      	movs	r2, #0
 800620c:	21ff      	movs	r1, #255	@ 0xff
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f002 fdca 	bl	8008da8 <VL53L0X_WrByte>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800621a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800621e:	2b00      	cmp	r3, #0
 8006220:	d109      	bne.n	8006236 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006222:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006226:	461a      	mov	r2, r3
 8006228:	21b6      	movs	r1, #182	@ 0xb6
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f002 fdbc 	bl	8008da8 <VL53L0X_WrByte>
 8006230:	4603      	mov	r3, r0
 8006232:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
 800623a:	e009      	b.n	8006250 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	4413      	add	r3, r2
 8006242:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	3301      	adds	r3, #1
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	429a      	cmp	r2, r3
 8006256:	d3f1      	bcc.n	800623c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d011      	beq.n	8006282 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800625e:	e002      	b.n	8006266 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	3301      	adds	r3, #1
 8006264:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006266:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800626a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626c:	4413      	add	r3, r2
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fc2a 	bl	8005ac8 <is_aperture>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <VL53L0X_set_reference_spads+0xe6>
 800627a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	429a      	cmp	r2, r3
 8006280:	d3ee      	bcc.n	8006260 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 800628e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006292:	79f9      	ldrb	r1, [r7, #7]
 8006294:	f107 0214 	add.w	r2, r7, #20
 8006298:	9204      	str	r2, [sp, #16]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	9203      	str	r2, [sp, #12]
 800629e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062a0:	9202      	str	r2, [sp, #8]
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	4623      	mov	r3, r4
 80062aa:	4602      	mov	r2, r0
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fc83 	bl	8005bb8 <enable_ref_spads>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80062b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10c      	bne.n	80062da <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	79fa      	ldrb	r2, [r7, #7]
 80062d6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80062da:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3734      	adds	r7, #52	@ 0x34
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd90      	pop	{r4, r7, pc}

080062e6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80062f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10a      	bne.n	8006314 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	2100      	movs	r1, #0
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f002 fd4c 	bl	8008da8 <VL53L0X_WrByte>
 8006310:	4603      	mov	r3, r0
 8006312:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f9bf 	bl	80066a0 <VL53L0X_measurement_poll_for_completion>
 8006322:	4603      	mov	r3, r0
 8006324:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d105      	bne.n	800633a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800632e:	2100      	movs	r1, #0
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff fab5 	bl	80058a0 <VL53L0X_ClearInterruptMask>
 8006336:	4603      	mov	r3, r0
 8006338:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800633a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006342:	2200      	movs	r2, #0
 8006344:	2100      	movs	r1, #0
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f002 fd2e 	bl	8008da8 <VL53L0X_WrByte>
 800634c:	4603      	mov	r3, r0
 800634e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006350:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	4608      	mov	r0, r1
 8006366:	4611      	mov	r1, r2
 8006368:	461a      	mov	r2, r3
 800636a:	4603      	mov	r3, r0
 800636c:	70fb      	strb	r3, [r7, #3]
 800636e:	460b      	mov	r3, r1
 8006370:	70bb      	strb	r3, [r7, #2]
 8006372:	4613      	mov	r3, r2
 8006374:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800637e:	2201      	movs	r2, #1
 8006380:	21ff      	movs	r1, #255	@ 0xff
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f002 fd10 	bl	8008da8 <VL53L0X_WrByte>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	4313      	orrs	r3, r2
 8006390:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006392:	2200      	movs	r2, #0
 8006394:	2100      	movs	r1, #0
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f002 fd06 	bl	8008da8 <VL53L0X_WrByte>
 800639c:	4603      	mov	r3, r0
 800639e:	461a      	mov	r2, r3
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80063a6:	2200      	movs	r2, #0
 80063a8:	21ff      	movs	r1, #255	@ 0xff
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f002 fcfc 	bl	8008da8 <VL53L0X_WrByte>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01e      	beq.n	80063fe <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80063c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	21cb      	movs	r1, #203	@ 0xcb
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f002 fd6d 	bl	8008eac <VL53L0X_RdByte>
 80063d2:	4603      	mov	r3, r0
 80063d4:	461a      	mov	r2, r3
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	4313      	orrs	r3, r2
 80063da:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80063dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02a      	beq.n	800643a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80063e4:	f107 030e 	add.w	r3, r7, #14
 80063e8:	461a      	mov	r2, r3
 80063ea:	21ee      	movs	r1, #238	@ 0xee
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f002 fd5d 	bl	8008eac <VL53L0X_RdByte>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	73fb      	strb	r3, [r7, #15]
 80063fc:	e01d      	b.n	800643a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80063fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006406:	78bb      	ldrb	r3, [r7, #2]
 8006408:	461a      	mov	r2, r3
 800640a:	21cb      	movs	r1, #203	@ 0xcb
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f002 fccb 	bl	8008da8 <VL53L0X_WrByte>
 8006412:	4603      	mov	r3, r0
 8006414:	461a      	mov	r2, r3
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	4313      	orrs	r3, r2
 800641a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800641c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006424:	787b      	ldrb	r3, [r7, #1]
 8006426:	2280      	movs	r2, #128	@ 0x80
 8006428:	21ee      	movs	r1, #238	@ 0xee
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f002 fd0a 	bl	8008e44 <VL53L0X_UpdateByte>
 8006430:	4603      	mov	r3, r0
 8006432:	461a      	mov	r2, r3
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	4313      	orrs	r3, r2
 8006438:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800643a:	2201      	movs	r2, #1
 800643c:	21ff      	movs	r1, #255	@ 0xff
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f002 fcb2 	bl	8008da8 <VL53L0X_WrByte>
 8006444:	4603      	mov	r3, r0
 8006446:	461a      	mov	r2, r3
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	4313      	orrs	r3, r2
 800644c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800644e:	2201      	movs	r2, #1
 8006450:	2100      	movs	r1, #0
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f002 fca8 	bl	8008da8 <VL53L0X_WrByte>
 8006458:	4603      	mov	r3, r0
 800645a:	461a      	mov	r2, r3
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	4313      	orrs	r3, r2
 8006460:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006462:	2200      	movs	r2, #0
 8006464:	21ff      	movs	r1, #255	@ 0xff
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f002 fc9e 	bl	8008da8 <VL53L0X_WrByte>
 800646c:	4603      	mov	r3, r0
 800646e:	461a      	mov	r2, r3
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	4313      	orrs	r3, r2
 8006474:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	f023 0310 	bic.w	r3, r3, #16
 800647c:	b2da      	uxtb	r2, r3
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	701a      	strb	r2, [r3, #0]

	return Status;
 8006482:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b08a      	sub	sp, #40	@ 0x28
 8006492:	af04      	add	r7, sp, #16
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	4611      	mov	r1, r2
 800649a:	461a      	mov	r2, r3
 800649c:	460b      	mov	r3, r1
 800649e:	71fb      	strb	r3, [r7, #7]
 80064a0:	4613      	mov	r3, r2
 80064a2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064a4:	2300      	movs	r3, #0
 80064a6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80064b8:	79bb      	ldrb	r3, [r7, #6]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80064c4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80064c6:	2201      	movs	r2, #1
 80064c8:	2101      	movs	r1, #1
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f002 fc6c 	bl	8008da8 <VL53L0X_WrByte>
 80064d0:	4603      	mov	r3, r0
 80064d2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80064d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d105      	bne.n	80064e8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80064dc:	2140      	movs	r1, #64	@ 0x40
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff ff01 	bl	80062e6 <VL53L0X_perform_single_ref_calibration>
 80064e4:	4603      	mov	r3, r0
 80064e6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80064e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d115      	bne.n	800651c <VL53L0X_perform_vhv_calibration+0x8e>
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d112      	bne.n	800651c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80064f6:	7d39      	ldrb	r1, [r7, #20]
 80064f8:	7d7a      	ldrb	r2, [r7, #21]
 80064fa:	2300      	movs	r3, #0
 80064fc:	9303      	str	r3, [sp, #12]
 80064fe:	2301      	movs	r3, #1
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	f107 0313 	add.w	r3, r7, #19
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	460b      	mov	r3, r1
 800650e:	2101      	movs	r1, #1
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff ff23 	bl	800635c <VL53L0X_ref_calibration_io>
 8006516:	4603      	mov	r3, r0
 8006518:	75fb      	strb	r3, [r7, #23]
 800651a:	e002      	b.n	8006522 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2200      	movs	r2, #0
 8006520:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006522:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d112      	bne.n	8006550 <VL53L0X_perform_vhv_calibration+0xc2>
 800652a:	79bb      	ldrb	r3, [r7, #6]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00f      	beq.n	8006550 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006530:	7dbb      	ldrb	r3, [r7, #22]
 8006532:	461a      	mov	r2, r3
 8006534:	2101      	movs	r1, #1
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f002 fc36 	bl	8008da8 <VL53L0X_WrByte>
 800653c:	4603      	mov	r3, r0
 800653e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006540:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d103      	bne.n	8006550 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	7dba      	ldrb	r2, [r7, #22]
 800654c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8006550:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	@ 0x28
 8006560:	af04      	add	r7, sp, #16
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4611      	mov	r1, r2
 8006568:	461a      	mov	r2, r3
 800656a:	460b      	mov	r3, r1
 800656c:	71fb      	strb	r3, [r7, #7]
 800656e:	4613      	mov	r3, r2
 8006570:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006572:	2300      	movs	r3, #0
 8006574:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006582:	79bb      	ldrb	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800658e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006590:	2202      	movs	r2, #2
 8006592:	2101      	movs	r1, #1
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f002 fc07 	bl	8008da8 <VL53L0X_WrByte>
 800659a:	4603      	mov	r3, r0
 800659c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800659e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d105      	bne.n	80065b2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80065a6:	2100      	movs	r1, #0
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff fe9c 	bl	80062e6 <VL53L0X_perform_single_ref_calibration>
 80065ae:	4603      	mov	r3, r0
 80065b0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80065b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d115      	bne.n	80065e6 <VL53L0X_perform_phase_calibration+0x8a>
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d112      	bne.n	80065e6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80065c0:	7d39      	ldrb	r1, [r7, #20]
 80065c2:	7d7a      	ldrb	r2, [r7, #21]
 80065c4:	2301      	movs	r3, #1
 80065c6:	9303      	str	r3, [sp, #12]
 80065c8:	2300      	movs	r3, #0
 80065ca:	9302      	str	r3, [sp, #8]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	f107 0313 	add.w	r3, r7, #19
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	460b      	mov	r3, r1
 80065d8:	2101      	movs	r1, #1
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff febe 	bl	800635c <VL53L0X_ref_calibration_io>
 80065e0:	4603      	mov	r3, r0
 80065e2:	75fb      	strb	r3, [r7, #23]
 80065e4:	e002      	b.n	80065ec <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80065ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d112      	bne.n	800661a <VL53L0X_perform_phase_calibration+0xbe>
 80065f4:	79bb      	ldrb	r3, [r7, #6]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00f      	beq.n	800661a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80065fa:	7dbb      	ldrb	r3, [r7, #22]
 80065fc:	461a      	mov	r2, r3
 80065fe:	2101      	movs	r1, #1
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f002 fbd1 	bl	8008da8 <VL53L0X_WrByte>
 8006606:	4603      	mov	r3, r0
 8006608:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800660a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	7dba      	ldrb	r2, [r7, #22]
 8006616:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800661a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006634:	2300      	movs	r3, #0
 8006636:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006642:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	2300      	movs	r3, #0
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff ff1f 	bl	800648e <VL53L0X_perform_vhv_calibration>
 8006650:	4603      	mov	r3, r0
 8006652:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d107      	bne.n	800666c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	2300      	movs	r3, #0
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff ff7a 	bl	800655c <VL53L0X_perform_phase_calibration>
 8006668:	4603      	mov	r3, r0
 800666a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800666c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10f      	bne.n	8006694 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006674:	7dbb      	ldrb	r3, [r7, #22]
 8006676:	461a      	mov	r2, r3
 8006678:	2101      	movs	r1, #1
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f002 fb94 	bl	8008da8 <VL53L0X_WrByte>
 8006680:	4603      	mov	r3, r0
 8006682:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	7dba      	ldrb	r2, [r7, #22]
 8006690:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8006694:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80066b4:	f107 030f 	add.w	r3, r7, #15
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fe fdde 	bl	800527c <VL53L0X_GetMeasurementDataReady>
 80066c0:	4603      	mov	r3, r0
 80066c2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80066c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d110      	bne.n	80066ee <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d00f      	beq.n	80066f2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	3301      	adds	r3, #1
 80066d6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80066de:	d302      	bcc.n	80066e6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80066e0:	23f9      	movs	r3, #249	@ 0xf9
 80066e2:	75fb      	strb	r3, [r7, #23]
			break;
 80066e4:	e006      	b.n	80066f4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f002 fc7c 	bl	8008fe4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80066ec:	e7e2      	b.n	80066b4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80066f2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80066f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	3301      	adds	r3, #1
 8006712:	b2db      	uxtb	r3, r3
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	4603      	mov	r3, r0
 800672e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006734:	79fb      	ldrb	r3, [r7, #7]
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	b2db      	uxtb	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006758:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800675c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800675e:	e002      	b.n	8006766 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	089b      	lsrs	r3, r3, #2
 8006764:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d8f8      	bhi.n	8006760 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800676e:	e017      	b.n	80067a0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4413      	add	r3, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d30b      	bcc.n	8006794 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	4413      	add	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	e002      	b.n	800679a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	085b      	lsrs	r3, r3, #1
 8006798:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	089b      	lsrs	r3, r3, #2
 800679e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e4      	bne.n	8006770 <VL53L0X_isqrt+0x24>
	}

	return res;
 80067a6:	68fb      	ldr	r3, [r7, #12]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067bc:	2300      	movs	r3, #0
 80067be:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80067c0:	2200      	movs	r2, #0
 80067c2:	2183      	movs	r1, #131	@ 0x83
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f002 faef 	bl	8008da8 <VL53L0X_WrByte>
 80067ca:	4603      	mov	r3, r0
 80067cc:	461a      	mov	r2, r3
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80067d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d11e      	bne.n	800681a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80067e0:	f107 030f 	add.w	r3, r7, #15
 80067e4:	461a      	mov	r2, r3
 80067e6:	2183      	movs	r1, #131	@ 0x83
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f002 fb5f 	bl	8008eac <VL53L0X_RdByte>
 80067ee:	4603      	mov	r3, r0
 80067f0:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <VL53L0X_device_read_strobe+0x5a>
 80067f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	3301      	adds	r3, #1
 8006804:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800680c:	d3e8      	bcc.n	80067e0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006814:	d301      	bcc.n	800681a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006816:	23f9      	movs	r3, #249	@ 0xf9
 8006818:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800681a:	2201      	movs	r2, #1
 800681c:	2183      	movs	r1, #131	@ 0x83
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f002 fac2 	bl	8008da8 <VL53L0X_WrByte>
 8006824:	4603      	mov	r3, r0
 8006826:	461a      	mov	r2, r3
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	4313      	orrs	r3, r2
 800682c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800682e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b098      	sub	sp, #96	@ 0x60
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006846:	2300      	movs	r3, #0
 8006848:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 8006864:	2300      	movs	r3, #0
 8006866:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800686a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800686e:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006882:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8006886:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800688a:	2b07      	cmp	r3, #7
 800688c:	f000 8408 	beq.w	80070a0 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006890:	2201      	movs	r2, #1
 8006892:	2180      	movs	r1, #128	@ 0x80
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f002 fa87 	bl	8008da8 <VL53L0X_WrByte>
 800689a:	4603      	mov	r3, r0
 800689c:	461a      	mov	r2, r3
 800689e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80068a8:	2201      	movs	r2, #1
 80068aa:	21ff      	movs	r1, #255	@ 0xff
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f002 fa7b 	bl	8008da8 <VL53L0X_WrByte>
 80068b2:	4603      	mov	r3, r0
 80068b4:	461a      	mov	r2, r3
 80068b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80068c0:	2200      	movs	r2, #0
 80068c2:	2100      	movs	r1, #0
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f002 fa6f 	bl	8008da8 <VL53L0X_WrByte>
 80068ca:	4603      	mov	r3, r0
 80068cc:	461a      	mov	r2, r3
 80068ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80068d8:	2206      	movs	r2, #6
 80068da:	21ff      	movs	r1, #255	@ 0xff
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f002 fa63 	bl	8008da8 <VL53L0X_WrByte>
 80068e2:	4603      	mov	r3, r0
 80068e4:	461a      	mov	r2, r3
 80068e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80068f0:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 80068f4:	461a      	mov	r2, r3
 80068f6:	2183      	movs	r1, #131	@ 0x83
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f002 fad7 	bl	8008eac <VL53L0X_RdByte>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006906:	4313      	orrs	r3, r2
 8006908:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800690c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006910:	f043 0304 	orr.w	r3, r3, #4
 8006914:	b2db      	uxtb	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	2183      	movs	r1, #131	@ 0x83
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f002 fa44 	bl	8008da8 <VL53L0X_WrByte>
 8006920:	4603      	mov	r3, r0
 8006922:	461a      	mov	r2, r3
 8006924:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006928:	4313      	orrs	r3, r2
 800692a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800692e:	2207      	movs	r2, #7
 8006930:	21ff      	movs	r1, #255	@ 0xff
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f002 fa38 	bl	8008da8 <VL53L0X_WrByte>
 8006938:	4603      	mov	r3, r0
 800693a:	461a      	mov	r2, r3
 800693c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006940:	4313      	orrs	r3, r2
 8006942:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006946:	2201      	movs	r2, #1
 8006948:	2181      	movs	r1, #129	@ 0x81
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f002 fa2c 	bl	8008da8 <VL53L0X_WrByte>
 8006950:	4603      	mov	r3, r0
 8006952:	461a      	mov	r2, r3
 8006954:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006958:	4313      	orrs	r3, r2
 800695a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f002 fb40 	bl	8008fe4 <VL53L0X_PollingDelay>
 8006964:	4603      	mov	r3, r0
 8006966:	461a      	mov	r2, r3
 8006968:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800696c:	4313      	orrs	r3, r2
 800696e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006972:	2201      	movs	r2, #1
 8006974:	2180      	movs	r1, #128	@ 0x80
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f002 fa16 	bl	8008da8 <VL53L0X_WrByte>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006984:	4313      	orrs	r3, r2
 8006986:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8098 	beq.w	8006ac6 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006996:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800699a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 8091 	bne.w	8006ac6 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80069a4:	226b      	movs	r2, #107	@ 0x6b
 80069a6:	2194      	movs	r1, #148	@ 0x94
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f002 f9fd 	bl	8008da8 <VL53L0X_WrByte>
 80069ae:	4603      	mov	r3, r0
 80069b0:	461a      	mov	r2, r3
 80069b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff fef9 	bl	80067b4 <VL53L0X_device_read_strobe>
 80069c2:	4603      	mov	r3, r0
 80069c4:	461a      	mov	r2, r3
 80069c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80069d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069d4:	461a      	mov	r2, r3
 80069d6:	2190      	movs	r1, #144	@ 0x90
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f002 fac7 	bl	8008f6c <VL53L0X_RdDWord>
 80069de:	4603      	mov	r3, r0
 80069e0:	461a      	mov	r2, r3
 80069e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	0a1b      	lsrs	r3, r3, #8
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069f6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80069fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fc:	0bdb      	lsrs	r3, r3, #15
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006a08:	2224      	movs	r2, #36	@ 0x24
 8006a0a:	2194      	movs	r1, #148	@ 0x94
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f002 f9cb 	bl	8008da8 <VL53L0X_WrByte>
 8006a12:	4603      	mov	r3, r0
 8006a14:	461a      	mov	r2, r3
 8006a16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fec7 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2190      	movs	r1, #144	@ 0x90
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f002 fa95 	bl	8008f6c <VL53L0X_RdDWord>
 8006a42:	4603      	mov	r3, r0
 8006a44:	461a      	mov	r2, r3
 8006a46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	0e1b      	lsrs	r3, r3, #24
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	0c1b      	lsrs	r3, r3, #16
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006a6e:	2225      	movs	r2, #37	@ 0x25
 8006a70:	2194      	movs	r1, #148	@ 0x94
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f002 f998 	bl	8008da8 <VL53L0X_WrByte>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff fe94 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	2190      	movs	r1, #144	@ 0x90
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f002 fa62 	bl	8008f6c <VL53L0X_RdDWord>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	0e1b      	lsrs	r3, r3, #24
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	0c1b      	lsrs	r3, r3, #16
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8189 	beq.w	8006de4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006ad2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006ad6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 8182 	bne.w	8006de4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	2194      	movs	r1, #148	@ 0x94
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f002 f95f 	bl	8008da8 <VL53L0X_WrByte>
 8006aea:	4603      	mov	r3, r0
 8006aec:	461a      	mov	r2, r3
 8006aee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fe5b 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006afe:	4603      	mov	r3, r0
 8006b00:	461a      	mov	r2, r3
 8006b02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006b0c:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8006b10:	461a      	mov	r2, r3
 8006b12:	2190      	movs	r1, #144	@ 0x90
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f002 f9c9 	bl	8008eac <VL53L0X_RdByte>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006b28:	227b      	movs	r2, #123	@ 0x7b
 8006b2a:	2194      	movs	r1, #148	@ 0x94
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f002 f93b 	bl	8008da8 <VL53L0X_WrByte>
 8006b32:	4603      	mov	r3, r0
 8006b34:	461a      	mov	r2, r3
 8006b36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff fe37 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006b46:	4603      	mov	r3, r0
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006b54:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2190      	movs	r1, #144	@ 0x90
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f002 f9a5 	bl	8008eac <VL53L0X_RdByte>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006b70:	2277      	movs	r2, #119	@ 0x77
 8006b72:	2194      	movs	r1, #148	@ 0x94
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f002 f917 	bl	8008da8 <VL53L0X_WrByte>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff fe13 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461a      	mov	r2, r3
 8006b92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	2190      	movs	r1, #144	@ 0x90
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f002 f9e1 	bl	8008f6c <VL53L0X_RdDWord>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	0e5b      	lsrs	r3, r3, #25
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	0c9b      	lsrs	r3, r3, #18
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	0adb      	lsrs	r3, r3, #11
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	091b      	lsrs	r3, r3, #4
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006c02:	2278      	movs	r2, #120	@ 0x78
 8006c04:	2194      	movs	r1, #148	@ 0x94
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f002 f8ce 	bl	8008da8 <VL53L0X_WrByte>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c14:	4313      	orrs	r3, r2
 8006c16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff fdca 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006c20:	4603      	mov	r3, r0
 8006c22:	461a      	mov	r2, r3
 8006c24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006c2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006c32:	461a      	mov	r2, r3
 8006c34:	2190      	movs	r1, #144	@ 0x90
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f002 f998 	bl	8008f6c <VL53L0X_RdDWord>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	0f5b      	lsrs	r3, r3, #29
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c54:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006c56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c5a:	4413      	add	r3, r2
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	0d9b      	lsrs	r3, r3, #22
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	0bdb      	lsrs	r3, r3, #15
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	019b      	lsls	r3, r3, #6
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006caa:	2279      	movs	r2, #121	@ 0x79
 8006cac:	2194      	movs	r1, #148	@ 0x94
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f002 f87a 	bl	8008da8 <VL53L0X_WrByte>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff fd76 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006cd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006cda:	461a      	mov	r2, r3
 8006cdc:	2190      	movs	r1, #144	@ 0x90
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f002 f944 	bl	8008f6c <VL53L0X_RdDWord>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	0e9b      	lsrs	r3, r3, #26
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cfc:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006cfe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d02:	4413      	add	r3, r2
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0a:	0cdb      	lsrs	r3, r3, #19
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	0b1b      	lsrs	r3, r3, #12
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006d44:	227a      	movs	r2, #122	@ 0x7a
 8006d46:	2194      	movs	r1, #148	@ 0x94
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f002 f82d 	bl	8008da8 <VL53L0X_WrByte>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	461a      	mov	r2, r3
 8006d52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fd29 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006d74:	461a      	mov	r2, r3
 8006d76:	2190      	movs	r1, #144	@ 0x90
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f002 f8f7 	bl	8008f6c <VL53L0X_RdDWord>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	461a      	mov	r2, r3
 8006d82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	0f9b      	lsrs	r3, r3, #30
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d96:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8006d98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d9c:	4413      	add	r3, r2
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	0ddb      	lsrs	r3, r3, #23
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	0a5b      	lsrs	r3, r3, #9
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	089b      	lsrs	r3, r3, #2
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 8006dde:	2300      	movs	r3, #0
 8006de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	f003 0304 	and.w	r3, r3, #4
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80f1 	beq.w	8006fd2 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006df0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006df4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f040 80ea 	bne.w	8006fd2 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006dfe:	227b      	movs	r2, #123	@ 0x7b
 8006e00:	2194      	movs	r1, #148	@ 0x94
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 ffd0 	bl	8008da8 <VL53L0X_WrByte>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e10:	4313      	orrs	r3, r2
 8006e12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fccc 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006e2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006e2e:	461a      	mov	r2, r3
 8006e30:	2190      	movs	r1, #144	@ 0x90
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f002 f89a 	bl	8008f6c <VL53L0X_RdDWord>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006e46:	227c      	movs	r2, #124	@ 0x7c
 8006e48:	2194      	movs	r1, #148	@ 0x94
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 ffac 	bl	8008da8 <VL53L0X_WrByte>
 8006e50:	4603      	mov	r3, r0
 8006e52:	461a      	mov	r2, r3
 8006e54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff fca8 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006e64:	4603      	mov	r3, r0
 8006e66:	461a      	mov	r2, r3
 8006e68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e76:	461a      	mov	r2, r3
 8006e78:	2190      	movs	r1, #144	@ 0x90
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f002 f876 	bl	8008f6c <VL53L0X_RdDWord>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006e8e:	2273      	movs	r2, #115	@ 0x73
 8006e90:	2194      	movs	r1, #148	@ 0x94
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 ff88 	bl	8008da8 <VL53L0X_WrByte>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fc84 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006eac:	4603      	mov	r3, r0
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006eba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	2190      	movs	r1, #144	@ 0x90
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f002 f852 	bl	8008f6c <VL53L0X_RdDWord>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006ede:	2274      	movs	r2, #116	@ 0x74
 8006ee0:	2194      	movs	r1, #148	@ 0x94
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 ff60 	bl	8008da8 <VL53L0X_WrByte>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fc5c 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f04:	4313      	orrs	r3, r2
 8006f06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2190      	movs	r1, #144	@ 0x90
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f002 f82a 	bl	8008f6c <VL53L0X_RdDWord>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006f2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006f30:	2275      	movs	r2, #117	@ 0x75
 8006f32:	2194      	movs	r1, #148	@ 0x94
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 ff37 	bl	8008da8 <VL53L0X_WrByte>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff fc33 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	461a      	mov	r2, r3
 8006f52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006f60:	461a      	mov	r2, r3
 8006f62:	2190      	movs	r1, #144	@ 0x90
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f002 f801 	bl	8008f6c <VL53L0X_RdDWord>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006f80:	2276      	movs	r2, #118	@ 0x76
 8006f82:	2194      	movs	r1, #148	@ 0x94
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 ff0f 	bl	8008da8 <VL53L0X_WrByte>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff fc0b 	bl	80067b4 <VL53L0X_device_read_strobe>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	2190      	movs	r1, #144	@ 0x90
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 ffd9 	bl	8008f6c <VL53L0X_RdDWord>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fca:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006fcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2181      	movs	r1, #129	@ 0x81
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fee6 	bl	8008da8 <VL53L0X_WrByte>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006fea:	2206      	movs	r2, #6
 8006fec:	21ff      	movs	r1, #255	@ 0xff
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 feda 	bl	8008da8 <VL53L0X_WrByte>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007002:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8007006:	461a      	mov	r2, r3
 8007008:	2183      	movs	r1, #131	@ 0x83
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 ff4e 	bl	8008eac <VL53L0X_RdByte>
 8007010:	4603      	mov	r3, r0
 8007012:	461a      	mov	r2, r3
 8007014:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007018:	4313      	orrs	r3, r2
 800701a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800701e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007022:	f023 0304 	bic.w	r3, r3, #4
 8007026:	b2db      	uxtb	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	2183      	movs	r1, #131	@ 0x83
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 febb 	bl	8008da8 <VL53L0X_WrByte>
 8007032:	4603      	mov	r3, r0
 8007034:	461a      	mov	r2, r3
 8007036:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800703a:	4313      	orrs	r3, r2
 800703c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007040:	2201      	movs	r2, #1
 8007042:	21ff      	movs	r1, #255	@ 0xff
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 feaf 	bl	8008da8 <VL53L0X_WrByte>
 800704a:	4603      	mov	r3, r0
 800704c:	461a      	mov	r2, r3
 800704e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007052:	4313      	orrs	r3, r2
 8007054:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007058:	2201      	movs	r2, #1
 800705a:	2100      	movs	r1, #0
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fea3 	bl	8008da8 <VL53L0X_WrByte>
 8007062:	4603      	mov	r3, r0
 8007064:	461a      	mov	r2, r3
 8007066:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800706a:	4313      	orrs	r3, r2
 800706c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007070:	2200      	movs	r2, #0
 8007072:	21ff      	movs	r1, #255	@ 0xff
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 fe97 	bl	8008da8 <VL53L0X_WrByte>
 800707a:	4603      	mov	r3, r0
 800707c:	461a      	mov	r2, r3
 800707e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007082:	4313      	orrs	r3, r2
 8007084:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007088:	2200      	movs	r2, #0
 800708a:	2180      	movs	r1, #128	@ 0x80
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 fe8b 	bl	8008da8 <VL53L0X_WrByte>
 8007092:	4603      	mov	r3, r0
 8007094:	461a      	mov	r2, r3
 8007096:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800709a:	4313      	orrs	r3, r2
 800709c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80070a0:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 808f 	bne.w	80071c8 <VL53L0X_get_info_from_device+0x98e>
 80070aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80070ae:	2b07      	cmp	r3, #7
 80070b0:	f000 808a 	beq.w	80071c8 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d024      	beq.n	8007108 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80070be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80070c2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d11e      	bne.n	8007108 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 80070d0:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 80070da:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80070de:	2300      	movs	r3, #0
 80070e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070e2:	e00e      	b.n	8007102 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80070e4:	f107 0208 	add.w	r2, r7, #8
 80070e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ea:	4413      	add	r3, r2
 80070ec:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 80070f8:	460a      	mov	r2, r1
 80070fa:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80070fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070fe:	3301      	adds	r3, #1
 8007100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007104:	2b05      	cmp	r3, #5
 8007106:	dded      	ble.n	80070e4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d018      	beq.n	8007144 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007112:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007116:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800711a:	2b00      	cmp	r3, #0
 800711c:	d112      	bne.n	8007144 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800711e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007128:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	33f3      	adds	r3, #243	@ 0xf3
 8007136:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007138:	f107 0310 	add.w	r3, r7, #16
 800713c:	4619      	mov	r1, r3
 800713e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007140:	f002 f80e 	bl	8009160 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d030      	beq.n	80071b0 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800714e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007152:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007156:	2b00      	cmp	r3, #0
 8007158:	d12a      	bne.n	80071b0 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800715a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800716a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800716c:	025b      	lsls	r3, r3, #9
 800716e:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007174:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800717e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007180:	2b00      	cmp	r3, #0
 8007182:	d011      	beq.n	80071a8 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007184:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800718c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800718e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007192:	fb02 f303 	mul.w	r3, r2, r3
 8007196:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007198:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 800719c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80071a0:	425b      	negs	r3, r3
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 80071a8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80071b0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80071be:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071c8:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3760      	adds	r7, #96	@ 0x60
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80071e0:	f240 6277 	movw	r2, #1655	@ 0x677
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80071ec:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80071f0:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80071f2:	78fb      	ldrb	r3, [r7, #3]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	fb02 f303 	mul.w	r3, r2, r3
 8007200:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007202:	68bb      	ldr	r3, [r7, #8]
}
 8007204:	4618      	mov	r0, r3
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d015      	beq.n	8007256 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3b01      	subs	r3, #1
 800722e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007230:	e005      	b.n	800723e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	085b      	lsrs	r3, r3, #1
 8007236:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007238:	89fb      	ldrh	r3, [r7, #14]
 800723a:	3301      	adds	r3, #1
 800723c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2bff      	cmp	r3, #255	@ 0xff
 8007242:	d8f6      	bhi.n	8007232 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007244:	89fb      	ldrh	r3, [r7, #14]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	b29b      	uxth	r3, r3
 800724e:	b2db      	uxtb	r3, r3
 8007250:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007252:	4413      	add	r3, r2
 8007254:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007256:	8afb      	ldrh	r3, [r7, #22]

}
 8007258:	4618      	mov	r0, r3
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007276:	88fa      	ldrh	r2, [r7, #6]
 8007278:	0a12      	lsrs	r2, r2, #8
 800727a:	b292      	uxth	r2, r2
 800727c:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800727e:	3301      	adds	r3, #1
 8007280:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007282:	68fb      	ldr	r3, [r7, #12]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	4619      	mov	r1, r3
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f7ff ff94 	bl	80071d4 <VL53L0X_calc_macro_period_ps>
 80072ac:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80072b4:	4a0a      	ldr	r2, [pc, #40]	@ (80072e0 <VL53L0X_calc_timeout_mclks+0x50>)
 80072b6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ba:	099b      	lsrs	r3, r3, #6
 80072bc:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80072c4:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	441a      	add	r2, r3
	timeout_period_mclks =
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80072d6:	69fb      	ldr	r3, [r7, #28]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3720      	adds	r7, #32
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	10624dd3 	.word	0x10624dd3

080072e4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	807b      	strh	r3, [r7, #2]
 80072f0:	4613      	mov	r3, r2
 80072f2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80072f8:	787b      	ldrb	r3, [r7, #1]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff ff69 	bl	80071d4 <VL53L0X_calc_macro_period_ps>
 8007302:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800730a:	4a0a      	ldr	r2, [pc, #40]	@ (8007334 <VL53L0X_calc_timeout_us+0x50>)
 800730c:	fba2 2303 	umull	r2, r3, r2, r3
 8007310:	099b      	lsrs	r3, r3, #6
 8007312:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007314:	887b      	ldrh	r3, [r7, #2]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	fb02 f303 	mul.w	r3, r2, r3
 800731c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 8007320:	4a04      	ldr	r2, [pc, #16]	@ (8007334 <VL53L0X_calc_timeout_us+0x50>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	099b      	lsrs	r3, r3, #6
 8007328:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800732a:	697b      	ldr	r3, [r7, #20]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	10624dd3 	.word	0x10624dd3

08007338 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08c      	sub	sp, #48	@ 0x30
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	460b      	mov	r3, r1
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007346:	2300      	movs	r3, #0
 8007348:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <get_sequence_step_timeout+0x38>
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d002      	beq.n	8007370 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	2b02      	cmp	r3, #2
 800736e:	d127      	bne.n	80073c0 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007370:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8007374:	461a      	mov	r2, r3
 8007376:	2100      	movs	r1, #0
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f7fd fa5d 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007384:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007388:	2b00      	cmp	r3, #0
 800738a:	d109      	bne.n	80073a0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800738c:	f107 0320 	add.w	r3, r7, #32
 8007390:	461a      	mov	r2, r3
 8007392:	2146      	movs	r1, #70	@ 0x46
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f001 fd89 	bl	8008eac <VL53L0X_RdByte>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80073a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff ff5d 	bl	8007264 <VL53L0X_decode_timeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80073ae:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80073b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff ff94 	bl	80072e4 <VL53L0X_calc_timeout_us>
 80073bc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80073be:	e092      	b.n	80074e6 <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80073c0:	7afb      	ldrb	r3, [r7, #11]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d135      	bne.n	8007432 <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80073c6:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80073ca:	461a      	mov	r2, r3
 80073cc:	2100      	movs	r1, #0
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7fd fa32 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80073da:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f040 8081 	bne.w	80074e6 <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80073e4:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80073e8:	461a      	mov	r2, r3
 80073ea:	2100      	movs	r1, #0
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7fd fa23 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80073f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 8007400:	f107 031e 	add.w	r3, r7, #30
 8007404:	461a      	mov	r2, r3
 8007406:	2151      	movs	r1, #81	@ 0x51
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f001 fd79 	bl	8008f00 <VL53L0X_RdWord>
 800740e:	4603      	mov	r3, r0
 8007410:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007414:	8bfb      	ldrh	r3, [r7, #30]
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff ff24 	bl	8007264 <VL53L0X_decode_timeout>
 800741c:	4603      	mov	r3, r0
 800741e:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007420:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8007424:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007426:	4619      	mov	r1, r3
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f7ff ff5b 	bl	80072e4 <VL53L0X_calc_timeout_us>
 800742e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007430:	e059      	b.n	80074e6 <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	2b04      	cmp	r3, #4
 8007436:	d156      	bne.n	80074e6 <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007438:	f107 0314 	add.w	r3, r7, #20
 800743c:	4619      	mov	r1, r3
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7fd fb04 	bl	8004a4c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01d      	beq.n	800748a <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800744e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8007452:	461a      	mov	r2, r3
 8007454:	2100      	movs	r1, #0
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7fd f9ee 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007462:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10f      	bne.n	800748a <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 800746a:	f107 031e 	add.w	r3, r7, #30
 800746e:	461a      	mov	r2, r3
 8007470:	2151      	movs	r1, #81	@ 0x51
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f001 fd44 	bl	8008f00 <VL53L0X_RdWord>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800747e:	8bfb      	ldrh	r3, [r7, #30]
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff feef 	bl	8007264 <VL53L0X_decode_timeout>
 8007486:	4603      	mov	r3, r0
 8007488:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800748a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800748e:	2b00      	cmp	r3, #0
 8007490:	d109      	bne.n	80074a6 <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007492:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8007496:	461a      	mov	r2, r3
 8007498:	2101      	movs	r1, #1
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7fd f9cc 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80074a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10f      	bne.n	80074ce <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 80074ae:	f107 031c 	add.w	r3, r7, #28
 80074b2:	461a      	mov	r2, r3
 80074b4:	2171      	movs	r1, #113	@ 0x71
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f001 fd22 	bl	8008f00 <VL53L0X_RdWord>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80074c2:	8bbb      	ldrh	r3, [r7, #28]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff fecd 	bl	8007264 <VL53L0X_decode_timeout>
 80074ca:	4603      	mov	r3, r0
 80074cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80074ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80074d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80074d6:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80074da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80074dc:	4619      	mov	r1, r3
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff ff00 	bl	80072e4 <VL53L0X_calc_timeout_us>
 80074e4:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074ea:	601a      	str	r2, [r3, #0]

	return Status;
 80074ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3730      	adds	r7, #48	@ 0x30
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	@ 0x28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	460b      	mov	r3, r1
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007506:	2300      	movs	r3, #0
 8007508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <set_sequence_step_timeout+0x26>
 8007512:	7afb      	ldrb	r3, [r7, #11]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d002      	beq.n	800751e <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007518:	7afb      	ldrb	r3, [r7, #11]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d138      	bne.n	8007590 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800751e:	f107 031b 	add.w	r3, r7, #27
 8007522:	461a      	mov	r2, r3
 8007524:	2100      	movs	r1, #0
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f7fd f986 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007532:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007536:	2b00      	cmp	r3, #0
 8007538:	d11a      	bne.n	8007570 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800753a:	7efb      	ldrb	r3, [r7, #27]
 800753c:	461a      	mov	r2, r3
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff fea5 	bl	8007290 <VL53L0X_calc_timeout_mclks>
 8007546:	4603      	mov	r3, r0
 8007548:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800754a:	8bbb      	ldrh	r3, [r7, #28]
 800754c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007550:	d903      	bls.n	800755a <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007552:	23ff      	movs	r3, #255	@ 0xff
 8007554:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007558:	e004      	b.n	8007564 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800755a:	8bbb      	ldrh	r3, [r7, #28]
 800755c:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800755e:	3b01      	subs	r3, #1
 8007560:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007564:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007568:	b29a      	uxth	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007570:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007574:	2b00      	cmp	r3, #0
 8007576:	f040 80ab 	bne.w	80076d0 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800757a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800757e:	461a      	mov	r2, r3
 8007580:	2146      	movs	r1, #70	@ 0x46
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f001 fc10 	bl	8008da8 <VL53L0X_WrByte>
 8007588:	4603      	mov	r3, r0
 800758a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800758e:	e09f      	b.n	80076d0 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	2b03      	cmp	r3, #3
 8007594:	d135      	bne.n	8007602 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007596:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800759a:	2b00      	cmp	r3, #0
 800759c:	d11b      	bne.n	80075d6 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800759e:	f107 031b 	add.w	r3, r7, #27
 80075a2:	461a      	mov	r2, r3
 80075a4:	2100      	movs	r1, #0
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7fd f946 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80075b2:	7efb      	ldrb	r3, [r7, #27]
 80075b4:	461a      	mov	r2, r3
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f7ff fe69 	bl	8007290 <VL53L0X_calc_timeout_mclks>
 80075be:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80075c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80075c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff fe23 	bl	8007210 <VL53L0X_encode_timeout>
 80075ca:	4603      	mov	r3, r0
 80075cc:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80075ce:	8b3a      	ldrh	r2, [r7, #24]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80075d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d108      	bne.n	80075f0 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80075de:	8b3b      	ldrh	r3, [r7, #24]
 80075e0:	461a      	mov	r2, r3
 80075e2:	2151      	movs	r1, #81	@ 0x51
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f001 fc03 	bl	8008df0 <VL53L0X_WrWord>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80075f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d16b      	bne.n	80076d0 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8007600:	e066      	b.n	80076d0 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007602:	7afb      	ldrb	r3, [r7, #11]
 8007604:	2b04      	cmp	r3, #4
 8007606:	d160      	bne.n	80076ca <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8007608:	f107 0310 	add.w	r3, r7, #16
 800760c:	4619      	mov	r1, r3
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7fd fa1c 	bl	8004a4c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8007618:	7cfb      	ldrb	r3, [r7, #19]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01d      	beq.n	800765a <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800761e:	f107 031b 	add.w	r3, r7, #27
 8007622:	461a      	mov	r2, r3
 8007624:	2100      	movs	r1, #0
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7fd f906 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 800762c:	4603      	mov	r3, r0
 800762e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007632:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10f      	bne.n	800765a <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800763a:	f107 0318 	add.w	r3, r7, #24
 800763e:	461a      	mov	r2, r3
 8007640:	2151      	movs	r1, #81	@ 0x51
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f001 fc5c 	bl	8008f00 <VL53L0X_RdWord>
 8007648:	4603      	mov	r3, r0
 800764a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800764e:	8b3b      	ldrh	r3, [r7, #24]
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fe07 	bl	8007264 <VL53L0X_decode_timeout>
 8007656:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8007658:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800765a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800765e:	2b00      	cmp	r3, #0
 8007660:	d109      	bne.n	8007676 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007662:	f107 031b 	add.w	r3, r7, #27
 8007666:	461a      	mov	r2, r3
 8007668:	2101      	movs	r1, #1
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7fd f8e4 	bl	8004838 <VL53L0X_GetVcselPulsePeriod>
 8007670:	4603      	mov	r3, r0
 8007672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007676:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800767a:	2b00      	cmp	r3, #0
 800767c:	d128      	bne.n	80076d0 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800767e:	7efb      	ldrb	r3, [r7, #27]
 8007680:	461a      	mov	r2, r3
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff fe03 	bl	8007290 <VL53L0X_calc_timeout_mclks>
 800768a:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800768c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800768e:	6a3a      	ldr	r2, [r7, #32]
 8007690:	4413      	add	r3, r2
 8007692:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8007694:	6a38      	ldr	r0, [r7, #32]
 8007696:	f7ff fdbb 	bl	8007210 <VL53L0X_encode_timeout>
 800769a:	4603      	mov	r3, r0
 800769c:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800769e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d108      	bne.n	80076b8 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80076a6:	8bfb      	ldrh	r3, [r7, #30]
 80076a8:	461a      	mov	r2, r3
 80076aa:	2171      	movs	r1, #113	@ 0x71
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f001 fb9f 	bl	8008df0 <VL53L0X_WrWord>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80076b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d107      	bne.n	80076d0 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 80076c8:	e002      	b.n	80076d0 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076ca:	23fc      	movs	r3, #252	@ 0xfc
 80076cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 80076d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3728      	adds	r7, #40	@ 0x28
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	@ 0x28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
 80076e8:	4613      	mov	r3, r2
 80076ea:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80076f2:	230c      	movs	r3, #12
 80076f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80076f8:	2312      	movs	r3, #18
 80076fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80076fe:	2308      	movs	r3, #8
 8007700:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8007704:	230e      	movs	r3, #14
 8007706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800770e:	78bb      	ldrb	r3, [r7, #2]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800771a:	23fc      	movs	r3, #252	@ 0xfc
 800771c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007720:	e020      	b.n	8007764 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10d      	bne.n	8007744 <VL53L0X_set_vcsel_pulse_period+0x68>
 8007728:	78ba      	ldrb	r2, [r7, #2]
 800772a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800772e:	429a      	cmp	r2, r3
 8007730:	d304      	bcc.n	800773c <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8007732:	78ba      	ldrb	r2, [r7, #2]
 8007734:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007738:	429a      	cmp	r2, r3
 800773a:	d903      	bls.n	8007744 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800773c:	23fc      	movs	r3, #252	@ 0xfc
 800773e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007742:	e00f      	b.n	8007764 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d10c      	bne.n	8007764 <VL53L0X_set_vcsel_pulse_period+0x88>
 800774a:	78ba      	ldrb	r2, [r7, #2]
 800774c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007750:	429a      	cmp	r2, r3
 8007752:	d304      	bcc.n	800775e <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8007754:	78ba      	ldrb	r2, [r7, #2]
 8007756:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800775a:	429a      	cmp	r2, r3
 800775c:	d902      	bls.n	8007764 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800775e:	23fc      	movs	r3, #252	@ 0xfc
 8007760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8007764:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800776c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007770:	e237      	b.n	8007be2 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d150      	bne.n	800781a <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8007778:	78bb      	ldrb	r3, [r7, #2]
 800777a:	2b0c      	cmp	r3, #12
 800777c:	d110      	bne.n	80077a0 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800777e:	2218      	movs	r2, #24
 8007780:	2157      	movs	r1, #87	@ 0x57
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 fb10 	bl	8008da8 <VL53L0X_WrByte>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800778e:	2208      	movs	r2, #8
 8007790:	2156      	movs	r1, #86	@ 0x56
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 fb08 	bl	8008da8 <VL53L0X_WrByte>
 8007798:	4603      	mov	r3, r0
 800779a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800779e:	e17f      	b.n	8007aa0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80077a0:	78bb      	ldrb	r3, [r7, #2]
 80077a2:	2b0e      	cmp	r3, #14
 80077a4:	d110      	bne.n	80077c8 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80077a6:	2230      	movs	r2, #48	@ 0x30
 80077a8:	2157      	movs	r1, #87	@ 0x57
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 fafc 	bl	8008da8 <VL53L0X_WrByte>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80077b6:	2208      	movs	r2, #8
 80077b8:	2156      	movs	r1, #86	@ 0x56
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 faf4 	bl	8008da8 <VL53L0X_WrByte>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077c6:	e16b      	b.n	8007aa0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80077c8:	78bb      	ldrb	r3, [r7, #2]
 80077ca:	2b10      	cmp	r3, #16
 80077cc:	d110      	bne.n	80077f0 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80077ce:	2240      	movs	r2, #64	@ 0x40
 80077d0:	2157      	movs	r1, #87	@ 0x57
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 fae8 	bl	8008da8 <VL53L0X_WrByte>
 80077d8:	4603      	mov	r3, r0
 80077da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80077de:	2208      	movs	r2, #8
 80077e0:	2156      	movs	r1, #86	@ 0x56
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 fae0 	bl	8008da8 <VL53L0X_WrByte>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077ee:	e157      	b.n	8007aa0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80077f0:	78bb      	ldrb	r3, [r7, #2]
 80077f2:	2b12      	cmp	r3, #18
 80077f4:	f040 8154 	bne.w	8007aa0 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80077f8:	2250      	movs	r2, #80	@ 0x50
 80077fa:	2157      	movs	r1, #87	@ 0x57
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fad3 	bl	8008da8 <VL53L0X_WrByte>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8007808:	2208      	movs	r2, #8
 800780a:	2156      	movs	r1, #86	@ 0x56
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 facb 	bl	8008da8 <VL53L0X_WrByte>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007818:	e142      	b.n	8007aa0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	2b01      	cmp	r3, #1
 800781e:	f040 813f 	bne.w	8007aa0 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8007822:	78bb      	ldrb	r3, [r7, #2]
 8007824:	2b08      	cmp	r3, #8
 8007826:	d14c      	bne.n	80078c2 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8007828:	2210      	movs	r2, #16
 800782a:	2148      	movs	r1, #72	@ 0x48
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fabb 	bl	8008da8 <VL53L0X_WrByte>
 8007832:	4603      	mov	r3, r0
 8007834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8007838:	2208      	movs	r2, #8
 800783a:	2147      	movs	r1, #71	@ 0x47
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 fab3 	bl	8008da8 <VL53L0X_WrByte>
 8007842:	4603      	mov	r3, r0
 8007844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007848:	2202      	movs	r2, #2
 800784a:	2132      	movs	r1, #50	@ 0x32
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 faab 	bl	8008da8 <VL53L0X_WrByte>
 8007852:	4603      	mov	r3, r0
 8007854:	461a      	mov	r2, r3
 8007856:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800785a:	4313      	orrs	r3, r2
 800785c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8007860:	220c      	movs	r2, #12
 8007862:	2130      	movs	r1, #48	@ 0x30
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 fa9f 	bl	8008da8 <VL53L0X_WrByte>
 800786a:	4603      	mov	r3, r0
 800786c:	461a      	mov	r2, r3
 800786e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007872:	4313      	orrs	r3, r2
 8007874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007878:	2201      	movs	r2, #1
 800787a:	21ff      	movs	r1, #255	@ 0xff
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 fa93 	bl	8008da8 <VL53L0X_WrByte>
 8007882:	4603      	mov	r3, r0
 8007884:	461a      	mov	r2, r3
 8007886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800788a:	4313      	orrs	r3, r2
 800788c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007890:	2230      	movs	r2, #48	@ 0x30
 8007892:	2130      	movs	r1, #48	@ 0x30
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 fa87 	bl	8008da8 <VL53L0X_WrByte>
 800789a:	4603      	mov	r3, r0
 800789c:	461a      	mov	r2, r3
 800789e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80078a8:	2200      	movs	r2, #0
 80078aa:	21ff      	movs	r1, #255	@ 0xff
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 fa7b 	bl	8008da8 <VL53L0X_WrByte>
 80078b2:	4603      	mov	r3, r0
 80078b4:	461a      	mov	r2, r3
 80078b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80078c0:	e0ee      	b.n	8007aa0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80078c2:	78bb      	ldrb	r3, [r7, #2]
 80078c4:	2b0a      	cmp	r3, #10
 80078c6:	d14c      	bne.n	8007962 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80078c8:	2228      	movs	r2, #40	@ 0x28
 80078ca:	2148      	movs	r1, #72	@ 0x48
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 fa6b 	bl	8008da8 <VL53L0X_WrByte>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80078d8:	2208      	movs	r2, #8
 80078da:	2147      	movs	r1, #71	@ 0x47
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fa63 	bl	8008da8 <VL53L0X_WrByte>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80078e8:	2203      	movs	r2, #3
 80078ea:	2132      	movs	r1, #50	@ 0x32
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 fa5b 	bl	8008da8 <VL53L0X_WrByte>
 80078f2:	4603      	mov	r3, r0
 80078f4:	461a      	mov	r2, r3
 80078f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007900:	2209      	movs	r2, #9
 8007902:	2130      	movs	r1, #48	@ 0x30
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fa4f 	bl	8008da8 <VL53L0X_WrByte>
 800790a:	4603      	mov	r3, r0
 800790c:	461a      	mov	r2, r3
 800790e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007912:	4313      	orrs	r3, r2
 8007914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007918:	2201      	movs	r2, #1
 800791a:	21ff      	movs	r1, #255	@ 0xff
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fa43 	bl	8008da8 <VL53L0X_WrByte>
 8007922:	4603      	mov	r3, r0
 8007924:	461a      	mov	r2, r3
 8007926:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800792a:	4313      	orrs	r3, r2
 800792c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007930:	2220      	movs	r2, #32
 8007932:	2130      	movs	r1, #48	@ 0x30
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 fa37 	bl	8008da8 <VL53L0X_WrByte>
 800793a:	4603      	mov	r3, r0
 800793c:	461a      	mov	r2, r3
 800793e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007942:	4313      	orrs	r3, r2
 8007944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007948:	2200      	movs	r2, #0
 800794a:	21ff      	movs	r1, #255	@ 0xff
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 fa2b 	bl	8008da8 <VL53L0X_WrByte>
 8007952:	4603      	mov	r3, r0
 8007954:	461a      	mov	r2, r3
 8007956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800795a:	4313      	orrs	r3, r2
 800795c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007960:	e09e      	b.n	8007aa0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8007962:	78bb      	ldrb	r3, [r7, #2]
 8007964:	2b0c      	cmp	r3, #12
 8007966:	d14c      	bne.n	8007a02 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8007968:	2238      	movs	r2, #56	@ 0x38
 800796a:	2148      	movs	r1, #72	@ 0x48
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fa1b 	bl	8008da8 <VL53L0X_WrByte>
 8007972:	4603      	mov	r3, r0
 8007974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8007978:	2208      	movs	r2, #8
 800797a:	2147      	movs	r1, #71	@ 0x47
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 fa13 	bl	8008da8 <VL53L0X_WrByte>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007988:	2203      	movs	r2, #3
 800798a:	2132      	movs	r1, #50	@ 0x32
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 fa0b 	bl	8008da8 <VL53L0X_WrByte>
 8007992:	4603      	mov	r3, r0
 8007994:	461a      	mov	r2, r3
 8007996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800799a:	4313      	orrs	r3, r2
 800799c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80079a0:	2208      	movs	r2, #8
 80079a2:	2130      	movs	r1, #48	@ 0x30
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 f9ff 	bl	8008da8 <VL53L0X_WrByte>
 80079aa:	4603      	mov	r3, r0
 80079ac:	461a      	mov	r2, r3
 80079ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80079b8:	2201      	movs	r2, #1
 80079ba:	21ff      	movs	r1, #255	@ 0xff
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f9f3 	bl	8008da8 <VL53L0X_WrByte>
 80079c2:	4603      	mov	r3, r0
 80079c4:	461a      	mov	r2, r3
 80079c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079ca:	4313      	orrs	r3, r2
 80079cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 80079d0:	2220      	movs	r2, #32
 80079d2:	2130      	movs	r1, #48	@ 0x30
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f9e7 	bl	8008da8 <VL53L0X_WrByte>
 80079da:	4603      	mov	r3, r0
 80079dc:	461a      	mov	r2, r3
 80079de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80079e8:	2200      	movs	r2, #0
 80079ea:	21ff      	movs	r1, #255	@ 0xff
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f9db 	bl	8008da8 <VL53L0X_WrByte>
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079fa:	4313      	orrs	r3, r2
 80079fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007a00:	e04e      	b.n	8007aa0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007a02:	78bb      	ldrb	r3, [r7, #2]
 8007a04:	2b0e      	cmp	r3, #14
 8007a06:	d14b      	bne.n	8007aa0 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007a08:	2248      	movs	r2, #72	@ 0x48
 8007a0a:	2148      	movs	r1, #72	@ 0x48
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f9cb 	bl	8008da8 <VL53L0X_WrByte>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8007a18:	2208      	movs	r2, #8
 8007a1a:	2147      	movs	r1, #71	@ 0x47
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 f9c3 	bl	8008da8 <VL53L0X_WrByte>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007a28:	2203      	movs	r2, #3
 8007a2a:	2132      	movs	r1, #50	@ 0x32
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 f9bb 	bl	8008da8 <VL53L0X_WrByte>
 8007a32:	4603      	mov	r3, r0
 8007a34:	461a      	mov	r2, r3
 8007a36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007a40:	2207      	movs	r2, #7
 8007a42:	2130      	movs	r1, #48	@ 0x30
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 f9af 	bl	8008da8 <VL53L0X_WrByte>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007a58:	2201      	movs	r2, #1
 8007a5a:	21ff      	movs	r1, #255	@ 0xff
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 f9a3 	bl	8008da8 <VL53L0X_WrByte>
 8007a62:	4603      	mov	r3, r0
 8007a64:	461a      	mov	r2, r3
 8007a66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007a70:	2220      	movs	r2, #32
 8007a72:	2130      	movs	r1, #48	@ 0x30
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f997 	bl	8008da8 <VL53L0X_WrByte>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007a88:	2200      	movs	r2, #0
 8007a8a:	21ff      	movs	r1, #255	@ 0xff
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 f98b 	bl	8008da8 <VL53L0X_WrByte>
 8007a92:	4603      	mov	r3, r0
 8007a94:	461a      	mov	r2, r3
 8007a96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8007aa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d17e      	bne.n	8007ba6 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8007aa8:	78bb      	ldrb	r3, [r7, #2]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fe3b 	bl	8006726 <VL53L0X_encode_vcsel_period>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8007ab6:	78fb      	ldrb	r3, [r7, #3]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d045      	beq.n	8007b4c <VL53L0X_set_vcsel_pulse_period+0x470>
 8007ac0:	e06e      	b.n	8007ba0 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007ac2:	f107 0314 	add.w	r3, r7, #20
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	2103      	movs	r1, #3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fc34 	bl	8007338 <get_sequence_step_timeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007ad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007ade:	f107 0310 	add.w	r3, r7, #16
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	2102      	movs	r1, #2
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fc26 	bl	8007338 <get_sequence_step_timeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007af2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d109      	bne.n	8007b0e <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007afa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007afe:	461a      	mov	r2, r3
 8007b00:	2150      	movs	r1, #80	@ 0x50
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 f950 	bl	8008da8 <VL53L0X_WrByte>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007b0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d108      	bne.n	8007b28 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	2103      	movs	r1, #3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff fceb 	bl	80074f8 <set_sequence_step_timeout>
 8007b22:	4603      	mov	r3, r0
 8007b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007b28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d108      	bne.n	8007b42 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	461a      	mov	r2, r3
 8007b34:	2102      	movs	r1, #2
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fcde 	bl	80074f8 <set_sequence_step_timeout>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	78ba      	ldrb	r2, [r7, #2]
 8007b46:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007b4a:	e02c      	b.n	8007ba6 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007b4c:	f107 0318 	add.w	r3, r7, #24
 8007b50:	461a      	mov	r2, r3
 8007b52:	2104      	movs	r1, #4
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fbef 	bl	8007338 <get_sequence_step_timeout>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d109      	bne.n	8007b7c <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8007b68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	2170      	movs	r1, #112	@ 0x70
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f919 	bl	8008da8 <VL53L0X_WrByte>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007b7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d108      	bne.n	8007b96 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	461a      	mov	r2, r3
 8007b88:	2104      	movs	r1, #4
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7ff fcb4 	bl	80074f8 <set_sequence_step_timeout>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	78ba      	ldrb	r2, [r7, #2]
 8007b9a:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007b9e:	e002      	b.n	8007ba6 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ba0:	23fc      	movs	r3, #252	@ 0xfc
 8007ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007ba6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d109      	bne.n	8007bc2 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007bb4:	69f9      	ldr	r1, [r7, #28]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7fc fe00 	bl	80047bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007bc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8007bca:	f107 010f 	add.w	r1, r7, #15
 8007bce:	2301      	movs	r3, #1
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fe fcc2 	bl	800655c <VL53L0X_perform_phase_calibration>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007bde:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3728      	adds	r7, #40	@ 0x28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	607a      	str	r2, [r7, #4]
 8007bf6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d00a      	beq.n	8007c1c <VL53L0X_get_vcsel_pulse_period+0x32>
 8007c06:	e013      	b.n	8007c30 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007c08:	f107 0316 	add.w	r3, r7, #22
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2150      	movs	r1, #80	@ 0x50
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f001 f94b 	bl	8008eac <VL53L0X_RdByte>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007c1a:	e00b      	b.n	8007c34 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007c1c:	f107 0316 	add.w	r3, r7, #22
 8007c20:	461a      	mov	r2, r3
 8007c22:	2170      	movs	r1, #112	@ 0x70
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f001 f941 	bl	8008eac <VL53L0X_RdByte>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007c2e:	e001      	b.n	8007c34 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c30:	23fc      	movs	r3, #252	@ 0xfc
 8007c32:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d107      	bne.n	8007c4c <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007c3c:	7dbb      	ldrb	r3, [r7, #22]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe fd5e 	bl	8006700 <VL53L0X_decode_vcsel_period>
 8007c44:	4603      	mov	r3, r0
 8007c46:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	701a      	strb	r2, [r3, #0]

	return Status;
 8007c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b092      	sub	sp, #72	@ 0x48
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c62:	2300      	movs	r3, #0
 8007c64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007c68:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8007c6c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007c6e:	f240 7376 	movw	r3, #1910	@ 0x776
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8007c74:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8007c78:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007c7a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007c7e:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8007c80:	f240 234e 	movw	r3, #590	@ 0x24e
 8007c84:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8007c86:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8007c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007c8c:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007c90:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007c92:	f240 2326 	movw	r3, #550	@ 0x226
 8007c96:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8007c9c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8007ca0:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d205      	bcs.n	8007cba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007cae:	23fc      	movs	r3, #252	@ 0xfc
 8007cb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 8007cb4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007cb8:	e0aa      	b.n	8007e10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007cba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbe:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007cc6:	f107 0314 	add.w	r3, r7, #20
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7fc febd 	bl	8004a4c <VL53L0X_GetSequenceStepEnables>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8007cd8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d15b      	bne.n	8007d98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007ce0:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d105      	bne.n	8007cf2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8007ce6:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d102      	bne.n	8007cf2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8007cec:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d052      	beq.n	8007d98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007cf2:	f107 0310 	add.w	r3, r7, #16
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fb1c 	bl	8007338 <get_sequence_step_timeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8007d06:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007d0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007d12:	e07d      	b.n	8007e10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007d14:	7d3b      	ldrb	r3, [r7, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00f      	beq.n	8007d3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007d1a:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007d1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d1e:	4413      	add	r3, r2
 8007d20:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d204      	bcs.n	8007d34 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007d2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d32:	e002      	b.n	8007d3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007d34:	23fc      	movs	r3, #252	@ 0xfc
 8007d36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007d3a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8007d42:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007d46:	e063      	b.n	8007e10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8007d48:	7dbb      	ldrb	r3, [r7, #22]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d011      	beq.n	8007d72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d52:	4413      	add	r3, r2
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007d58:	69fa      	ldr	r2, [r7, #28]
 8007d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d204      	bcs.n	8007d6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007d60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d68:	e016      	b.n	8007d98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007d6a:	23fc      	movs	r3, #252	@ 0xfc
 8007d6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007d70:	e012      	b.n	8007d98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007d72:	7d7b      	ldrb	r3, [r7, #21]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00f      	beq.n	8007d98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d7c:	4413      	add	r3, r2
 8007d7e:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d204      	bcs.n	8007d92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007d88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d90:	e002      	b.n	8007d98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007d92:	23fc      	movs	r3, #252	@ 0xfc
 8007d94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007d98:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007da0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007da4:	e034      	b.n	8007e10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d019      	beq.n	8007de0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007dac:	f107 030c 	add.w	r3, r7, #12
 8007db0:	461a      	mov	r2, r3
 8007db2:	2103      	movs	r1, #3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff fabf 	bl	8007338 <get_sequence_step_timeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dc4:	4413      	add	r3, r2
 8007dc6:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d204      	bcs.n	8007dda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007dd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dd8:	e002      	b.n	8007de0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007dda:	23fc      	movs	r3, #252	@ 0xfc
 8007ddc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007de0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d111      	bne.n	8007e0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8007de8:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00e      	beq.n	8007e0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007dee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8007df6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007df8:	2104      	movs	r1, #4
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff fb7c 	bl	80074f8 <set_sequence_step_timeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007e0c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3748      	adds	r7, #72	@ 0x48
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b090      	sub	sp, #64	@ 0x40
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007e28:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8007e2c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007e2e:	f240 7376 	movw	r3, #1910	@ 0x776
 8007e32:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007e34:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8007e38:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007e3a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007e3e:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007e40:	f240 234e 	movw	r3, #590	@ 0x24e
 8007e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8007e46:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8007e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007e4c:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007e50:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007e52:	f240 2326 	movw	r3, #550	@ 0x226
 8007e56:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007e5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e60:	441a      	add	r2, r3
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007e66:	f107 0318 	add.w	r3, r7, #24
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fc fded 	bl	8004a4c <VL53L0X_GetSequenceStepEnables>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8007e78:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007e80:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e84:	e075      	b.n	8007f72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8007e86:	7e3b      	ldrb	r3, [r7, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d105      	bne.n	8007e98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007e8c:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d102      	bne.n	8007e98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007e92:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d030      	beq.n	8007efa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8007e98:	f107 0310 	add.w	r3, r7, #16
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	2102      	movs	r1, #2
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff fa49 	bl	8007338 <get_sequence_step_timeout>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007eac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d122      	bne.n	8007efa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8007eb4:	7e3b      	ldrb	r3, [r7, #24]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d007      	beq.n	8007eca <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007ebe:	6939      	ldr	r1, [r7, #16]
 8007ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007ec4:	441a      	add	r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007eca:	7ebb      	ldrb	r3, [r7, #26]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d009      	beq.n	8007ee4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007ed4:	6939      	ldr	r1, [r7, #16]
 8007ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed8:	440b      	add	r3, r1
 8007eda:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007edc:	441a      	add	r2, r3
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e00a      	b.n	8007efa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007ee4:	7e7b      	ldrb	r3, [r7, #25]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007eee:	6939      	ldr	r1, [r7, #16]
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007ef4:	441a      	add	r2, r3
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007efa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d114      	bne.n	8007f2c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007f02:	7efb      	ldrb	r3, [r7, #27]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d011      	beq.n	8007f2c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8007f08:	f107 030c 	add.w	r3, r7, #12
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	2103      	movs	r1, #3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff fa11 	bl	8007338 <get_sequence_step_timeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007f20:	68f9      	ldr	r1, [r7, #12]
 8007f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f24:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007f26:	441a      	add	r2, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d114      	bne.n	8007f5e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007f34:	7f3b      	ldrb	r3, [r7, #28]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d011      	beq.n	8007f5e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007f3a:	f107 0314 	add.w	r3, r7, #20
 8007f3e:	461a      	mov	r2, r3
 8007f40:	2104      	movs	r1, #4
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff f9f8 	bl	8007338 <get_sequence_step_timeout>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007f52:	6979      	ldr	r1, [r7, #20]
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007f58:	441a      	add	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d103      	bne.n	8007f6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3740      	adds	r7, #64	@ 0x40
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f86:	2300      	movs	r3, #0
 8007f88:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007f8e:	e0c6      	b.n	800811e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	4413      	add	r3, r2
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	74fb      	strb	r3, [r7, #19]
		Index++;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007fa0:	7cfb      	ldrb	r3, [r7, #19]
 8007fa2:	2bff      	cmp	r3, #255	@ 0xff
 8007fa4:	f040 808d 	bne.w	80080c2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	4413      	add	r3, r2
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	747b      	strb	r3, [r7, #17]
			Index++;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007fb8:	7c7b      	ldrb	r3, [r7, #17]
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d87e      	bhi.n	80080bc <VL53L0X_load_tuning_settings+0x140>
 8007fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc4 <VL53L0X_load_tuning_settings+0x48>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007fd5 	.word	0x08007fd5
 8007fc8:	0800800f 	.word	0x0800800f
 8007fcc:	08008049 	.word	0x08008049
 8007fd0:	08008083 	.word	0x08008083
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	4413      	add	r3, r2
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	743b      	strb	r3, [r7, #16]
				Index++;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	4413      	add	r3, r2
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007ff4:	7c3b      	ldrb	r3, [r7, #16]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	4413      	add	r3, r2
 8008002:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	89ba      	ldrh	r2, [r7, #12]
 8008008:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800800c:	e087      	b.n	800811e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	4413      	add	r3, r2
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	743b      	strb	r3, [r7, #16]
				Index++;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	3301      	adds	r3, #1
 800801c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	4413      	add	r3, r2
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	3301      	adds	r3, #1
 800802c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800802e:	7c3b      	ldrb	r3, [r7, #16]
 8008030:	b29b      	uxth	r3, r3
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	b29a      	uxth	r2, r3
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	b29b      	uxth	r3, r3
 800803a:	4413      	add	r3, r2
 800803c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	89ba      	ldrh	r2, [r7, #12]
 8008042:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 8008046:	e06a      	b.n	800811e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	4413      	add	r3, r2
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	743b      	strb	r3, [r7, #16]
				Index++;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	3301      	adds	r3, #1
 8008056:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	4413      	add	r3, r2
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	3301      	adds	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008068:	7c3b      	ldrb	r3, [r7, #16]
 800806a:	b29b      	uxth	r3, r3
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	b29a      	uxth	r2, r3
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	b29b      	uxth	r3, r3
 8008074:	4413      	add	r3, r2
 8008076:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	89ba      	ldrh	r2, [r7, #12]
 800807c:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 8008080:	e04d      	b.n	800811e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	4413      	add	r3, r2
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	743b      	strb	r3, [r7, #16]
				Index++;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	3301      	adds	r3, #1
 8008090:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	4413      	add	r3, r2
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	3301      	adds	r3, #1
 80080a0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80080a2:	7c3b      	ldrb	r3, [r7, #16]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	021b      	lsls	r3, r3, #8
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	4413      	add	r3, r2
 80080b0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	89ba      	ldrh	r2, [r7, #12]
 80080b6:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 80080ba:	e030      	b.n	800811e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080bc:	23fc      	movs	r3, #252	@ 0xfc
 80080be:	77fb      	strb	r3, [r7, #31]
 80080c0:	e02d      	b.n	800811e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80080c2:	7cfb      	ldrb	r3, [r7, #19]
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d828      	bhi.n	800811a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	4413      	add	r3, r2
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	74bb      	strb	r3, [r7, #18]
			Index++;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	3301      	adds	r3, #1
 80080d6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80080d8:	2300      	movs	r3, #0
 80080da:	61bb      	str	r3, [r7, #24]
 80080dc:	e00f      	b.n	80080fe <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	4413      	add	r3, r2
 80080e4:	7819      	ldrb	r1, [r3, #0]
 80080e6:	f107 0208 	add.w	r2, r7, #8
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	4413      	add	r3, r2
 80080ee:	460a      	mov	r2, r1
 80080f0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	3301      	adds	r3, #1
 80080f6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	3301      	adds	r3, #1
 80080fc:	61bb      	str	r3, [r7, #24]
 80080fe:	7cfb      	ldrb	r3, [r7, #19]
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	429a      	cmp	r2, r3
 8008104:	dbeb      	blt.n	80080de <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008106:	7cfb      	ldrb	r3, [r7, #19]
 8008108:	f107 0208 	add.w	r2, r7, #8
 800810c:	7cb9      	ldrb	r1, [r7, #18]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fdee 	bl	8008cf0 <VL53L0X_WriteMulti>
 8008114:	4603      	mov	r3, r0
 8008116:	77fb      	strb	r3, [r7, #31]
 8008118:	e001      	b.n	800811e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800811a:	23fc      	movs	r3, #252	@ 0xfc
 800811c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	4413      	add	r3, r2
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <VL53L0X_load_tuning_settings+0x1b8>
 800812a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f43f af2e 	beq.w	8007f90 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008134:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3720      	adds	r7, #32
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800814c:	2300      	movs	r3, #0
 800814e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008156:	f107 0313 	add.w	r3, r7, #19
 800815a:	4619      	mov	r1, r3
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7fc fd01 	bl	8004b64 <VL53L0X_GetXTalkCompensationEnable>
 8008162:	4603      	mov	r3, r0
 8008164:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008166:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d111      	bne.n	8008192 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800816e:	7cfb      	ldrb	r3, [r7, #19]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00e      	beq.n	8008192 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	8a9b      	ldrh	r3, [r3, #20]
 800817e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	fb02 f303 	mul.w	r3, r2, r3
 8008186:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	3380      	adds	r3, #128	@ 0x80
 800818c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008192:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3720      	adds	r7, #32
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80081b6:	f107 0310 	add.w	r3, r7, #16
 80081ba:	461a      	mov	r2, r3
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f7ff ffbe 	bl	8008140 <VL53L0X_get_total_xtalk_rate>
 80081c4:	4603      	mov	r3, r0
 80081c6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80081c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d105      	bne.n	80081dc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	441a      	add	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	601a      	str	r2, [r3, #0]

	return Status;
 80081dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b09a      	sub	sp, #104	@ 0x68
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80081f6:	2312      	movs	r3, #18
 80081f8:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80081fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80081fe:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008200:	2342      	movs	r3, #66	@ 0x42
 8008202:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008204:	2306      	movs	r3, #6
 8008206:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008208:	2307      	movs	r3, #7
 800820a:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800820c:	2300      	movs	r3, #0
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 8008218:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8008220:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8008222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008224:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008226:	fb02 f303 	mul.w	r3, r2, r3
 800822a:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800822c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800822e:	3380      	adds	r3, #128	@ 0x80
 8008230:	0a1b      	lsrs	r3, r3, #8
 8008232:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008236:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008238:	fb02 f303 	mul.w	r3, r2, r3
 800823c:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01a      	beq.n	800827e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	029b      	lsls	r3, r3, #10
 800824c:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8008252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008254:	4413      	add	r3, r2
 8008256:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008258:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008260:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8008262:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008264:	4613      	mov	r3, r2
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4413      	add	r3, r2
 800826a:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800826c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800826e:	fb03 f303 	mul.w	r3, r3, r3
 8008272:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8008274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008276:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800827a:	0c1b      	lsrs	r3, r3, #16
 800827c:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008282:	fb02 f303 	mul.w	r3, r2, r3
 8008286:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800828e:	0c1b      	lsrs	r3, r3, #16
 8008290:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8008292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008294:	fb03 f303 	mul.w	r3, r3, r3
 8008298:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800829a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800829c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80082a0:	0c1b      	lsrs	r3, r3, #16
 80082a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80082a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082a6:	085a      	lsrs	r2, r3, #1
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	441a      	add	r2, r3
 80082ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b2:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082b8:	fb02 f303 	mul.w	r3, r2, r3
 80082bc:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80082be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082c4:	d302      	bcc.n	80082cc <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80082c6:	4b54      	ldr	r3, [pc, #336]	@ (8008418 <VL53L0X_calc_dmax+0x230>)
 80082c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80082ca:	e015      	b.n	80082f8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80082cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ce:	085a      	lsrs	r2, r3, #1
 80082d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082d2:	441a      	add	r2, r3
 80082d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082da:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80082dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082e0:	fb02 f303 	mul.w	r3, r2, r3
 80082e4:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80082e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082e8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80082ec:	0c1b      	lsrs	r3, r3, #16
 80082ee:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80082f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082f2:	fb03 f303 	mul.w	r3, r3, r3
 80082f6:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80082f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082fa:	039b      	lsls	r3, r3, #14
 80082fc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008300:	4a46      	ldr	r2, [pc, #280]	@ (800841c <VL53L0X_calc_dmax+0x234>)
 8008302:	fba2 2303 	umull	r2, r3, r2, r3
 8008306:	099b      	lsrs	r3, r3, #6
 8008308:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	fb03 f303 	mul.w	r3, r3, r3
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008314:	fb03 f303 	mul.w	r3, r3, r3
 8008318:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	3308      	adds	r3, #8
 800831e:	091b      	lsrs	r3, r3, #4
 8008320:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800832a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800832c:	4613      	mov	r3, r2
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	4413      	add	r3, r2
 8008332:	011b      	lsls	r3, r3, #4
 8008334:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800833c:	0b9b      	lsrs	r3, r3, #14
 800833e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008344:	4413      	add	r3, r2
 8008346:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800834a:	085b      	lsrs	r3, r3, #1
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	4413      	add	r3, r2
 8008350:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008356:	fbb2 f3f3 	udiv	r3, r2, r3
 800835a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	039b      	lsls	r3, r3, #14
 8008360:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	085b      	lsrs	r3, r3, #1
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	4413      	add	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	fbb2 f3f3 	udiv	r3, r2, r3
 8008374:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800837a:	fb02 f303 	mul.w	r3, r2, r3
 800837e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008386:	4a25      	ldr	r2, [pc, #148]	@ (800841c <VL53L0X_calc_dmax+0x234>)
 8008388:	fba2 2303 	umull	r2, r3, r2, r3
 800838c:	099b      	lsrs	r3, r3, #6
 800838e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800839c:	4a1f      	ldr	r2, [pc, #124]	@ (800841c <VL53L0X_calc_dmax+0x234>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	099b      	lsrs	r3, r3, #6
 80083a4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80083a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083a8:	3380      	adds	r3, #128	@ 0x80
 80083aa:	0a1b      	lsrs	r3, r3, #8
 80083ac:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d008      	beq.n	80083c6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	085a      	lsrs	r2, r3, #1
 80083b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ba:	441a      	add	r2, r3
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083c4:	e001      	b.n	80083ca <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80083ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80083cc:	f7fe f9be 	bl	800674c <VL53L0X_isqrt>
 80083d0:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d008      	beq.n	80083ea <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	085a      	lsrs	r2, r3, #1
 80083dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083de:	441a      	add	r2, r3
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083e8:	e001      	b.n	80083ee <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80083ee:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80083f0:	f7fe f9ac 	bl	800674c <VL53L0X_isqrt>
 80083f4:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 80083f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008400:	429a      	cmp	r2, r3
 8008402:	d902      	bls.n	800840a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8008404:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008406:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008408:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800840a:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800840e:	4618      	mov	r0, r3
 8008410:	3768      	adds	r7, #104	@ 0x68
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	fff00000 	.word	0xfff00000
 800841c:	10624dd3 	.word	0x10624dd3

08008420 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b0b4      	sub	sp, #208	@ 0xd0
 8008424:	af04      	add	r7, sp, #16
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
 800842c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800842e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8008432:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008436:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800843a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800843e:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 8008442:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008446:	f241 235c 	movw	r3, #4700	@ 0x125c
 800844a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800844e:	4b9e      	ldr	r3, [pc, #632]	@ (80086c8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008454:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008458:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800845a:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800845e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008462:	fbb2 f3f3 	udiv	r3, r2, r3
 8008466:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008468:	4b98      	ldr	r3, [pc, #608]	@ (80086cc <VL53L0X_calc_sigma_estimate+0x2ac>)
 800846a:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800846c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008470:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008472:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8008476:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008478:	f240 6377 	movw	r3, #1655	@ 0x677
 800847c:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800847e:	2300      	movs	r3, #0
 8008480:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008492:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008496:	0c1b      	lsrs	r3, r3, #16
 8008498:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80084a0:	f107 0310 	add.w	r3, r7, #16
 80084a4:	461a      	mov	r2, r3
 80084a6:	68b9      	ldr	r1, [r7, #8]
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7ff fe78 	bl	800819e <VL53L0X_get_total_signal_rate>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80084b4:	f107 0314 	add.w	r3, r7, #20
 80084b8:	461a      	mov	r2, r3
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f7ff fe3f 	bl	8008140 <VL53L0X_get_total_xtalk_rate>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
 80084d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80084d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084d6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80084da:	0c1b      	lsrs	r3, r3, #16
 80084dc:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80084e4:	fb02 f303 	mul.w	r3, r2, r3
 80084e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80084ec:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80084f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d902      	bls.n	80084fc <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80084f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80084fc:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8008500:	2b00      	cmp	r3, #0
 8008502:	d168      	bne.n	80085d6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800850a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8008514:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008518:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800851c:	461a      	mov	r2, r3
 800851e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7fe feb4 	bl	8007290 <VL53L0X_calc_timeout_mclks>
 8008528:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800853a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800853e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8008542:	461a      	mov	r2, r3
 8008544:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f7fe fea1 	bl	8007290 <VL53L0X_calc_timeout_mclks>
 800854e:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008550:	2303      	movs	r3, #3
 8008552:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 8008556:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800855a:	2b08      	cmp	r3, #8
 800855c:	d102      	bne.n	8008564 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800855e:	2302      	movs	r3, #2
 8008560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008564:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008568:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800856a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800856e:	fb02 f303 	mul.w	r3, r2, r3
 8008572:	02db      	lsls	r3, r3, #11
 8008574:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008578:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800857c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008580:	4a53      	ldr	r2, [pc, #332]	@ (80086d0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008582:	fba2 2303 	umull	r2, r3, r2, r3
 8008586:	099b      	lsrs	r3, r3, #6
 8008588:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800858c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008590:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008592:	fb02 f303 	mul.w	r3, r2, r3
 8008596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800859a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800859e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80085a2:	4a4b      	ldr	r2, [pc, #300]	@ (80086d0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80085a4:	fba2 2303 	umull	r2, r3, r2, r3
 80085a8:	099b      	lsrs	r3, r3, #6
 80085aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	3380      	adds	r3, #128	@ 0x80
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80085bc:	fb02 f303 	mul.w	r3, r2, r3
 80085c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80085c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80085c8:	3380      	adds	r3, #128	@ 0x80
 80085ca:	0a1b      	lsrs	r3, r3, #8
 80085cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	021b      	lsls	r3, r3, #8
 80085d4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80085d6:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80085de:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80085e2:	e15e      	b.n	80088a2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 80085e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10c      	bne.n	8008604 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80085f0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80085f8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	e14c      	b.n	800889e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008604:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800860c:	2301      	movs	r3, #1
 800860e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008612:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008616:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800861a:	041a      	lsls	r2, r3, #16
 800861c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800861e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008626:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800862a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800862c:	429a      	cmp	r2, r3
 800862e:	d902      	bls.n	8008636 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008636:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800863a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800863e:	fb02 f303 	mul.w	r3, r2, r3
 8008642:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8008646:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800864a:	4613      	mov	r3, r2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe f87a 	bl	800674c <VL53L0X_isqrt>
 8008658:	4603      	mov	r3, r0
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	891b      	ldrh	r3, [r3, #8]
 8008662:	461a      	mov	r2, r3
 8008664:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008666:	fb02 f303 	mul.w	r3, r2, r3
 800866a:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800866c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800866e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008670:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008674:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008676:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008678:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800867c:	4a14      	ldr	r2, [pc, #80]	@ (80086d0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800867e:	fba2 2303 	umull	r2, r3, r2, r3
 8008682:	099b      	lsrs	r3, r3, #6
 8008684:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8008686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008688:	041b      	lsls	r3, r3, #16
 800868a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800868e:	4a10      	ldr	r2, [pc, #64]	@ (80086d0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008690:	fba2 2303 	umull	r2, r3, r2, r3
 8008694:	099b      	lsrs	r3, r3, #6
 8008696:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800869e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80086a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	bfb8      	it	lt
 80086aa:	425b      	neglt	r3, r3
 80086ac:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80086ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b0:	021b      	lsls	r3, r3, #8
 80086b2:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	7e1b      	ldrb	r3, [r3, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00b      	beq.n	80086d4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80086bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80086c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086c4:	e033      	b.n	800872e <VL53L0X_calc_sigma_estimate+0x30e>
 80086c6:	bf00      	nop
 80086c8:	028f87ae 	.word	0x028f87ae
 80086cc:	0006999a 	.word	0x0006999a
 80086d0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80086d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086da:	fbb2 f3f3 	udiv	r3, r2, r3
 80086de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80086e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e4:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80086e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ec:	fb02 f303 	mul.w	r3, r2, r3
 80086f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80086f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80086f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086fa:	4413      	add	r3, r2
 80086fc:	0c1b      	lsrs	r3, r3, #16
 80086fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008706:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800870a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800870e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008712:	085b      	lsrs	r3, r3, #1
 8008714:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800871c:	fb03 f303 	mul.w	r3, r3, r3
 8008720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008728:	0b9b      	lsrs	r3, r3, #14
 800872a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800872e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008734:	fb02 f303 	mul.w	r3, r2, r3
 8008738:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800873a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8008740:	0c1b      	lsrs	r3, r3, #16
 8008742:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008746:	fb03 f303 	mul.w	r3, r3, r3
 800874a:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 800874c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008750:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008754:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8008758:	0c1b      	lsrs	r3, r3, #16
 800875a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800875c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875e:	fb03 f303 	mul.w	r3, r3, r3
 8008762:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008768:	4413      	add	r3, r2
 800876a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800876c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800876e:	f7fd ffed 	bl	800674c <VL53L0X_isqrt>
 8008772:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008776:	041b      	lsls	r3, r3, #16
 8008778:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800877a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877c:	3332      	adds	r3, #50	@ 0x32
 800877e:	4a4b      	ldr	r2, [pc, #300]	@ (80088ac <VL53L0X_calc_sigma_estimate+0x48c>)
 8008780:	fba2 2303 	umull	r2, r3, r2, r3
 8008784:	095a      	lsrs	r2, r3, #5
 8008786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008788:	fbb2 f3f3 	udiv	r3, r2, r3
 800878c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008794:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 8008798:	fb02 f303 	mul.w	r3, r2, r3
 800879c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80087a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087a4:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80087a8:	3308      	adds	r3, #8
 80087aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 80087ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087b2:	4a3f      	ldr	r2, [pc, #252]	@ (80088b0 <VL53L0X_calc_sigma_estimate+0x490>)
 80087b4:	fba2 2303 	umull	r2, r3, r2, r3
 80087b8:	0b5b      	lsrs	r3, r3, #13
 80087ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80087be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80087c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d902      	bls.n	80087ce <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80087c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80087ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80087d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80087dc:	4a35      	ldr	r2, [pc, #212]	@ (80088b4 <VL53L0X_calc_sigma_estimate+0x494>)
 80087de:	fba2 2303 	umull	r2, r3, r2, r3
 80087e2:	099b      	lsrs	r3, r3, #6
 80087e4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80087ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087ee:	441a      	add	r2, r3
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fd ffa8 	bl	800674c <VL53L0X_isqrt>
 80087fc:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800880a:	4a2a      	ldr	r2, [pc, #168]	@ (80088b4 <VL53L0X_calc_sigma_estimate+0x494>)
 800880c:	fba2 2303 	umull	r2, r3, r2, r3
 8008810:	099b      	lsrs	r3, r3, #6
 8008812:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008818:	fb03 f303 	mul.w	r3, r3, r3
 800881c:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	fb03 f303 	mul.w	r3, r3, r3
 8008824:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882a:	4413      	add	r3, r2
 800882c:	4618      	mov	r0, r3
 800882e:	f7fd ff8d 	bl	800674c <VL53L0X_isqrt>
 8008832:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800883a:	fb02 f303 	mul.w	r3, r2, r3
 800883e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <VL53L0X_calc_sigma_estimate+0x43c>
 8008848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <VL53L0X_calc_sigma_estimate+0x43c>
 8008850:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8008854:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008858:	429a      	cmp	r2, r3
 800885a:	d903      	bls.n	8008864 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800885c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008860:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800886a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 8008876:	6939      	ldr	r1, [r7, #16]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008880:	9302      	str	r3, [sp, #8]
 8008882:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008890:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff fca8 	bl	80081e8 <VL53L0X_calc_dmax>
 8008898:	4603      	mov	r3, r0
 800889a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800889e:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	37c0      	adds	r7, #192	@ 0xc0
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	51eb851f 	.word	0x51eb851f
 80088b0:	d1b71759 	.word	0xd1b71759
 80088b4:	10624dd3 	.word	0x10624dd3

080088b8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b090      	sub	sp, #64	@ 0x40
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	461a      	mov	r2, r3
 80088c4:	460b      	mov	r3, r1
 80088c6:	72fb      	strb	r3, [r7, #11]
 80088c8:	4613      	mov	r3, r2
 80088ca:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800890a:	7afb      	ldrb	r3, [r7, #11]
 800890c:	10db      	asrs	r3, r3, #3
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008918:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800891c:	2b00      	cmp	r3, #0
 800891e:	d017      	beq.n	8008950 <VL53L0X_get_pal_range_status+0x98>
 8008920:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008924:	2b05      	cmp	r3, #5
 8008926:	d013      	beq.n	8008950 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008928:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800892c:	2b07      	cmp	r3, #7
 800892e:	d00f      	beq.n	8008950 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008930:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008934:	2b0c      	cmp	r3, #12
 8008936:	d00b      	beq.n	8008950 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008938:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800893c:	2b0d      	cmp	r3, #13
 800893e:	d007      	beq.n	8008950 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008940:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008944:	2b0e      	cmp	r3, #14
 8008946:	d003      	beq.n	8008950 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008948:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800894c:	2b0f      	cmp	r3, #15
 800894e:	d103      	bne.n	8008958 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008950:	2301      	movs	r3, #1
 8008952:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8008956:	e002      	b.n	800895e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800895e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008962:	2b00      	cmp	r3, #0
 8008964:	d109      	bne.n	800897a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008966:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800896a:	461a      	mov	r2, r3
 800896c:	2100      	movs	r1, #0
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f7fc f9cc 	bl	8004d0c <VL53L0X_GetLimitCheckEnable>
 8008974:	4603      	mov	r3, r0
 8008976:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800897a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800897e:	2b00      	cmp	r3, #0
 8008980:	d02e      	beq.n	80089e0 <VL53L0X_get_pal_range_status+0x128>
 8008982:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008986:	2b00      	cmp	r3, #0
 8008988:	d12a      	bne.n	80089e0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800898a:	f107 0310 	add.w	r3, r7, #16
 800898e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8008992:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7ff fd43 	bl	8008420 <VL53L0X_calc_sigma_estimate>
 800899a:	4603      	mov	r3, r0
 800899c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80089a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d103      	bne.n	80089b0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089ae:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80089b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d113      	bne.n	80089e0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80089b8:	f107 0320 	add.w	r3, r7, #32
 80089bc:	461a      	mov	r2, r3
 80089be:	2100      	movs	r1, #0
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f7fc fa29 	bl	8004e18 <VL53L0X_GetLimitCheckValue>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d006      	beq.n	80089e0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80089d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089d4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d902      	bls.n	80089e0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80089da:	2301      	movs	r3, #1
 80089dc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80089e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d109      	bne.n	80089fc <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80089e8:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 80089ec:	461a      	mov	r2, r3
 80089ee:	2102      	movs	r1, #2
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f7fc f98b 	bl	8004d0c <VL53L0X_GetLimitCheckEnable>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80089fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d044      	beq.n	8008a8e <VL53L0X_get_pal_range_status+0x1d6>
 8008a04:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d140      	bne.n	8008a8e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008a0c:	f107 031c 	add.w	r3, r7, #28
 8008a10:	461a      	mov	r2, r3
 8008a12:	2102      	movs	r1, #2
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f7fc f9ff 	bl	8004e18 <VL53L0X_GetLimitCheckValue>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008a20:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d107      	bne.n	8008a38 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008a28:	2201      	movs	r2, #1
 8008a2a:	21ff      	movs	r1, #255	@ 0xff
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f9bb 	bl	8008da8 <VL53L0X_WrByte>
 8008a32:	4603      	mov	r3, r0
 8008a34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008a38:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d109      	bne.n	8008a54 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008a40:	f107 0316 	add.w	r3, r7, #22
 8008a44:	461a      	mov	r2, r3
 8008a46:	21b6      	movs	r1, #182	@ 0xb6
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 fa59 	bl	8008f00 <VL53L0X_RdWord>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008a54:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d107      	bne.n	8008a6c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	21ff      	movs	r1, #255	@ 0xff
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f9a1 	bl	8008da8 <VL53L0X_WrByte>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008a6c:	8afb      	ldrh	r3, [r7, #22]
 8008a6e:	025b      	lsls	r3, r3, #9
 8008a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a76:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d006      	beq.n	8008a8e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008a80:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d902      	bls.n	8008a8e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008a8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d109      	bne.n	8008aaa <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008a96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	2103      	movs	r1, #3
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f7fc f934 	bl	8004d0c <VL53L0X_GetLimitCheckEnable>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008aaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d023      	beq.n	8008afa <VL53L0X_get_pal_range_status+0x242>
 8008ab2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d11f      	bne.n	8008afa <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008aba:	893b      	ldrh	r3, [r7, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ac4:	e005      	b.n	8008ad2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	021a      	lsls	r2, r3, #8
 8008aca:	893b      	ldrh	r3, [r7, #8]
 8008acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad0:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008ad2:	f107 0318 	add.w	r3, r7, #24
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	2103      	movs	r1, #3
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7fc f99c 	bl	8004e18 <VL53L0X_GetLimitCheckValue>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d006      	beq.n	8008afa <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008aec:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008aee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d202      	bcs.n	8008afa <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008afa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d14a      	bne.n	8008b98 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008b02:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d103      	bne.n	8008b12 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0c:	22ff      	movs	r2, #255	@ 0xff
 8008b0e:	701a      	strb	r2, [r3, #0]
 8008b10:	e042      	b.n	8008b98 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008b12:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d007      	beq.n	8008b2a <VL53L0X_get_pal_range_status+0x272>
 8008b1a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d003      	beq.n	8008b2a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008b22:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d103      	bne.n	8008b32 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b2c:	2205      	movs	r2, #5
 8008b2e:	701a      	strb	r2, [r3, #0]
 8008b30:	e032      	b.n	8008b98 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008b32:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b36:	2b06      	cmp	r3, #6
 8008b38:	d003      	beq.n	8008b42 <VL53L0X_get_pal_range_status+0x28a>
 8008b3a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b3e:	2b09      	cmp	r3, #9
 8008b40:	d103      	bne.n	8008b4a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b44:	2204      	movs	r2, #4
 8008b46:	701a      	strb	r2, [r3, #0]
 8008b48:	e026      	b.n	8008b98 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008b4a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b4e:	2b08      	cmp	r3, #8
 8008b50:	d007      	beq.n	8008b62 <VL53L0X_get_pal_range_status+0x2aa>
 8008b52:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b56:	2b0a      	cmp	r3, #10
 8008b58:	d003      	beq.n	8008b62 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8008b5a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d103      	bne.n	8008b6a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b64:	2203      	movs	r2, #3
 8008b66:	701a      	strb	r2, [r3, #0]
 8008b68:	e016      	b.n	8008b98 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8008b6a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d003      	beq.n	8008b7a <VL53L0X_get_pal_range_status+0x2c2>
 8008b72:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d103      	bne.n	8008b82 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8008b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	701a      	strb	r2, [r3, #0]
 8008b80:	e00a      	b.n	8008b98 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8008b82:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d103      	bne.n	8008b92 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8008b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	e002      	b.n	8008b98 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8008b98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8008ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008ba6:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8008baa:	461a      	mov	r2, r3
 8008bac:	2101      	movs	r1, #1
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f7fc f8ac 	bl	8004d0c <VL53L0X_GetLimitCheckEnable>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008bba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d14f      	bne.n	8008c62 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <VL53L0X_get_pal_range_status+0x31a>
 8008bca:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d103      	bne.n	8008bda <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008bd8:	e002      	b.n	8008be0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008be6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008bea:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d003      	beq.n	8008bfa <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008bf2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d103      	bne.n	8008c02 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008c00:	e002      	b.n	8008c08 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008c0e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008c12:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <VL53L0X_get_pal_range_status+0x36a>
 8008c1a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d103      	bne.n	8008c2a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008c22:	2301      	movs	r3, #1
 8008c24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008c28:	e002      	b.n	8008c30 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008c36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <VL53L0X_get_pal_range_status+0x392>
 8008c42:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d103      	bne.n	8008c52 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008c50:	e002      	b.n	8008c58 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008c5e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c62:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3740      	adds	r7, #64	@ 0x40
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b088      	sub	sp, #32
 8008c72:	af02      	add	r7, sp, #8
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	330a      	adds	r3, #10
 8008c7e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	4613      	mov	r3, r2
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	f7f8 fc51 	bl	8001540 <HAL_I2C_Master_Transmit>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    //vl53l0x_log("_I2CWrite: addr=%d, status=%d", pdata[0], status);
    return status;
 8008ca2:	693b      	ldr	r3, [r7, #16]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af02      	add	r7, sp, #8
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	330a      	adds	r3, #10
 8008cbc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	f7f8 fd47 	bl	8001770 <HAL_I2C_Master_Receive>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    //vl53l0x_log("_I2CRead: addr=%d, status=%d", pdata[0], status);
    return status;
 8008ce6:	693b      	ldr	r3, [r7, #16]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	607a      	str	r2, [r7, #4]
 8008cfa:	603b      	str	r3, [r7, #0]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d00:	2300      	movs	r3, #0
 8008d02:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b3f      	cmp	r3, #63	@ 0x3f
 8008d08:	d902      	bls.n	8008d10 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008d0a:	f06f 0303 	mvn.w	r3, #3
 8008d0e:	e016      	b.n	8008d3e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008d10:	4a0d      	ldr	r2, [pc, #52]	@ (8008d48 <VL53L0X_WriteMulti+0x58>)
 8008d12:	7afb      	ldrb	r3, [r7, #11]
 8008d14:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	480c      	ldr	r0, [pc, #48]	@ (8008d4c <VL53L0X_WriteMulti+0x5c>)
 8008d1c:	f000 fa28 	bl	8009170 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	3301      	adds	r3, #1
 8008d24:	461a      	mov	r2, r3
 8008d26:	4908      	ldr	r1, [pc, #32]	@ (8008d48 <VL53L0X_WriteMulti+0x58>)
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7ff ffa0 	bl	8008c6e <_I2CWrite>
 8008d2e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008d36:	23ec      	movs	r3, #236	@ 0xec
 8008d38:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	200005fc 	.word	0x200005fc
 8008d4c:	200005fd 	.word	0x200005fd

08008d50 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	607a      	str	r2, [r7, #4]
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d60:	2300      	movs	r3, #0
 8008d62:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008d64:	f107 030b 	add.w	r3, r7, #11
 8008d68:	2201      	movs	r2, #1
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f7ff ff7e 	bl	8008c6e <_I2CWrite>
 8008d72:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008d7a:	23ec      	movs	r3, #236	@ 0xec
 8008d7c:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008d7e:	e00c      	b.n	8008d9a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7ff ff91 	bl	8008cac <_I2CRead>
 8008d8a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008d92:	23ec      	movs	r3, #236	@ 0xec
 8008d94:	75fb      	strb	r3, [r7, #23]
 8008d96:	e000      	b.n	8008d9a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008d98:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
 8008db4:	4613      	mov	r3, r2
 8008db6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008db8:	2300      	movs	r3, #0
 8008dba:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8008dec <VL53L0X_WrByte+0x44>)
 8008dbe:	78fb      	ldrb	r3, [r7, #3]
 8008dc0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8008dec <VL53L0X_WrByte+0x44>)
 8008dc4:	78bb      	ldrb	r3, [r7, #2]
 8008dc6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008dc8:	2202      	movs	r2, #2
 8008dca:	4908      	ldr	r1, [pc, #32]	@ (8008dec <VL53L0X_WrByte+0x44>)
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff ff4e 	bl	8008c6e <_I2CWrite>
 8008dd2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008dda:	23ec      	movs	r3, #236	@ 0xec
 8008ddc:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200005fc 	.word	0x200005fc

08008df0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008e04:	4a0e      	ldr	r2, [pc, #56]	@ (8008e40 <VL53L0X_WrWord+0x50>)
 8008e06:	78fb      	ldrb	r3, [r7, #3]
 8008e08:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008e0a:	883b      	ldrh	r3, [r7, #0]
 8008e0c:	0a1b      	lsrs	r3, r3, #8
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	4b0b      	ldr	r3, [pc, #44]	@ (8008e40 <VL53L0X_WrWord+0x50>)
 8008e14:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8008e16:	883b      	ldrh	r3, [r7, #0]
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	4b09      	ldr	r3, [pc, #36]	@ (8008e40 <VL53L0X_WrWord+0x50>)
 8008e1c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008e1e:	2203      	movs	r2, #3
 8008e20:	4907      	ldr	r1, [pc, #28]	@ (8008e40 <VL53L0X_WrWord+0x50>)
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff ff23 	bl	8008c6e <_I2CWrite>
 8008e28:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008e30:	23ec      	movs	r3, #236	@ 0xec
 8008e32:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	200005fc 	.word	0x200005fc

08008e44 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	461a      	mov	r2, r3
 8008e52:	4603      	mov	r3, r0
 8008e54:	70fb      	strb	r3, [r7, #3]
 8008e56:	460b      	mov	r3, r1
 8008e58:	70bb      	strb	r3, [r7, #2]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8008e62:	f107 020e 	add.w	r2, r7, #14
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f81e 	bl	8008eac <VL53L0X_RdByte>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8008e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d110      	bne.n	8008e9e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8008e7c:	7bba      	ldrb	r2, [r7, #14]
 8008e7e:	78bb      	ldrb	r3, [r7, #2]
 8008e80:	4013      	ands	r3, r2
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	787b      	ldrb	r3, [r7, #1]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008e8c:	7bba      	ldrb	r2, [r7, #14]
 8008e8e:	78fb      	ldrb	r3, [r7, #3]
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7ff ff88 	bl	8008da8 <VL53L0X_WrByte>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
 8008e9c:	e000      	b.n	8008ea0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008e9e:	bf00      	nop
done:
    return Status;
 8008ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008ebe:	f107 030b 	add.w	r3, r7, #11
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f7ff fed1 	bl	8008c6e <_I2CWrite>
 8008ecc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008ed4:	23ec      	movs	r3, #236	@ 0xec
 8008ed6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008ed8:	e00c      	b.n	8008ef4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008eda:	2201      	movs	r2, #1
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff fee4 	bl	8008cac <_I2CRead>
 8008ee4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008eec:	23ec      	movs	r3, #236	@ 0xec
 8008eee:	75fb      	strb	r3, [r7, #23]
 8008ef0:	e000      	b.n	8008ef4 <VL53L0X_RdByte+0x48>
    }
done:
 8008ef2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008ef4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008f12:	f107 030b 	add.w	r3, r7, #11
 8008f16:	2201      	movs	r2, #1
 8008f18:	4619      	mov	r1, r3
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7ff fea7 	bl	8008c6e <_I2CWrite>
 8008f20:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f28:	23ec      	movs	r3, #236	@ 0xec
 8008f2a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008f2c:	e015      	b.n	8008f5a <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008f2e:	2202      	movs	r2, #2
 8008f30:	490d      	ldr	r1, [pc, #52]	@ (8008f68 <VL53L0X_RdWord+0x68>)
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7ff feba 	bl	8008cac <_I2CRead>
 8008f38:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f40:	23ec      	movs	r3, #236	@ 0xec
 8008f42:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008f44:	e009      	b.n	8008f5a <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008f46:	4b08      	ldr	r3, [pc, #32]	@ (8008f68 <VL53L0X_RdWord+0x68>)
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	021b      	lsls	r3, r3, #8
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	4a06      	ldr	r2, [pc, #24]	@ (8008f68 <VL53L0X_RdWord+0x68>)
 8008f50:	7852      	ldrb	r2, [r2, #1]
 8008f52:	4413      	add	r3, r2
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8008f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	200005fc 	.word	0x200005fc

08008f6c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	460b      	mov	r3, r1
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008f7e:	f107 030b 	add.w	r3, r7, #11
 8008f82:	2201      	movs	r2, #1
 8008f84:	4619      	mov	r1, r3
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff fe71 	bl	8008c6e <_I2CWrite>
 8008f8c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f94:	23ec      	movs	r3, #236	@ 0xec
 8008f96:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008f98:	e01b      	b.n	8008fd2 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	4910      	ldr	r1, [pc, #64]	@ (8008fe0 <VL53L0X_RdDWord+0x74>)
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7ff fe84 	bl	8008cac <_I2CRead>
 8008fa4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008fac:	23ec      	movs	r3, #236	@ 0xec
 8008fae:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008fb0:	e00f      	b.n	8008fd2 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8008fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe0 <VL53L0X_RdDWord+0x74>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	061a      	lsls	r2, r3, #24
 8008fb8:	4b09      	ldr	r3, [pc, #36]	@ (8008fe0 <VL53L0X_RdDWord+0x74>)
 8008fba:	785b      	ldrb	r3, [r3, #1]
 8008fbc:	041b      	lsls	r3, r3, #16
 8008fbe:	441a      	add	r2, r3
 8008fc0:	4b07      	ldr	r3, [pc, #28]	@ (8008fe0 <VL53L0X_RdDWord+0x74>)
 8008fc2:	789b      	ldrb	r3, [r3, #2]
 8008fc4:	021b      	lsls	r3, r3, #8
 8008fc6:	4413      	add	r3, r2
 8008fc8:	4a05      	ldr	r2, [pc, #20]	@ (8008fe0 <VL53L0X_RdDWord+0x74>)
 8008fca:	78d2      	ldrb	r2, [r2, #3]
 8008fcc:	441a      	add	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8008fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	200005fc 	.word	0x200005fc

08008fe4 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8008ff0:	2002      	movs	r0, #2
 8008ff2:	f7f7 feff 	bl	8000df4 <HAL_Delay>
    return status;
 8008ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <_vl53l0x_log>:
}
#endif

#include "main.h"

void _vl53l0x_log (const char *format, ...) {
 8009004:	b40f      	push	{r0, r1, r2, r3}
 8009006:	b580      	push	{r7, lr}
 8009008:	b092      	sub	sp, #72	@ 0x48
 800900a:	af00      	add	r7, sp, #0
    char buffer[64];
    uint16_t size;
    va_list args;
    va_start(args, format);
 800900c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009010:	603b      	str	r3, [r7, #0]
    size = vsnprintf(buffer, sizeof(buffer), format, args);
 8009012:	1d38      	adds	r0, r7, #4
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009018:	2140      	movs	r1, #64	@ 0x40
 800901a:	f000 f85f 	bl	80090dc <vsniprintf>
 800901e:	4603      	mov	r3, r0
 8009020:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    va_end(args);

extern UART_HandleTypeDef huart2;
    HAL_UART_Transmit(&huart2, (const uint8_t *)buffer, size, 10);
 8009024:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009028:	1d39      	adds	r1, r7, #4
 800902a:	230a      	movs	r3, #10
 800902c:	4804      	ldr	r0, [pc, #16]	@ (8009040 <_vl53l0x_log+0x3c>)
 800902e:	f7fa faa7 	bl	8003580 <HAL_UART_Transmit>
}
 8009032:	bf00      	nop
 8009034:	3748      	adds	r7, #72	@ 0x48
 8009036:	46bd      	mov	sp, r7
 8009038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800903c:	b004      	add	sp, #16
 800903e:	4770      	bx	lr
 8009040:	2000037c 	.word	0x2000037c

08009044 <siprintf>:
 8009044:	b40e      	push	{r1, r2, r3}
 8009046:	b500      	push	{lr}
 8009048:	b09c      	sub	sp, #112	@ 0x70
 800904a:	ab1d      	add	r3, sp, #116	@ 0x74
 800904c:	9002      	str	r0, [sp, #8]
 800904e:	9006      	str	r0, [sp, #24]
 8009050:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009054:	4809      	ldr	r0, [pc, #36]	@ (800907c <siprintf+0x38>)
 8009056:	9107      	str	r1, [sp, #28]
 8009058:	9104      	str	r1, [sp, #16]
 800905a:	4909      	ldr	r1, [pc, #36]	@ (8009080 <siprintf+0x3c>)
 800905c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009060:	9105      	str	r1, [sp, #20]
 8009062:	6800      	ldr	r0, [r0, #0]
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	a902      	add	r1, sp, #8
 8009068:	f000 f9e4 	bl	8009434 <_svfiprintf_r>
 800906c:	9b02      	ldr	r3, [sp, #8]
 800906e:	2200      	movs	r2, #0
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	b01c      	add	sp, #112	@ 0x70
 8009074:	f85d eb04 	ldr.w	lr, [sp], #4
 8009078:	b003      	add	sp, #12
 800907a:	4770      	bx	lr
 800907c:	200002bc 	.word	0x200002bc
 8009080:	ffff0208 	.word	0xffff0208

08009084 <_vsniprintf_r>:
 8009084:	b530      	push	{r4, r5, lr}
 8009086:	4614      	mov	r4, r2
 8009088:	2c00      	cmp	r4, #0
 800908a:	b09b      	sub	sp, #108	@ 0x6c
 800908c:	4605      	mov	r5, r0
 800908e:	461a      	mov	r2, r3
 8009090:	da05      	bge.n	800909e <_vsniprintf_r+0x1a>
 8009092:	238b      	movs	r3, #139	@ 0x8b
 8009094:	6003      	str	r3, [r0, #0]
 8009096:	f04f 30ff 	mov.w	r0, #4294967295
 800909a:	b01b      	add	sp, #108	@ 0x6c
 800909c:	bd30      	pop	{r4, r5, pc}
 800909e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80090a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80090a6:	bf14      	ite	ne
 80090a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80090ac:	4623      	moveq	r3, r4
 80090ae:	9302      	str	r3, [sp, #8]
 80090b0:	9305      	str	r3, [sp, #20]
 80090b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80090b6:	9100      	str	r1, [sp, #0]
 80090b8:	9104      	str	r1, [sp, #16]
 80090ba:	f8ad 300e 	strh.w	r3, [sp, #14]
 80090be:	4669      	mov	r1, sp
 80090c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80090c2:	f000 f9b7 	bl	8009434 <_svfiprintf_r>
 80090c6:	1c43      	adds	r3, r0, #1
 80090c8:	bfbc      	itt	lt
 80090ca:	238b      	movlt	r3, #139	@ 0x8b
 80090cc:	602b      	strlt	r3, [r5, #0]
 80090ce:	2c00      	cmp	r4, #0
 80090d0:	d0e3      	beq.n	800909a <_vsniprintf_r+0x16>
 80090d2:	9b00      	ldr	r3, [sp, #0]
 80090d4:	2200      	movs	r2, #0
 80090d6:	701a      	strb	r2, [r3, #0]
 80090d8:	e7df      	b.n	800909a <_vsniprintf_r+0x16>
	...

080090dc <vsniprintf>:
 80090dc:	b507      	push	{r0, r1, r2, lr}
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4613      	mov	r3, r2
 80090e2:	460a      	mov	r2, r1
 80090e4:	4601      	mov	r1, r0
 80090e6:	4803      	ldr	r0, [pc, #12]	@ (80090f4 <vsniprintf+0x18>)
 80090e8:	6800      	ldr	r0, [r0, #0]
 80090ea:	f7ff ffcb 	bl	8009084 <_vsniprintf_r>
 80090ee:	b003      	add	sp, #12
 80090f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80090f4:	200002bc 	.word	0x200002bc

080090f8 <memset>:
 80090f8:	4402      	add	r2, r0
 80090fa:	4603      	mov	r3, r0
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d100      	bne.n	8009102 <memset+0xa>
 8009100:	4770      	bx	lr
 8009102:	f803 1b01 	strb.w	r1, [r3], #1
 8009106:	e7f9      	b.n	80090fc <memset+0x4>

08009108 <__errno>:
 8009108:	4b01      	ldr	r3, [pc, #4]	@ (8009110 <__errno+0x8>)
 800910a:	6818      	ldr	r0, [r3, #0]
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	200002bc 	.word	0x200002bc

08009114 <__libc_init_array>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	4d0d      	ldr	r5, [pc, #52]	@ (800914c <__libc_init_array+0x38>)
 8009118:	4c0d      	ldr	r4, [pc, #52]	@ (8009150 <__libc_init_array+0x3c>)
 800911a:	1b64      	subs	r4, r4, r5
 800911c:	10a4      	asrs	r4, r4, #2
 800911e:	2600      	movs	r6, #0
 8009120:	42a6      	cmp	r6, r4
 8009122:	d109      	bne.n	8009138 <__libc_init_array+0x24>
 8009124:	4d0b      	ldr	r5, [pc, #44]	@ (8009154 <__libc_init_array+0x40>)
 8009126:	4c0c      	ldr	r4, [pc, #48]	@ (8009158 <__libc_init_array+0x44>)
 8009128:	f000 fc6e 	bl	8009a08 <_init>
 800912c:	1b64      	subs	r4, r4, r5
 800912e:	10a4      	asrs	r4, r4, #2
 8009130:	2600      	movs	r6, #0
 8009132:	42a6      	cmp	r6, r4
 8009134:	d105      	bne.n	8009142 <__libc_init_array+0x2e>
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	f855 3b04 	ldr.w	r3, [r5], #4
 800913c:	4798      	blx	r3
 800913e:	3601      	adds	r6, #1
 8009140:	e7ee      	b.n	8009120 <__libc_init_array+0xc>
 8009142:	f855 3b04 	ldr.w	r3, [r5], #4
 8009146:	4798      	blx	r3
 8009148:	3601      	adds	r6, #1
 800914a:	e7f2      	b.n	8009132 <__libc_init_array+0x1e>
 800914c:	08009ad8 	.word	0x08009ad8
 8009150:	08009ad8 	.word	0x08009ad8
 8009154:	08009ad8 	.word	0x08009ad8
 8009158:	08009adc 	.word	0x08009adc

0800915c <__retarget_lock_acquire_recursive>:
 800915c:	4770      	bx	lr

0800915e <__retarget_lock_release_recursive>:
 800915e:	4770      	bx	lr

08009160 <strcpy>:
 8009160:	4603      	mov	r3, r0
 8009162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009166:	f803 2b01 	strb.w	r2, [r3], #1
 800916a:	2a00      	cmp	r2, #0
 800916c:	d1f9      	bne.n	8009162 <strcpy+0x2>
 800916e:	4770      	bx	lr

08009170 <memcpy>:
 8009170:	440a      	add	r2, r1
 8009172:	4291      	cmp	r1, r2
 8009174:	f100 33ff 	add.w	r3, r0, #4294967295
 8009178:	d100      	bne.n	800917c <memcpy+0xc>
 800917a:	4770      	bx	lr
 800917c:	b510      	push	{r4, lr}
 800917e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009186:	4291      	cmp	r1, r2
 8009188:	d1f9      	bne.n	800917e <memcpy+0xe>
 800918a:	bd10      	pop	{r4, pc}

0800918c <_free_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4605      	mov	r5, r0
 8009190:	2900      	cmp	r1, #0
 8009192:	d041      	beq.n	8009218 <_free_r+0x8c>
 8009194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009198:	1f0c      	subs	r4, r1, #4
 800919a:	2b00      	cmp	r3, #0
 800919c:	bfb8      	it	lt
 800919e:	18e4      	addlt	r4, r4, r3
 80091a0:	f000 f8e0 	bl	8009364 <__malloc_lock>
 80091a4:	4a1d      	ldr	r2, [pc, #116]	@ (800921c <_free_r+0x90>)
 80091a6:	6813      	ldr	r3, [r2, #0]
 80091a8:	b933      	cbnz	r3, 80091b8 <_free_r+0x2c>
 80091aa:	6063      	str	r3, [r4, #4]
 80091ac:	6014      	str	r4, [r2, #0]
 80091ae:	4628      	mov	r0, r5
 80091b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b4:	f000 b8dc 	b.w	8009370 <__malloc_unlock>
 80091b8:	42a3      	cmp	r3, r4
 80091ba:	d908      	bls.n	80091ce <_free_r+0x42>
 80091bc:	6820      	ldr	r0, [r4, #0]
 80091be:	1821      	adds	r1, r4, r0
 80091c0:	428b      	cmp	r3, r1
 80091c2:	bf01      	itttt	eq
 80091c4:	6819      	ldreq	r1, [r3, #0]
 80091c6:	685b      	ldreq	r3, [r3, #4]
 80091c8:	1809      	addeq	r1, r1, r0
 80091ca:	6021      	streq	r1, [r4, #0]
 80091cc:	e7ed      	b.n	80091aa <_free_r+0x1e>
 80091ce:	461a      	mov	r2, r3
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	b10b      	cbz	r3, 80091d8 <_free_r+0x4c>
 80091d4:	42a3      	cmp	r3, r4
 80091d6:	d9fa      	bls.n	80091ce <_free_r+0x42>
 80091d8:	6811      	ldr	r1, [r2, #0]
 80091da:	1850      	adds	r0, r2, r1
 80091dc:	42a0      	cmp	r0, r4
 80091de:	d10b      	bne.n	80091f8 <_free_r+0x6c>
 80091e0:	6820      	ldr	r0, [r4, #0]
 80091e2:	4401      	add	r1, r0
 80091e4:	1850      	adds	r0, r2, r1
 80091e6:	4283      	cmp	r3, r0
 80091e8:	6011      	str	r1, [r2, #0]
 80091ea:	d1e0      	bne.n	80091ae <_free_r+0x22>
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	6053      	str	r3, [r2, #4]
 80091f2:	4408      	add	r0, r1
 80091f4:	6010      	str	r0, [r2, #0]
 80091f6:	e7da      	b.n	80091ae <_free_r+0x22>
 80091f8:	d902      	bls.n	8009200 <_free_r+0x74>
 80091fa:	230c      	movs	r3, #12
 80091fc:	602b      	str	r3, [r5, #0]
 80091fe:	e7d6      	b.n	80091ae <_free_r+0x22>
 8009200:	6820      	ldr	r0, [r4, #0]
 8009202:	1821      	adds	r1, r4, r0
 8009204:	428b      	cmp	r3, r1
 8009206:	bf04      	itt	eq
 8009208:	6819      	ldreq	r1, [r3, #0]
 800920a:	685b      	ldreq	r3, [r3, #4]
 800920c:	6063      	str	r3, [r4, #4]
 800920e:	bf04      	itt	eq
 8009210:	1809      	addeq	r1, r1, r0
 8009212:	6021      	streq	r1, [r4, #0]
 8009214:	6054      	str	r4, [r2, #4]
 8009216:	e7ca      	b.n	80091ae <_free_r+0x22>
 8009218:	bd38      	pop	{r3, r4, r5, pc}
 800921a:	bf00      	nop
 800921c:	20000780 	.word	0x20000780

08009220 <sbrk_aligned>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	4e0f      	ldr	r6, [pc, #60]	@ (8009260 <sbrk_aligned+0x40>)
 8009224:	460c      	mov	r4, r1
 8009226:	6831      	ldr	r1, [r6, #0]
 8009228:	4605      	mov	r5, r0
 800922a:	b911      	cbnz	r1, 8009232 <sbrk_aligned+0x12>
 800922c:	f000 fba6 	bl	800997c <_sbrk_r>
 8009230:	6030      	str	r0, [r6, #0]
 8009232:	4621      	mov	r1, r4
 8009234:	4628      	mov	r0, r5
 8009236:	f000 fba1 	bl	800997c <_sbrk_r>
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	d103      	bne.n	8009246 <sbrk_aligned+0x26>
 800923e:	f04f 34ff 	mov.w	r4, #4294967295
 8009242:	4620      	mov	r0, r4
 8009244:	bd70      	pop	{r4, r5, r6, pc}
 8009246:	1cc4      	adds	r4, r0, #3
 8009248:	f024 0403 	bic.w	r4, r4, #3
 800924c:	42a0      	cmp	r0, r4
 800924e:	d0f8      	beq.n	8009242 <sbrk_aligned+0x22>
 8009250:	1a21      	subs	r1, r4, r0
 8009252:	4628      	mov	r0, r5
 8009254:	f000 fb92 	bl	800997c <_sbrk_r>
 8009258:	3001      	adds	r0, #1
 800925a:	d1f2      	bne.n	8009242 <sbrk_aligned+0x22>
 800925c:	e7ef      	b.n	800923e <sbrk_aligned+0x1e>
 800925e:	bf00      	nop
 8009260:	2000077c 	.word	0x2000077c

08009264 <_malloc_r>:
 8009264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009268:	1ccd      	adds	r5, r1, #3
 800926a:	f025 0503 	bic.w	r5, r5, #3
 800926e:	3508      	adds	r5, #8
 8009270:	2d0c      	cmp	r5, #12
 8009272:	bf38      	it	cc
 8009274:	250c      	movcc	r5, #12
 8009276:	2d00      	cmp	r5, #0
 8009278:	4606      	mov	r6, r0
 800927a:	db01      	blt.n	8009280 <_malloc_r+0x1c>
 800927c:	42a9      	cmp	r1, r5
 800927e:	d904      	bls.n	800928a <_malloc_r+0x26>
 8009280:	230c      	movs	r3, #12
 8009282:	6033      	str	r3, [r6, #0]
 8009284:	2000      	movs	r0, #0
 8009286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800928a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009360 <_malloc_r+0xfc>
 800928e:	f000 f869 	bl	8009364 <__malloc_lock>
 8009292:	f8d8 3000 	ldr.w	r3, [r8]
 8009296:	461c      	mov	r4, r3
 8009298:	bb44      	cbnz	r4, 80092ec <_malloc_r+0x88>
 800929a:	4629      	mov	r1, r5
 800929c:	4630      	mov	r0, r6
 800929e:	f7ff ffbf 	bl	8009220 <sbrk_aligned>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	4604      	mov	r4, r0
 80092a6:	d158      	bne.n	800935a <_malloc_r+0xf6>
 80092a8:	f8d8 4000 	ldr.w	r4, [r8]
 80092ac:	4627      	mov	r7, r4
 80092ae:	2f00      	cmp	r7, #0
 80092b0:	d143      	bne.n	800933a <_malloc_r+0xd6>
 80092b2:	2c00      	cmp	r4, #0
 80092b4:	d04b      	beq.n	800934e <_malloc_r+0xea>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	4639      	mov	r1, r7
 80092ba:	4630      	mov	r0, r6
 80092bc:	eb04 0903 	add.w	r9, r4, r3
 80092c0:	f000 fb5c 	bl	800997c <_sbrk_r>
 80092c4:	4581      	cmp	r9, r0
 80092c6:	d142      	bne.n	800934e <_malloc_r+0xea>
 80092c8:	6821      	ldr	r1, [r4, #0]
 80092ca:	1a6d      	subs	r5, r5, r1
 80092cc:	4629      	mov	r1, r5
 80092ce:	4630      	mov	r0, r6
 80092d0:	f7ff ffa6 	bl	8009220 <sbrk_aligned>
 80092d4:	3001      	adds	r0, #1
 80092d6:	d03a      	beq.n	800934e <_malloc_r+0xea>
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	442b      	add	r3, r5
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	f8d8 3000 	ldr.w	r3, [r8]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	bb62      	cbnz	r2, 8009340 <_malloc_r+0xdc>
 80092e6:	f8c8 7000 	str.w	r7, [r8]
 80092ea:	e00f      	b.n	800930c <_malloc_r+0xa8>
 80092ec:	6822      	ldr	r2, [r4, #0]
 80092ee:	1b52      	subs	r2, r2, r5
 80092f0:	d420      	bmi.n	8009334 <_malloc_r+0xd0>
 80092f2:	2a0b      	cmp	r2, #11
 80092f4:	d917      	bls.n	8009326 <_malloc_r+0xc2>
 80092f6:	1961      	adds	r1, r4, r5
 80092f8:	42a3      	cmp	r3, r4
 80092fa:	6025      	str	r5, [r4, #0]
 80092fc:	bf18      	it	ne
 80092fe:	6059      	strne	r1, [r3, #4]
 8009300:	6863      	ldr	r3, [r4, #4]
 8009302:	bf08      	it	eq
 8009304:	f8c8 1000 	streq.w	r1, [r8]
 8009308:	5162      	str	r2, [r4, r5]
 800930a:	604b      	str	r3, [r1, #4]
 800930c:	4630      	mov	r0, r6
 800930e:	f000 f82f 	bl	8009370 <__malloc_unlock>
 8009312:	f104 000b 	add.w	r0, r4, #11
 8009316:	1d23      	adds	r3, r4, #4
 8009318:	f020 0007 	bic.w	r0, r0, #7
 800931c:	1ac2      	subs	r2, r0, r3
 800931e:	bf1c      	itt	ne
 8009320:	1a1b      	subne	r3, r3, r0
 8009322:	50a3      	strne	r3, [r4, r2]
 8009324:	e7af      	b.n	8009286 <_malloc_r+0x22>
 8009326:	6862      	ldr	r2, [r4, #4]
 8009328:	42a3      	cmp	r3, r4
 800932a:	bf0c      	ite	eq
 800932c:	f8c8 2000 	streq.w	r2, [r8]
 8009330:	605a      	strne	r2, [r3, #4]
 8009332:	e7eb      	b.n	800930c <_malloc_r+0xa8>
 8009334:	4623      	mov	r3, r4
 8009336:	6864      	ldr	r4, [r4, #4]
 8009338:	e7ae      	b.n	8009298 <_malloc_r+0x34>
 800933a:	463c      	mov	r4, r7
 800933c:	687f      	ldr	r7, [r7, #4]
 800933e:	e7b6      	b.n	80092ae <_malloc_r+0x4a>
 8009340:	461a      	mov	r2, r3
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	42a3      	cmp	r3, r4
 8009346:	d1fb      	bne.n	8009340 <_malloc_r+0xdc>
 8009348:	2300      	movs	r3, #0
 800934a:	6053      	str	r3, [r2, #4]
 800934c:	e7de      	b.n	800930c <_malloc_r+0xa8>
 800934e:	230c      	movs	r3, #12
 8009350:	6033      	str	r3, [r6, #0]
 8009352:	4630      	mov	r0, r6
 8009354:	f000 f80c 	bl	8009370 <__malloc_unlock>
 8009358:	e794      	b.n	8009284 <_malloc_r+0x20>
 800935a:	6005      	str	r5, [r0, #0]
 800935c:	e7d6      	b.n	800930c <_malloc_r+0xa8>
 800935e:	bf00      	nop
 8009360:	20000780 	.word	0x20000780

08009364 <__malloc_lock>:
 8009364:	4801      	ldr	r0, [pc, #4]	@ (800936c <__malloc_lock+0x8>)
 8009366:	f7ff bef9 	b.w	800915c <__retarget_lock_acquire_recursive>
 800936a:	bf00      	nop
 800936c:	20000778 	.word	0x20000778

08009370 <__malloc_unlock>:
 8009370:	4801      	ldr	r0, [pc, #4]	@ (8009378 <__malloc_unlock+0x8>)
 8009372:	f7ff bef4 	b.w	800915e <__retarget_lock_release_recursive>
 8009376:	bf00      	nop
 8009378:	20000778 	.word	0x20000778

0800937c <__ssputs_r>:
 800937c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009380:	688e      	ldr	r6, [r1, #8]
 8009382:	461f      	mov	r7, r3
 8009384:	42be      	cmp	r6, r7
 8009386:	680b      	ldr	r3, [r1, #0]
 8009388:	4682      	mov	sl, r0
 800938a:	460c      	mov	r4, r1
 800938c:	4690      	mov	r8, r2
 800938e:	d82d      	bhi.n	80093ec <__ssputs_r+0x70>
 8009390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009394:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009398:	d026      	beq.n	80093e8 <__ssputs_r+0x6c>
 800939a:	6965      	ldr	r5, [r4, #20]
 800939c:	6909      	ldr	r1, [r1, #16]
 800939e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093a2:	eba3 0901 	sub.w	r9, r3, r1
 80093a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093aa:	1c7b      	adds	r3, r7, #1
 80093ac:	444b      	add	r3, r9
 80093ae:	106d      	asrs	r5, r5, #1
 80093b0:	429d      	cmp	r5, r3
 80093b2:	bf38      	it	cc
 80093b4:	461d      	movcc	r5, r3
 80093b6:	0553      	lsls	r3, r2, #21
 80093b8:	d527      	bpl.n	800940a <__ssputs_r+0x8e>
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7ff ff52 	bl	8009264 <_malloc_r>
 80093c0:	4606      	mov	r6, r0
 80093c2:	b360      	cbz	r0, 800941e <__ssputs_r+0xa2>
 80093c4:	6921      	ldr	r1, [r4, #16]
 80093c6:	464a      	mov	r2, r9
 80093c8:	f7ff fed2 	bl	8009170 <memcpy>
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d6:	81a3      	strh	r3, [r4, #12]
 80093d8:	6126      	str	r6, [r4, #16]
 80093da:	6165      	str	r5, [r4, #20]
 80093dc:	444e      	add	r6, r9
 80093de:	eba5 0509 	sub.w	r5, r5, r9
 80093e2:	6026      	str	r6, [r4, #0]
 80093e4:	60a5      	str	r5, [r4, #8]
 80093e6:	463e      	mov	r6, r7
 80093e8:	42be      	cmp	r6, r7
 80093ea:	d900      	bls.n	80093ee <__ssputs_r+0x72>
 80093ec:	463e      	mov	r6, r7
 80093ee:	6820      	ldr	r0, [r4, #0]
 80093f0:	4632      	mov	r2, r6
 80093f2:	4641      	mov	r1, r8
 80093f4:	f000 faa8 	bl	8009948 <memmove>
 80093f8:	68a3      	ldr	r3, [r4, #8]
 80093fa:	1b9b      	subs	r3, r3, r6
 80093fc:	60a3      	str	r3, [r4, #8]
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	4433      	add	r3, r6
 8009402:	6023      	str	r3, [r4, #0]
 8009404:	2000      	movs	r0, #0
 8009406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940a:	462a      	mov	r2, r5
 800940c:	f000 fac6 	bl	800999c <_realloc_r>
 8009410:	4606      	mov	r6, r0
 8009412:	2800      	cmp	r0, #0
 8009414:	d1e0      	bne.n	80093d8 <__ssputs_r+0x5c>
 8009416:	6921      	ldr	r1, [r4, #16]
 8009418:	4650      	mov	r0, sl
 800941a:	f7ff feb7 	bl	800918c <_free_r>
 800941e:	230c      	movs	r3, #12
 8009420:	f8ca 3000 	str.w	r3, [sl]
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	f04f 30ff 	mov.w	r0, #4294967295
 8009430:	e7e9      	b.n	8009406 <__ssputs_r+0x8a>
	...

08009434 <_svfiprintf_r>:
 8009434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	4698      	mov	r8, r3
 800943a:	898b      	ldrh	r3, [r1, #12]
 800943c:	061b      	lsls	r3, r3, #24
 800943e:	b09d      	sub	sp, #116	@ 0x74
 8009440:	4607      	mov	r7, r0
 8009442:	460d      	mov	r5, r1
 8009444:	4614      	mov	r4, r2
 8009446:	d510      	bpl.n	800946a <_svfiprintf_r+0x36>
 8009448:	690b      	ldr	r3, [r1, #16]
 800944a:	b973      	cbnz	r3, 800946a <_svfiprintf_r+0x36>
 800944c:	2140      	movs	r1, #64	@ 0x40
 800944e:	f7ff ff09 	bl	8009264 <_malloc_r>
 8009452:	6028      	str	r0, [r5, #0]
 8009454:	6128      	str	r0, [r5, #16]
 8009456:	b930      	cbnz	r0, 8009466 <_svfiprintf_r+0x32>
 8009458:	230c      	movs	r3, #12
 800945a:	603b      	str	r3, [r7, #0]
 800945c:	f04f 30ff 	mov.w	r0, #4294967295
 8009460:	b01d      	add	sp, #116	@ 0x74
 8009462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009466:	2340      	movs	r3, #64	@ 0x40
 8009468:	616b      	str	r3, [r5, #20]
 800946a:	2300      	movs	r3, #0
 800946c:	9309      	str	r3, [sp, #36]	@ 0x24
 800946e:	2320      	movs	r3, #32
 8009470:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009474:	f8cd 800c 	str.w	r8, [sp, #12]
 8009478:	2330      	movs	r3, #48	@ 0x30
 800947a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009618 <_svfiprintf_r+0x1e4>
 800947e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009482:	f04f 0901 	mov.w	r9, #1
 8009486:	4623      	mov	r3, r4
 8009488:	469a      	mov	sl, r3
 800948a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800948e:	b10a      	cbz	r2, 8009494 <_svfiprintf_r+0x60>
 8009490:	2a25      	cmp	r2, #37	@ 0x25
 8009492:	d1f9      	bne.n	8009488 <_svfiprintf_r+0x54>
 8009494:	ebba 0b04 	subs.w	fp, sl, r4
 8009498:	d00b      	beq.n	80094b2 <_svfiprintf_r+0x7e>
 800949a:	465b      	mov	r3, fp
 800949c:	4622      	mov	r2, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	4638      	mov	r0, r7
 80094a2:	f7ff ff6b 	bl	800937c <__ssputs_r>
 80094a6:	3001      	adds	r0, #1
 80094a8:	f000 80a7 	beq.w	80095fa <_svfiprintf_r+0x1c6>
 80094ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094ae:	445a      	add	r2, fp
 80094b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80094b2:	f89a 3000 	ldrb.w	r3, [sl]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 809f 	beq.w	80095fa <_svfiprintf_r+0x1c6>
 80094bc:	2300      	movs	r3, #0
 80094be:	f04f 32ff 	mov.w	r2, #4294967295
 80094c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094c6:	f10a 0a01 	add.w	sl, sl, #1
 80094ca:	9304      	str	r3, [sp, #16]
 80094cc:	9307      	str	r3, [sp, #28]
 80094ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80094d4:	4654      	mov	r4, sl
 80094d6:	2205      	movs	r2, #5
 80094d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094dc:	484e      	ldr	r0, [pc, #312]	@ (8009618 <_svfiprintf_r+0x1e4>)
 80094de:	f7f6 fe7f 	bl	80001e0 <memchr>
 80094e2:	9a04      	ldr	r2, [sp, #16]
 80094e4:	b9d8      	cbnz	r0, 800951e <_svfiprintf_r+0xea>
 80094e6:	06d0      	lsls	r0, r2, #27
 80094e8:	bf44      	itt	mi
 80094ea:	2320      	movmi	r3, #32
 80094ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094f0:	0711      	lsls	r1, r2, #28
 80094f2:	bf44      	itt	mi
 80094f4:	232b      	movmi	r3, #43	@ 0x2b
 80094f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094fa:	f89a 3000 	ldrb.w	r3, [sl]
 80094fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009500:	d015      	beq.n	800952e <_svfiprintf_r+0xfa>
 8009502:	9a07      	ldr	r2, [sp, #28]
 8009504:	4654      	mov	r4, sl
 8009506:	2000      	movs	r0, #0
 8009508:	f04f 0c0a 	mov.w	ip, #10
 800950c:	4621      	mov	r1, r4
 800950e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009512:	3b30      	subs	r3, #48	@ 0x30
 8009514:	2b09      	cmp	r3, #9
 8009516:	d94b      	bls.n	80095b0 <_svfiprintf_r+0x17c>
 8009518:	b1b0      	cbz	r0, 8009548 <_svfiprintf_r+0x114>
 800951a:	9207      	str	r2, [sp, #28]
 800951c:	e014      	b.n	8009548 <_svfiprintf_r+0x114>
 800951e:	eba0 0308 	sub.w	r3, r0, r8
 8009522:	fa09 f303 	lsl.w	r3, r9, r3
 8009526:	4313      	orrs	r3, r2
 8009528:	9304      	str	r3, [sp, #16]
 800952a:	46a2      	mov	sl, r4
 800952c:	e7d2      	b.n	80094d4 <_svfiprintf_r+0xa0>
 800952e:	9b03      	ldr	r3, [sp, #12]
 8009530:	1d19      	adds	r1, r3, #4
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	9103      	str	r1, [sp, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	bfbb      	ittet	lt
 800953a:	425b      	neglt	r3, r3
 800953c:	f042 0202 	orrlt.w	r2, r2, #2
 8009540:	9307      	strge	r3, [sp, #28]
 8009542:	9307      	strlt	r3, [sp, #28]
 8009544:	bfb8      	it	lt
 8009546:	9204      	strlt	r2, [sp, #16]
 8009548:	7823      	ldrb	r3, [r4, #0]
 800954a:	2b2e      	cmp	r3, #46	@ 0x2e
 800954c:	d10a      	bne.n	8009564 <_svfiprintf_r+0x130>
 800954e:	7863      	ldrb	r3, [r4, #1]
 8009550:	2b2a      	cmp	r3, #42	@ 0x2a
 8009552:	d132      	bne.n	80095ba <_svfiprintf_r+0x186>
 8009554:	9b03      	ldr	r3, [sp, #12]
 8009556:	1d1a      	adds	r2, r3, #4
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	9203      	str	r2, [sp, #12]
 800955c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009560:	3402      	adds	r4, #2
 8009562:	9305      	str	r3, [sp, #20]
 8009564:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009628 <_svfiprintf_r+0x1f4>
 8009568:	7821      	ldrb	r1, [r4, #0]
 800956a:	2203      	movs	r2, #3
 800956c:	4650      	mov	r0, sl
 800956e:	f7f6 fe37 	bl	80001e0 <memchr>
 8009572:	b138      	cbz	r0, 8009584 <_svfiprintf_r+0x150>
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	eba0 000a 	sub.w	r0, r0, sl
 800957a:	2240      	movs	r2, #64	@ 0x40
 800957c:	4082      	lsls	r2, r0
 800957e:	4313      	orrs	r3, r2
 8009580:	3401      	adds	r4, #1
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009588:	4824      	ldr	r0, [pc, #144]	@ (800961c <_svfiprintf_r+0x1e8>)
 800958a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800958e:	2206      	movs	r2, #6
 8009590:	f7f6 fe26 	bl	80001e0 <memchr>
 8009594:	2800      	cmp	r0, #0
 8009596:	d036      	beq.n	8009606 <_svfiprintf_r+0x1d2>
 8009598:	4b21      	ldr	r3, [pc, #132]	@ (8009620 <_svfiprintf_r+0x1ec>)
 800959a:	bb1b      	cbnz	r3, 80095e4 <_svfiprintf_r+0x1b0>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	3307      	adds	r3, #7
 80095a0:	f023 0307 	bic.w	r3, r3, #7
 80095a4:	3308      	adds	r3, #8
 80095a6:	9303      	str	r3, [sp, #12]
 80095a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095aa:	4433      	add	r3, r6
 80095ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ae:	e76a      	b.n	8009486 <_svfiprintf_r+0x52>
 80095b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80095b4:	460c      	mov	r4, r1
 80095b6:	2001      	movs	r0, #1
 80095b8:	e7a8      	b.n	800950c <_svfiprintf_r+0xd8>
 80095ba:	2300      	movs	r3, #0
 80095bc:	3401      	adds	r4, #1
 80095be:	9305      	str	r3, [sp, #20]
 80095c0:	4619      	mov	r1, r3
 80095c2:	f04f 0c0a 	mov.w	ip, #10
 80095c6:	4620      	mov	r0, r4
 80095c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095cc:	3a30      	subs	r2, #48	@ 0x30
 80095ce:	2a09      	cmp	r2, #9
 80095d0:	d903      	bls.n	80095da <_svfiprintf_r+0x1a6>
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0c6      	beq.n	8009564 <_svfiprintf_r+0x130>
 80095d6:	9105      	str	r1, [sp, #20]
 80095d8:	e7c4      	b.n	8009564 <_svfiprintf_r+0x130>
 80095da:	fb0c 2101 	mla	r1, ip, r1, r2
 80095de:	4604      	mov	r4, r0
 80095e0:	2301      	movs	r3, #1
 80095e2:	e7f0      	b.n	80095c6 <_svfiprintf_r+0x192>
 80095e4:	ab03      	add	r3, sp, #12
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	462a      	mov	r2, r5
 80095ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009624 <_svfiprintf_r+0x1f0>)
 80095ec:	a904      	add	r1, sp, #16
 80095ee:	4638      	mov	r0, r7
 80095f0:	f3af 8000 	nop.w
 80095f4:	1c42      	adds	r2, r0, #1
 80095f6:	4606      	mov	r6, r0
 80095f8:	d1d6      	bne.n	80095a8 <_svfiprintf_r+0x174>
 80095fa:	89ab      	ldrh	r3, [r5, #12]
 80095fc:	065b      	lsls	r3, r3, #25
 80095fe:	f53f af2d 	bmi.w	800945c <_svfiprintf_r+0x28>
 8009602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009604:	e72c      	b.n	8009460 <_svfiprintf_r+0x2c>
 8009606:	ab03      	add	r3, sp, #12
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	462a      	mov	r2, r5
 800960c:	4b05      	ldr	r3, [pc, #20]	@ (8009624 <_svfiprintf_r+0x1f0>)
 800960e:	a904      	add	r1, sp, #16
 8009610:	4638      	mov	r0, r7
 8009612:	f000 f879 	bl	8009708 <_printf_i>
 8009616:	e7ed      	b.n	80095f4 <_svfiprintf_r+0x1c0>
 8009618:	08009a9c 	.word	0x08009a9c
 800961c:	08009aa6 	.word	0x08009aa6
 8009620:	00000000 	.word	0x00000000
 8009624:	0800937d 	.word	0x0800937d
 8009628:	08009aa2 	.word	0x08009aa2

0800962c <_printf_common>:
 800962c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	4616      	mov	r6, r2
 8009632:	4698      	mov	r8, r3
 8009634:	688a      	ldr	r2, [r1, #8]
 8009636:	690b      	ldr	r3, [r1, #16]
 8009638:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800963c:	4293      	cmp	r3, r2
 800963e:	bfb8      	it	lt
 8009640:	4613      	movlt	r3, r2
 8009642:	6033      	str	r3, [r6, #0]
 8009644:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009648:	4607      	mov	r7, r0
 800964a:	460c      	mov	r4, r1
 800964c:	b10a      	cbz	r2, 8009652 <_printf_common+0x26>
 800964e:	3301      	adds	r3, #1
 8009650:	6033      	str	r3, [r6, #0]
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	0699      	lsls	r1, r3, #26
 8009656:	bf42      	ittt	mi
 8009658:	6833      	ldrmi	r3, [r6, #0]
 800965a:	3302      	addmi	r3, #2
 800965c:	6033      	strmi	r3, [r6, #0]
 800965e:	6825      	ldr	r5, [r4, #0]
 8009660:	f015 0506 	ands.w	r5, r5, #6
 8009664:	d106      	bne.n	8009674 <_printf_common+0x48>
 8009666:	f104 0a19 	add.w	sl, r4, #25
 800966a:	68e3      	ldr	r3, [r4, #12]
 800966c:	6832      	ldr	r2, [r6, #0]
 800966e:	1a9b      	subs	r3, r3, r2
 8009670:	42ab      	cmp	r3, r5
 8009672:	dc26      	bgt.n	80096c2 <_printf_common+0x96>
 8009674:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009678:	6822      	ldr	r2, [r4, #0]
 800967a:	3b00      	subs	r3, #0
 800967c:	bf18      	it	ne
 800967e:	2301      	movne	r3, #1
 8009680:	0692      	lsls	r2, r2, #26
 8009682:	d42b      	bmi.n	80096dc <_printf_common+0xb0>
 8009684:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009688:	4641      	mov	r1, r8
 800968a:	4638      	mov	r0, r7
 800968c:	47c8      	blx	r9
 800968e:	3001      	adds	r0, #1
 8009690:	d01e      	beq.n	80096d0 <_printf_common+0xa4>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	6922      	ldr	r2, [r4, #16]
 8009696:	f003 0306 	and.w	r3, r3, #6
 800969a:	2b04      	cmp	r3, #4
 800969c:	bf02      	ittt	eq
 800969e:	68e5      	ldreq	r5, [r4, #12]
 80096a0:	6833      	ldreq	r3, [r6, #0]
 80096a2:	1aed      	subeq	r5, r5, r3
 80096a4:	68a3      	ldr	r3, [r4, #8]
 80096a6:	bf0c      	ite	eq
 80096a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096ac:	2500      	movne	r5, #0
 80096ae:	4293      	cmp	r3, r2
 80096b0:	bfc4      	itt	gt
 80096b2:	1a9b      	subgt	r3, r3, r2
 80096b4:	18ed      	addgt	r5, r5, r3
 80096b6:	2600      	movs	r6, #0
 80096b8:	341a      	adds	r4, #26
 80096ba:	42b5      	cmp	r5, r6
 80096bc:	d11a      	bne.n	80096f4 <_printf_common+0xc8>
 80096be:	2000      	movs	r0, #0
 80096c0:	e008      	b.n	80096d4 <_printf_common+0xa8>
 80096c2:	2301      	movs	r3, #1
 80096c4:	4652      	mov	r2, sl
 80096c6:	4641      	mov	r1, r8
 80096c8:	4638      	mov	r0, r7
 80096ca:	47c8      	blx	r9
 80096cc:	3001      	adds	r0, #1
 80096ce:	d103      	bne.n	80096d8 <_printf_common+0xac>
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295
 80096d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d8:	3501      	adds	r5, #1
 80096da:	e7c6      	b.n	800966a <_printf_common+0x3e>
 80096dc:	18e1      	adds	r1, r4, r3
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	2030      	movs	r0, #48	@ 0x30
 80096e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096e6:	4422      	add	r2, r4
 80096e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096f0:	3302      	adds	r3, #2
 80096f2:	e7c7      	b.n	8009684 <_printf_common+0x58>
 80096f4:	2301      	movs	r3, #1
 80096f6:	4622      	mov	r2, r4
 80096f8:	4641      	mov	r1, r8
 80096fa:	4638      	mov	r0, r7
 80096fc:	47c8      	blx	r9
 80096fe:	3001      	adds	r0, #1
 8009700:	d0e6      	beq.n	80096d0 <_printf_common+0xa4>
 8009702:	3601      	adds	r6, #1
 8009704:	e7d9      	b.n	80096ba <_printf_common+0x8e>
	...

08009708 <_printf_i>:
 8009708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800970c:	7e0f      	ldrb	r7, [r1, #24]
 800970e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009710:	2f78      	cmp	r7, #120	@ 0x78
 8009712:	4691      	mov	r9, r2
 8009714:	4680      	mov	r8, r0
 8009716:	460c      	mov	r4, r1
 8009718:	469a      	mov	sl, r3
 800971a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800971e:	d807      	bhi.n	8009730 <_printf_i+0x28>
 8009720:	2f62      	cmp	r7, #98	@ 0x62
 8009722:	d80a      	bhi.n	800973a <_printf_i+0x32>
 8009724:	2f00      	cmp	r7, #0
 8009726:	f000 80d2 	beq.w	80098ce <_printf_i+0x1c6>
 800972a:	2f58      	cmp	r7, #88	@ 0x58
 800972c:	f000 80b9 	beq.w	80098a2 <_printf_i+0x19a>
 8009730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009734:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009738:	e03a      	b.n	80097b0 <_printf_i+0xa8>
 800973a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800973e:	2b15      	cmp	r3, #21
 8009740:	d8f6      	bhi.n	8009730 <_printf_i+0x28>
 8009742:	a101      	add	r1, pc, #4	@ (adr r1, 8009748 <_printf_i+0x40>)
 8009744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009748:	080097a1 	.word	0x080097a1
 800974c:	080097b5 	.word	0x080097b5
 8009750:	08009731 	.word	0x08009731
 8009754:	08009731 	.word	0x08009731
 8009758:	08009731 	.word	0x08009731
 800975c:	08009731 	.word	0x08009731
 8009760:	080097b5 	.word	0x080097b5
 8009764:	08009731 	.word	0x08009731
 8009768:	08009731 	.word	0x08009731
 800976c:	08009731 	.word	0x08009731
 8009770:	08009731 	.word	0x08009731
 8009774:	080098b5 	.word	0x080098b5
 8009778:	080097df 	.word	0x080097df
 800977c:	0800986f 	.word	0x0800986f
 8009780:	08009731 	.word	0x08009731
 8009784:	08009731 	.word	0x08009731
 8009788:	080098d7 	.word	0x080098d7
 800978c:	08009731 	.word	0x08009731
 8009790:	080097df 	.word	0x080097df
 8009794:	08009731 	.word	0x08009731
 8009798:	08009731 	.word	0x08009731
 800979c:	08009877 	.word	0x08009877
 80097a0:	6833      	ldr	r3, [r6, #0]
 80097a2:	1d1a      	adds	r2, r3, #4
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6032      	str	r2, [r6, #0]
 80097a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097b0:	2301      	movs	r3, #1
 80097b2:	e09d      	b.n	80098f0 <_printf_i+0x1e8>
 80097b4:	6833      	ldr	r3, [r6, #0]
 80097b6:	6820      	ldr	r0, [r4, #0]
 80097b8:	1d19      	adds	r1, r3, #4
 80097ba:	6031      	str	r1, [r6, #0]
 80097bc:	0606      	lsls	r6, r0, #24
 80097be:	d501      	bpl.n	80097c4 <_printf_i+0xbc>
 80097c0:	681d      	ldr	r5, [r3, #0]
 80097c2:	e003      	b.n	80097cc <_printf_i+0xc4>
 80097c4:	0645      	lsls	r5, r0, #25
 80097c6:	d5fb      	bpl.n	80097c0 <_printf_i+0xb8>
 80097c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80097cc:	2d00      	cmp	r5, #0
 80097ce:	da03      	bge.n	80097d8 <_printf_i+0xd0>
 80097d0:	232d      	movs	r3, #45	@ 0x2d
 80097d2:	426d      	negs	r5, r5
 80097d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097d8:	4859      	ldr	r0, [pc, #356]	@ (8009940 <_printf_i+0x238>)
 80097da:	230a      	movs	r3, #10
 80097dc:	e011      	b.n	8009802 <_printf_i+0xfa>
 80097de:	6821      	ldr	r1, [r4, #0]
 80097e0:	6833      	ldr	r3, [r6, #0]
 80097e2:	0608      	lsls	r0, r1, #24
 80097e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80097e8:	d402      	bmi.n	80097f0 <_printf_i+0xe8>
 80097ea:	0649      	lsls	r1, r1, #25
 80097ec:	bf48      	it	mi
 80097ee:	b2ad      	uxthmi	r5, r5
 80097f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80097f2:	4853      	ldr	r0, [pc, #332]	@ (8009940 <_printf_i+0x238>)
 80097f4:	6033      	str	r3, [r6, #0]
 80097f6:	bf14      	ite	ne
 80097f8:	230a      	movne	r3, #10
 80097fa:	2308      	moveq	r3, #8
 80097fc:	2100      	movs	r1, #0
 80097fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009802:	6866      	ldr	r6, [r4, #4]
 8009804:	60a6      	str	r6, [r4, #8]
 8009806:	2e00      	cmp	r6, #0
 8009808:	bfa2      	ittt	ge
 800980a:	6821      	ldrge	r1, [r4, #0]
 800980c:	f021 0104 	bicge.w	r1, r1, #4
 8009810:	6021      	strge	r1, [r4, #0]
 8009812:	b90d      	cbnz	r5, 8009818 <_printf_i+0x110>
 8009814:	2e00      	cmp	r6, #0
 8009816:	d04b      	beq.n	80098b0 <_printf_i+0x1a8>
 8009818:	4616      	mov	r6, r2
 800981a:	fbb5 f1f3 	udiv	r1, r5, r3
 800981e:	fb03 5711 	mls	r7, r3, r1, r5
 8009822:	5dc7      	ldrb	r7, [r0, r7]
 8009824:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009828:	462f      	mov	r7, r5
 800982a:	42bb      	cmp	r3, r7
 800982c:	460d      	mov	r5, r1
 800982e:	d9f4      	bls.n	800981a <_printf_i+0x112>
 8009830:	2b08      	cmp	r3, #8
 8009832:	d10b      	bne.n	800984c <_printf_i+0x144>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	07df      	lsls	r7, r3, #31
 8009838:	d508      	bpl.n	800984c <_printf_i+0x144>
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	6861      	ldr	r1, [r4, #4]
 800983e:	4299      	cmp	r1, r3
 8009840:	bfde      	ittt	le
 8009842:	2330      	movle	r3, #48	@ 0x30
 8009844:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009848:	f106 36ff 	addle.w	r6, r6, #4294967295
 800984c:	1b92      	subs	r2, r2, r6
 800984e:	6122      	str	r2, [r4, #16]
 8009850:	f8cd a000 	str.w	sl, [sp]
 8009854:	464b      	mov	r3, r9
 8009856:	aa03      	add	r2, sp, #12
 8009858:	4621      	mov	r1, r4
 800985a:	4640      	mov	r0, r8
 800985c:	f7ff fee6 	bl	800962c <_printf_common>
 8009860:	3001      	adds	r0, #1
 8009862:	d14a      	bne.n	80098fa <_printf_i+0x1f2>
 8009864:	f04f 30ff 	mov.w	r0, #4294967295
 8009868:	b004      	add	sp, #16
 800986a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	f043 0320 	orr.w	r3, r3, #32
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	4833      	ldr	r0, [pc, #204]	@ (8009944 <_printf_i+0x23c>)
 8009878:	2778      	movs	r7, #120	@ 0x78
 800987a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	6831      	ldr	r1, [r6, #0]
 8009882:	061f      	lsls	r7, r3, #24
 8009884:	f851 5b04 	ldr.w	r5, [r1], #4
 8009888:	d402      	bmi.n	8009890 <_printf_i+0x188>
 800988a:	065f      	lsls	r7, r3, #25
 800988c:	bf48      	it	mi
 800988e:	b2ad      	uxthmi	r5, r5
 8009890:	6031      	str	r1, [r6, #0]
 8009892:	07d9      	lsls	r1, r3, #31
 8009894:	bf44      	itt	mi
 8009896:	f043 0320 	orrmi.w	r3, r3, #32
 800989a:	6023      	strmi	r3, [r4, #0]
 800989c:	b11d      	cbz	r5, 80098a6 <_printf_i+0x19e>
 800989e:	2310      	movs	r3, #16
 80098a0:	e7ac      	b.n	80097fc <_printf_i+0xf4>
 80098a2:	4827      	ldr	r0, [pc, #156]	@ (8009940 <_printf_i+0x238>)
 80098a4:	e7e9      	b.n	800987a <_printf_i+0x172>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	f023 0320 	bic.w	r3, r3, #32
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	e7f6      	b.n	800989e <_printf_i+0x196>
 80098b0:	4616      	mov	r6, r2
 80098b2:	e7bd      	b.n	8009830 <_printf_i+0x128>
 80098b4:	6833      	ldr	r3, [r6, #0]
 80098b6:	6825      	ldr	r5, [r4, #0]
 80098b8:	6961      	ldr	r1, [r4, #20]
 80098ba:	1d18      	adds	r0, r3, #4
 80098bc:	6030      	str	r0, [r6, #0]
 80098be:	062e      	lsls	r6, r5, #24
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	d501      	bpl.n	80098c8 <_printf_i+0x1c0>
 80098c4:	6019      	str	r1, [r3, #0]
 80098c6:	e002      	b.n	80098ce <_printf_i+0x1c6>
 80098c8:	0668      	lsls	r0, r5, #25
 80098ca:	d5fb      	bpl.n	80098c4 <_printf_i+0x1bc>
 80098cc:	8019      	strh	r1, [r3, #0]
 80098ce:	2300      	movs	r3, #0
 80098d0:	6123      	str	r3, [r4, #16]
 80098d2:	4616      	mov	r6, r2
 80098d4:	e7bc      	b.n	8009850 <_printf_i+0x148>
 80098d6:	6833      	ldr	r3, [r6, #0]
 80098d8:	1d1a      	adds	r2, r3, #4
 80098da:	6032      	str	r2, [r6, #0]
 80098dc:	681e      	ldr	r6, [r3, #0]
 80098de:	6862      	ldr	r2, [r4, #4]
 80098e0:	2100      	movs	r1, #0
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7f6 fc7c 	bl	80001e0 <memchr>
 80098e8:	b108      	cbz	r0, 80098ee <_printf_i+0x1e6>
 80098ea:	1b80      	subs	r0, r0, r6
 80098ec:	6060      	str	r0, [r4, #4]
 80098ee:	6863      	ldr	r3, [r4, #4]
 80098f0:	6123      	str	r3, [r4, #16]
 80098f2:	2300      	movs	r3, #0
 80098f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098f8:	e7aa      	b.n	8009850 <_printf_i+0x148>
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	4632      	mov	r2, r6
 80098fe:	4649      	mov	r1, r9
 8009900:	4640      	mov	r0, r8
 8009902:	47d0      	blx	sl
 8009904:	3001      	adds	r0, #1
 8009906:	d0ad      	beq.n	8009864 <_printf_i+0x15c>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	079b      	lsls	r3, r3, #30
 800990c:	d413      	bmi.n	8009936 <_printf_i+0x22e>
 800990e:	68e0      	ldr	r0, [r4, #12]
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	4298      	cmp	r0, r3
 8009914:	bfb8      	it	lt
 8009916:	4618      	movlt	r0, r3
 8009918:	e7a6      	b.n	8009868 <_printf_i+0x160>
 800991a:	2301      	movs	r3, #1
 800991c:	4632      	mov	r2, r6
 800991e:	4649      	mov	r1, r9
 8009920:	4640      	mov	r0, r8
 8009922:	47d0      	blx	sl
 8009924:	3001      	adds	r0, #1
 8009926:	d09d      	beq.n	8009864 <_printf_i+0x15c>
 8009928:	3501      	adds	r5, #1
 800992a:	68e3      	ldr	r3, [r4, #12]
 800992c:	9903      	ldr	r1, [sp, #12]
 800992e:	1a5b      	subs	r3, r3, r1
 8009930:	42ab      	cmp	r3, r5
 8009932:	dcf2      	bgt.n	800991a <_printf_i+0x212>
 8009934:	e7eb      	b.n	800990e <_printf_i+0x206>
 8009936:	2500      	movs	r5, #0
 8009938:	f104 0619 	add.w	r6, r4, #25
 800993c:	e7f5      	b.n	800992a <_printf_i+0x222>
 800993e:	bf00      	nop
 8009940:	08009aad 	.word	0x08009aad
 8009944:	08009abe 	.word	0x08009abe

08009948 <memmove>:
 8009948:	4288      	cmp	r0, r1
 800994a:	b510      	push	{r4, lr}
 800994c:	eb01 0402 	add.w	r4, r1, r2
 8009950:	d902      	bls.n	8009958 <memmove+0x10>
 8009952:	4284      	cmp	r4, r0
 8009954:	4623      	mov	r3, r4
 8009956:	d807      	bhi.n	8009968 <memmove+0x20>
 8009958:	1e43      	subs	r3, r0, #1
 800995a:	42a1      	cmp	r1, r4
 800995c:	d008      	beq.n	8009970 <memmove+0x28>
 800995e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009966:	e7f8      	b.n	800995a <memmove+0x12>
 8009968:	4402      	add	r2, r0
 800996a:	4601      	mov	r1, r0
 800996c:	428a      	cmp	r2, r1
 800996e:	d100      	bne.n	8009972 <memmove+0x2a>
 8009970:	bd10      	pop	{r4, pc}
 8009972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800997a:	e7f7      	b.n	800996c <memmove+0x24>

0800997c <_sbrk_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d06      	ldr	r5, [pc, #24]	@ (8009998 <_sbrk_r+0x1c>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	f7f7 f946 	bl	8000c18 <_sbrk>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_sbrk_r+0x1a>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_sbrk_r+0x1a>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	20000774 	.word	0x20000774

0800999c <_realloc_r>:
 800999c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a0:	4680      	mov	r8, r0
 80099a2:	4615      	mov	r5, r2
 80099a4:	460c      	mov	r4, r1
 80099a6:	b921      	cbnz	r1, 80099b2 <_realloc_r+0x16>
 80099a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ac:	4611      	mov	r1, r2
 80099ae:	f7ff bc59 	b.w	8009264 <_malloc_r>
 80099b2:	b92a      	cbnz	r2, 80099c0 <_realloc_r+0x24>
 80099b4:	f7ff fbea 	bl	800918c <_free_r>
 80099b8:	2400      	movs	r4, #0
 80099ba:	4620      	mov	r0, r4
 80099bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c0:	f000 f81a 	bl	80099f8 <_malloc_usable_size_r>
 80099c4:	4285      	cmp	r5, r0
 80099c6:	4606      	mov	r6, r0
 80099c8:	d802      	bhi.n	80099d0 <_realloc_r+0x34>
 80099ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80099ce:	d8f4      	bhi.n	80099ba <_realloc_r+0x1e>
 80099d0:	4629      	mov	r1, r5
 80099d2:	4640      	mov	r0, r8
 80099d4:	f7ff fc46 	bl	8009264 <_malloc_r>
 80099d8:	4607      	mov	r7, r0
 80099da:	2800      	cmp	r0, #0
 80099dc:	d0ec      	beq.n	80099b8 <_realloc_r+0x1c>
 80099de:	42b5      	cmp	r5, r6
 80099e0:	462a      	mov	r2, r5
 80099e2:	4621      	mov	r1, r4
 80099e4:	bf28      	it	cs
 80099e6:	4632      	movcs	r2, r6
 80099e8:	f7ff fbc2 	bl	8009170 <memcpy>
 80099ec:	4621      	mov	r1, r4
 80099ee:	4640      	mov	r0, r8
 80099f0:	f7ff fbcc 	bl	800918c <_free_r>
 80099f4:	463c      	mov	r4, r7
 80099f6:	e7e0      	b.n	80099ba <_realloc_r+0x1e>

080099f8 <_malloc_usable_size_r>:
 80099f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fc:	1f18      	subs	r0, r3, #4
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bfbc      	itt	lt
 8009a02:	580b      	ldrlt	r3, [r1, r0]
 8009a04:	18c0      	addlt	r0, r0, r3
 8009a06:	4770      	bx	lr

08009a08 <_init>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	bf00      	nop
 8009a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0e:	bc08      	pop	{r3}
 8009a10:	469e      	mov	lr, r3
 8009a12:	4770      	bx	lr

08009a14 <_fini>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr
